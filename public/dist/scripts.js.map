{"version":3,"file":"scripts.js","sources":["../../bower_components/almond/almond.js","../../bower_components/d3/d3.js","../../bower_components/topojson/topojson.js","app.js"],"names":["requirejs","require","define","undef","hasProp","obj","prop","hasOwn","call","normalize","name","baseName","nameParts","nameSegment","mapValue","foundMap","lastIndex","foundI","foundStarMap","starI","i","j","part","baseParts","split","map","config","starMap","charAt","length","nodeIdCompat","jsSuffixRegExp","test","replace","slice","concat","splice","join","indexOf","substring","makeRequire","relName","forceSync","args","aps","arguments","push","req","apply","makeNormalize","makeLoad","depName","value","defined","callDep","waiting","defining","main","Error","splitPrefix","prefix","index","makeConfig","makeMap","handlers","Object","prototype","hasOwnProperty","plugin","parts","f","n","pr","p","exports","e","module","id","uri","deps","callback","cjsModule","ret","usingExports","callbackType","load","undefined","alt","setTimeout","cfg","_defined","amd","jQuery","d3_documentElement","node","ownerDocument","document","documentElement","d3_window","defaultView","d3_ascending","a","b","NaN","d3_number","x","d3_numeric","isNaN","d3_bisector","compare","left","lo","hi","mid","right","d3_zipLength","d","d3_range_integerScale","k","d3_class","ctor","properties","key","defineProperty","enumerable","d3_Map","this","_","create","d3_map_escape","d3_map_proto","d3_map_zero","d3_map_unescape","d3_map_has","d3_map_remove","d3_map_keys","keys","d3_map_size","size","d3_map_empty","d3_Set","d3_identity","d3_rebind","target","source","method","d3_vendorSymbol","object","toUpperCase","d3_vendorPrefixes","prefixName","d3_noop","d3_dispatch","d3_dispatch_event","dispatch","event","l","z","listeners","on","listenerByName","listener","get","remove","set","d3_eventPreventDefault","d3","preventDefault","d3_eventSource","s","sourceEvent","d3_eventDispatch","of","thiz","argumentz","e1","e0","type","d3_selection","groups","d3_subclass","d3_selectionPrototype","d3_selection_selector","selector","d3_select","d3_selection_selectorAll","d3_selectAll","d3_selection_attr","attrNull","removeAttribute","attrNullNS","removeAttributeNS","space","local","attrConstant","setAttribute","attrConstantNS","setAttributeNS","attrFunction","attrFunctionNS","ns","qualify","d3_collapse","trim","d3_selection_classedRe","RegExp","requote","d3_selection_classes","d3_selection_classed","classedConstant","classedFunction","d3_selection_classedName","re","c","classList","add","getAttribute","d3_selection_style","priority","styleNull","style","removeProperty","styleConstant","setProperty","styleFunction","d3_selection_property","propertyNull","propertyConstant","propertyFunction","d3_selection_creator","namespace","namespaceURI","createElementNS","createElement","createNS","d3_selectionRemove","parent","parentNode","removeChild","d3_selection_dataNode","data","__data__","d3_selection_filter","d3_selectMatches","d3_selection_sortComparator","comparator","d3_selection_each","m","group","d3_selection_enter","selection","d3_selection_enterPrototype","d3_selection_enterInsertBefore","enter","i0","j0","update","d3_selection_on","capture","onRemove","removeEventListener","$","onAdd","wrap","d3_array","addEventListener","removeAll","match","d3_selection_onListener","filter","d3_selection_onFilters","d3_selection_onFilter","o","related","relatedTarget","compareDocumentPosition","d3_event_dragSuppress","d3_event_dragId","click","w","select","d3_event_dragSelect","suppressClick","off","d3_mousePoint","container","changedTouches","svg","ownerSVGElement","createSVGPoint","point","d3_mouse_bug44083","window","scrollX","scrollY","append","position","top","margin","padding","border","ctm","getScreenCTM","pageX","y","pageY","clientX","clientY","matrixTransform","inverse","rect","getBoundingClientRect","clientLeft","clientTop","d3_behavior_dragTouchId","identifier","d3_sgn","d3_cross2d","d3_acos","π","Math","acos","d3_asin","halfπ","asin","d3_sinh","exp","d3_cosh","d3_tanh","d3_haversin","sin","d3_color","d3_hsl","h","d3_rgb_parse","d3_rgb_hsl","d3_hsl_rgb","v","m1","m2","vv","round","d3_rgb","d3_hcl","d3_lab","d3_lab_hcl","d3_rgb_lab","rgb","r","g","d3_hcl_lab","cos","d3_radians","d3_lab_rgb","d3_lab_xyz","d3_lab_X","d3_lab_Y","d3_lab_Z","d3_xyz_rgb","atan2","d3_degrees","sqrt","d3_xyz_lab","pow","d3_rgbNumber","d3_rgbString","d3_rgb_hex","max","toString","min","format","hsl","color","exec","parseFloat","d3_rgb_parseNumber","d3_rgb_names","toLowerCase","parseInt","d3_rgb_xyz","d3_functor","d3_xhrType","response","url","mimeType","d3_xhr","respond","result","status","request","d3_xhrHasResponse","xhr","error","headers","XMLHttpRequest","responseType","XDomainRequest","onload","onerror","onreadystatechange","readyState","onprogress","progress","header","forEach","send","open","setRequestHeader","overrideMimeType","beforesend","abort","rebind","d3_xhr_fixCallback","responseText","d3_timer_step","now","d3_timer_mark","delay","d3_timer_sweep","isFinite","clearTimeout","d3_timer_timeout","d3_timer_interval","d3_timer_frame","Date","d3_timer_active","d3_timer_queueHead","t","t0","t1","time","Infinity","d3_timer_queueTail","d3_format_precision","ceil","log","LN10","d3_formatPrefix","abs","scale","symbol","d3_locale_numberFormat","locale","locale_decimal","decimal","locale_thousands","thousands","locale_grouping","grouping","locale_currency","currency","formatGroup","width","reverse","specifier","d3_format_re","fill","align","sign","zfill","comma","precision","suffix","integer","exponent","d3_format_types","d3_format_typeDefault","zcomma","fullSuffix","negative","unit","formatPrefix","before","after","lastIndexOf","Array","d3_date_utc","UTC","d3_time_interval","step","number","date","d0","d1","offset","d3_date","range","dt","times","range_utc","utc","floor","d3_time_interval_utc","d3_locale_timeFormat","d3_time_format","template","string","charCodeAt","d3_time_formatPads","d3_time_formats","parse","H","M","S","L","Z","d3_time_parse","localZ","setFullYear","W","getDay","U","setHours","d3_time_parsers","d3_time_parseWeekdayAbbrev","d3_time_dayAbbrevRe","d3_time_dayAbbrevLookup","d3_time_parseWeekday","d3_time_dayRe","d3_time_dayLookup","d3_time_parseMonthAbbrev","d3_time_monthAbbrevRe","d3_time_monthAbbrevLookup","d3_time_parseMonth","d3_time_monthRe","d3_time_monthLookup","d3_time_parseLocaleFull","d3_time_parseLocaleDate","d3_time_parseLocaleTime","X","d3_time_parseAmPm","d3_time_periodLookup","locale_dateTime","dateTime","locale_date","locale_time","locale_periods","periods","locale_days","days","locale_shortDays","shortDays","locale_months","months","locale_shortMonths","shortMonths","multi","d3_time_formatMulti","d3_time_formatRe","d3_time_formatLookup","A","getMonth","B","d3_time_formatPad","getDate","getHours","I","d3_time","dayOfYear","getMilliseconds","getMinutes","getSeconds","sundayOfYear","mondayOfYear","getFullYear","Y","d3_time_zone","%","d3_time_parseDay","d3_time_parseHour24","d3_time_parseDayOfYear","d3_time_parseMilliseconds","d3_time_parseMonthNumber","d3_time_parseMinutes","d3_time_parseSeconds","d3_time_parseWeekNumberSunday","d3_time_parseWeekdayNumber","d3_time_parseWeekNumberMonday","d3_time_parseYear","d3_time_parseFullYear","d3_time_parseZone","d3_time_parseLiteralPercent","names","d3_time_numberRe","d3_time_expandYear","getTimezoneOffset","zs","zh","zm","d3_time_percentRe","formats","d3_adder","d3_adderSum","bv","av","d3_geo_streamGeometry","geometry","d3_geo_streamGeometryType","d3_geo_streamLine","coordinates","closed","coordinate","lineStart","lineEnd","d3_geo_streamPolygon","polygonStart","polygonEnd","d3_geo_areaRingStart","nextPoint","λ","φ","dλ","λ0","sdλ","adλ","cosφ","sinφ","sinφ0","u","cosφ0","d3_geo_areaRingSum","λ00","φ00","d3_geo_area","d3_geo_cartesian","spherical","d3_geo_cartesianDot","d3_geo_cartesianCross","d3_geo_cartesianAdd","d3_geo_cartesianScale","vector","d3_geo_cartesianNormalize","d3_geo_spherical","cartesian","d3_geo_sphericalEqual","ε","d3_geo_centroidPoint","d3_geo_centroidPointXYZ","d3_geo_centroidW0","d3_geo_centroidX0","d3_geo_centroidY0","d3_geo_centroidZ0","d3_geo_centroidLineStart","y0","z0","x0","d3_geo_centroidW1","d3_geo_centroidX1","d3_geo_centroidY1","d3_geo_centroidZ1","d3_geo_centroid","d3_geo_centroidLineEnd","d3_geo_centroidRingStart","cx","cy","cz","d3_geo_centroidX2","d3_geo_centroidY2","d3_geo_centroidZ2","d3_geo_compose","compose","invert","d3_true","d3_geo_clipPolygon","segments","clipStartInside","interpolate","subject","clip","segment","p0","p1","d3_geo_clipPolygonIntersection","sort","d3_geo_clipPolygonLinkCircular","entry","points","start","current","isSubject","array","other","d3_geo_clip","pointVisible","clipLine","clipStart","rotate","pointLine","line","pointRing","ring","ringListener","ringStart","ringEnd","clean","ringSegments","buffer","pop","polygon","polygonStarted","shift","d3_geo_clipSegmentLength1","rotatedClipStart","merge","d3_geo_pointInPolygon","d3_geo_clipSort","sphere","d3_geo_clipBufferListener","lines","rejoin","d3_geo_clipAntimeridianLine","φ0","sλ0","λ1","φ1","sλ1","d3_geo_clipAntimeridianIntersect","cosφ1","sinλ0_λ1","atan","d3_geo_clipAntimeridianInterpolate","from","to","direction","meridian","parallel","meridianNormal","polarAngle","winding","reset","point0","antimeridian","τ","arc","intersection","φarc","d3_geo_clipCircle","radius","visible","cr","c0","v0","v00","point2","point1","smallRadius","code","intersect","notHemisphere","two","pa","pb","n1","n2","n2n2","n1n2","determinant","c1","c2","n1xn2","uu","t2","q","δλ","polar","q1","d3_geo_circleInterpolate","d3_geom_clipLine","x1","y1","ax","ay","bx","by","dx","dy","d3_geo_clipExtent","corner","comparePoints","ca","cb","insidePolygon","wn","a1","linePoint","first","v_","x_","y_","x__","y__","v__","bufferListener","d3_geo_clipExtentMAX","listener_","inside","d3_geo_conic","projectAt","d3_geo_projectionMutator","parallels","d3_geo_conicEqualArea","forward","ρ","C","ρ0","ρ0_y","d3_geo_pathAreaRingStart","d3_geo_pathAreaPolygon","x00","y00","d3_geo_pathArea","d3_geo_pathBoundsPoint","d3_geo_pathBoundsX0","d3_geo_pathBoundsX1","d3_geo_pathBoundsY0","d3_geo_pathBoundsY1","d3_geo_pathBuffer","pointCircle","pointLineStart","stream","lineEndPolygon","d3_geo_pathBufferCircle","pointRadius","d3_geo_pathCentroidPoint","d3_geo_pathCentroidLineStart","d3_geo_pathCentroid","d3_geo_pathCentroidLineEnd","d3_geo_pathCentroidRingStart","d3_geo_pathContext","context","moveTo","lineTo","closePath","d3_geo_resample","project","resample","maxDepth","resampleRecursive","resampleNone","d3_geo_transformPoint","resampleLineTo","a0","b0","ringPoint","a00","b00","c00","b1","depth","d2","δ2","φ2","λ2","x2","y2","dx2","dy2","dz","cosMinDistance","d3_geo_pathProjectStream","d3_geo_projectionRadians","d3_geo_transform","d3_geo_projection","projection","projectRotate","δx","δy","d3_geo_rotation","δφ","δγ","center","invalidate","valid","projectResample","preclip","d3_geo_clipAntimeridian","postclip","clipAngle","clipExtent","output","translate","d3_geo_equirectangular","d3_geo_identityRotation","d3_geo_rotationλ","d3_geo_rotationφγ","d3_geo_forwardRotationλ","rotation","cosδφ","sinδφ","cosδγ","sinδγ","sr","d3_geo_circleAngle","angle","PI","d3_geo_graticuleX","d3_geo_graticuleY","d3_source","d3_target","d3_geo_interpolate","cy0","sy0","cy1","sy1","kx0","ky0","kx1","ky1","distance","d3_geo_lengthLineStart","cosΔλ","d3_geo_lengthSum","d3_geo_length","d3_geo_azimuthal","azimuthal","cosλ","sinc","cosc","d3_geo_conicConformal","F","tan","d3_geo_mercator","d3_geo_conicEquidistant","G","d3_geo_mercatorProjection","clipAuto","d3_geo_transverseMercator","d3_geom_pointX","d3_geom_pointY","d3_geom_hullUpper","hull","hs","d3_geom_hullOrder","d3_geom_polygonInside","d3_geom_polygonIntersect","x3","x21","x43","y3","y21","y43","ua","d3_geom_polygonClosed","d3_geom_voronoiBeach","d3_geom_voronoiRedBlackNode","edge","site","circle","d3_geom_voronoiCreateBeach","beach","d3_geom_voronoiBeachPool","d3_geom_voronoiDetachBeach","d3_geom_voronoiDetachCircle","d3_geom_voronoiBeaches","d3_geom_voronoiRemoveBeach","vertex","previous","P","next","N","disappearing","lArc","unshift","rArc","iArc","nArcs","d3_geom_voronoiSetEdgeEnd","d3_geom_voronoiCreateEdge","d3_geom_voronoiAttachCircle","d3_geom_voronoiAddBeach","dxl","dxr","directrix","d3_geom_voronoiLeftBreakPoint","d3_geom_voronoiRightBreakPoint","R","newArc","insert","lSite","rSite","hb","hc","rfocx","rfocy","pby2","lfocx","lfocy","plby2","hl","aby2","d3_geom_voronoiCell","edges","d3_geom_voronoiCloseCells","extent","cell","iHalfEdge","halfEdges","nHalfEdges","end","cells","d3_geom_voronoiCells","iCell","prepare","d3_geom_voronoiHalfEdge","d3_geom_voronoiCreateBorderEdge","d3_geom_voronoiHalfEdgeOrder","d3_geom_voronoiCircle","cSite","ε2","ha","d3_geom_voronoiCirclePool","d3_geom_voronoiCircles","d3_geom_voronoiFirstCircle","d3_geom_voronoiClipEdges","d3_geom_voronoiEdges","d3_geom_voronoiConnectEdge","vb","fm","fb","va","lx","ly","rx","ry","fx","fy","d3_geom_voronoiEdge","d3_geom_voronoiRedBlackTree","d3_geom_voronoiRedBlackRotateLeft","tree","d3_geom_voronoiRedBlackRotateRight","d3_geom_voronoiRedBlackFirst","d3_geom_voronoi","sites","bbox","d3_geom_voronoiVertexOrder","diagram","d3_geom_voronoiTriangleArea","d3_geom_quadtreeCompatX","d3_geom_quadtreeCompatY","d3_geom_quadtreeNode","leaf","nodes","d3_geom_quadtreeVisit","sx","sy","children","d3_geom_quadtreeFind","root","closestPoint","minDistance2","find","distance2","xm","ym","below","d3_interpolateRgb","ar","ag","ab","br","bg","bb","d3_interpolateObject","d3_interpolate","d3_interpolateNumber","d3_interpolateString","am","bm","bs","bi","d3_interpolate_numberA","d3_interpolate_numberB","interpolators","d3_interpolateArray","na","nb","n0","d3_ease_clamp","d3_ease_reverse","d3_ease_reflect","d3_ease_quad","d3_ease_cubic","d3_ease_cubicInOut","t3","d3_ease_poly","d3_ease_sin","d3_ease_exp","d3_ease_circle","d3_ease_elastic","d3_ease_back","d3_ease_bounce","d3_interpolateHcl","hcl","ah","ac","al","bh","bc","bl","d3_interpolateHsl","as","d3_interpolateLab","lab","aa","ba","d3_interpolateRound","d3_transform","r0","r1","kx","d3_transformNormalize","kz","d3_transformDot","ky","d3_transformCombine","skew","d3_interpolateTransform","transform","ta","tb","ra","rb","wa","wb","ka","kb","d3_uninterpolateNumber","d3_uninterpolateClamp","d3_layout_bundlePath","link","lca","d3_layout_bundleLeastCommonAncestor","d3_layout_bundleAncestors","ancestors","aNodes","bNodes","aNode","bNode","sharedNode","d3_layout_forceDragstart","fixed","d3_layout_forceDragend","d3_layout_forceMouseover","px","py","d3_layout_forceMouseout","d3_layout_forceAccumulate","quad","alpha","charges","charge","random","pointCharge","d3_layout_hierarchyRebind","hierarchy","links","d3_layout_hierarchyLinks","d3_layout_hierarchyVisitBefore","d3_layout_hierarchyVisitAfter","nodes2","d3_layout_hierarchyChildren","d3_layout_hierarchyValue","d3_layout_hierarchySort","child","d3_layout_stackX","d3_layout_stackY","d3_layout_stackOut","d3_layout_stackOrderDefault","d3_layout_stackOffsetZero","d3_layout_stackMaxIndex","d3_layout_stackReduceSum","reduce","d3_layout_stackSum","d3_layout_histogramBinSturges","values","d3_layout_histogramBinFixed","LN2","d3_layout_histogramRange","d3_layout_packSort","d3_layout_packInsert","_pack_next","_pack_prev","d3_layout_packSplice","d3_layout_packIntersects","dr","d3_layout_packSiblings","bound","xMin","xMax","yMin","yMax","d3_layout_packLink","d3_layout_packPlace","isect","s1","s2","d3_layout_packUnlink","d3_layout_packTransform","db","da","dc","d3_layout_treeSeparation","d3_layout_treeLeft","d3_layout_treeRight","d3_layout_treeMove","wm","wp","change","d3_layout_treeShift","d3_layout_treeAncestor","vim","ancestor","d3_layout_clusterY","d3_layout_clusterX","d3_layout_clusterLeft","d3_layout_clusterRight","d3_layout_treemapPadNull","d3_layout_treemapPad","d3_scaleExtent","domain","stop","d3_scaleRange","rangeExtent","d3_scale_bilinear","uninterpolate","d3_scale_nice","nice","i1","d3_scale_niceStep","d3_scale_niceIdentity","d3_scale_polylinear","bisect","d3_scale_linear","clamp","rescale","linear","input","Number","rangeRound","ticks","d3_scale_linearTicks","tickFormat","d3_scale_linearTickFormat","d3_scale_linearNice","copy","d3_scale_linearRebind","d3_scale_linearTickRange","span","err","d3_scale_linearPrecision","d3_scale_linearFormatPrecision","d3_scale_linearFormatSignificant","d3_scale_log","base","positive","niced","d3_scale_logNiceNegative","d3_scale_logFormat","d3_scale_pow","powp","d3_scale_powPow","powb","d3_scale_ordinal","ranger","steps","rangeBand","xi","has","rangePoints","rangeRoundPoints","rangeBands","outerPadding","rangeRoundBands","d3_scale_quantile","thresholds","quantile","quantiles","invertExtent","d3_scale_quantize","d3_scale_threshold","d3_scale_identity","identity","d3_zero","d3_svg_arcInnerRadius","innerRadius","d3_svg_arcOuterRadius","outerRadius","d3_svg_arcStartAngle","startAngle","d3_svg_arcEndAngle","endAngle","d3_svg_arcPadAngle","padAngle","d3_svg_arcSweep","d3_svg_arcCornerTangents","rc","cw","x01","y01","ox","oy","D","cx0","cx1","dx0","dy0","dx1","dy1","d3_svg_line","tension","d3_svg_lineLinear","interpolateKey","d3_svg_lineInterpolators","d3_svg_lineLinearClosed","d3_svg_lineStep","path","d3_svg_lineStepBefore","d3_svg_lineStepAfter","d3_svg_lineCardinalOpen","d3_svg_lineHermite","d3_svg_lineCardinalTangents","d3_svg_lineCardinalClosed","d3_svg_lineCardinal","tangents","pi","lp","p2","d3_svg_lineBasis","d3_svg_lineDot4","d3_svg_lineBasisBezier3","d3_svg_lineBasisBezier","d3_svg_lineBasisOpen","d3_svg_lineBasisClosed","d3_svg_lineBundle","d3_svg_lineBasisBezier1","d3_svg_lineBasisBezier2","d3_svg_lineSlope","d3_svg_lineFiniteDifferences","d3_svg_lineMonotoneTangents","d3_svg_lineMonotone","d3_svg_lineRadial","d3_svg_area","area","points1","interpolateReverse","points0","fx0","fy0","fx1","fy1","d3_svg_chordRadius","d3_svg_diagonalProjection","d3_svg_diagonalRadialProjection","d3_svg_symbolSize","d3_svg_symbolType","d3_svg_symbolCircle","d3_selection_interruptNS","lock","active","count","interrupt","d3_transition","d3_transitionPrototype","d3_transition_tween","tween","d3_transition_text","textContent","d3_transitionNamespace","d3_transitionNode","inherit","transition","duration","ease","timer","elapsed","tweened","tick","d3_svg_axisX","attr","d3_svg_axisY","d3_time_formatIsoNative","toISOString","d3_time_scale","methods","tickMethod","d3_time_scaleSteps","year","d3_time_scaleMilliseconds","d3_time_scaleDate","interval","skip","skipped","d3_json","JSON","d3_html","d3_document","createRange","selectNode","body","createContextualFragment","version","d3_arraySlice","list","childNodes","nodeType","d3_element_prototype","Element","d3_element_setAttribute","d3_element_setAttributeNS","d3_style_prototype","CSSStyleDeclaration","d3_style_setProperty","ascending","descending","sum","mean","median","numbers","variance","deviation","d3_bisect","bisectLeft","bisectRight","bisector","shuffle","permute","indexes","permutes","pairs","zip","zips","transpose","matrix","entries","arrays","merged","isArray","empty","nest","mapType","rollup","sortValues","keyValue","setter","valuesByKey","sortKey","sortKeys","keyMap","order","behavior","d3_requote_re","__proto__","property","querySelector","querySelectorAll","d3_selectMatcher","matches","Sizzle","matchesSelector","subgroup","subnode","subgroups","selectAll","d3_nsPrefix","xhtml","xlink","xml","xmlns","getAttributeNS","each","classed","contains","getComputedStyle","getPropertyValue","text","html","innerHTML","appendChild","insertBefore","bind","groupData","nodeData","updateNodes","enterNodes","exitNodes","nodeByKeyValue","keyValues","exit","datum","nextSibling","upgroup","mouseenter","mouseleave","mouse","navigator","userAgent","touch","touches","drag","mousedown","touchstart","dragstart","move","moved","position1","dragId","position0","dragged","dragOffset","ended","dragSubject","dragName","dragRestore","that","origin","τε","SQRT2","ρ2","ρ4","interpolateZoom","coshr0","w0","ux0","uy0","ux1","uy1","w1","zoom","mousedowned","d3_behavior_zoomWheel","mousewheeled","dblclicked","touchstarted","location","view","scaleTo","scaleExtent","translateTo","zoomTo","__chart__","center0","zoomstarted","zooming","zoomed","zoomended","location0","mousemove","mouseup","d3_selection_interrupt","relocate","scale0","locations0","started","touchmove","touchend","targets","changed","touchtime","distance0","l0","l1","distance1","scale1","zoomName","mousewheelTimer","translate0","d3_behavior_zoomDelta","shiftKey","d3_behavior_zoomInfinity","deltaY","deltaMode","wheelDelta","detail","view1","d3_transitionInheritId","d3_hslPrototype","brighter","darker","d3_hclPrototype","d3_lab_K","d3_labPrototype","d3_rgbPrototype","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","functor","dsv","delimiter","row","typedResponse","formatRow","formatValue","reFormat","delimiterCode","parseRows","Function","stringify","token","EOF","eol","EOL","rows","formatRows","fieldSet","fields","field","csv","tsv","then","flush","d3_formatPrefixes","String","fromCharCode","toPrecision","toExponential","toFixed","getUTCDate","getUTCDay","getUTCFullYear","getUTCHours","getUTCMilliseconds","getUTCMinutes","getUTCMonth","getUTCSeconds","getTime","valueOf","setDate","d3_time_prototype","setUTCDate","setDay","setUTCDay","setUTCFullYear","setUTCHours","setMilliseconds","setUTCMilliseconds","setMinutes","setUTCMinutes","setMonth","setUTCMonth","setSeconds","setUTCSeconds","setTime","day","years","week","sunday","weeks","weekOfYear","-","0","numberFormat","timeFormat","d3_locale_enUS","geo","d3_adderTemp","d3_geo_streamObjectType","Feature","feature","FeatureCollection","features","Sphere","Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","GeometryCollection","geometries","d3_geo_areaSum","bounds","ranges","normal","equatorial","inflection","λ_","λi","φi","dλSum","λ__","φ__","compareRanges","withinRange","best","centroid","conicEqualArea","raw","albers","albersUsa","lower48Point","alaskaPoint","hawaiiPoint","lower48","alaska","hawaii","pointStream","lower48Stream","alaskaStream","hawaiiStream","d3_geo_pathAreaSum","d3_geo_pathBounds","contextStream","cacheStream","projectStream","projectionMutator","equirectangular","Δλ","sinΔλ","sinφ1","graticule","X0","DX","X1","Y0","DY","Y1","outline","majorExtent","minorExtent","majorStep","minorStep","greatArc","source_","target_","d3_geo_azimuthalEqualArea","cosλcosφ","azimuthalEqualArea","d3_geo_azimuthalEquidistant","azimuthalEquidistant","conicConformal","conicEquidistant","d3_geo_gnomonic","gnomonic","mercator","d3_geo_orthographic","orthographic","d3_geo_stereographic","stereographic","transverseMercator","geom","vertices","flippedPoints","upper","lower","skipLeft","skipRight","d3_geom_polygonPrototype","grandpa","uncle","sibling","voronoi","polygons","d3_geom_voronoiClipExtent","triangles","s0","delaunay","quadtree","nx","ny","insertChild","nPoint","xs","ys","x1_","y1_","x2_","y2_","compat","visit","interpolateRgb","interpolateObject","interpolateNumber","interpolateString","interpolateArray","d3_ease_default","d3_ease","poly","cubic","elastic","back","bounce","d3_ease_mode","in","out","in-out","out-in","interpolateHcl","interpolateHsl","interpolateLab","interpolateRound","baseVal","consolidate","d3_transformIdentity","interpolateTransform","layout","bundle","paths","chord","relayout","groupSums","groupIndex","subgroupIndex","chords","sortGroups","sortSubgroups","di","dj","subindex","sortChords","resort","force","repulse","dw","dn","theta2","chargeDistance2","dragmove","resume","distances","strengths","friction","linkDistance","d3_layout_forceLinkDistance","linkStrength","d3_layout_forceLinkStrength","d3_layout_forceChargeDistance2","gravity","weight","chargeDistance","theta","dimension","neighbors","candidates","stack","childs","revalue","partition","pie","arcs","d3_layout_pieSortByValue","series","orders","offsets","d3_layout_stackOrders","d3_layout_stackOffsets","inside-out","sums","bottom","tops","bottoms","default","silhouette","wiggle","s3","o0","expand","zero","histogram","bin","bins","valuer","binner","frequency","pack","root0","root1","wrapTree","firstWalk","secondWalk","nodeSize","sizeNode","tx","separation","node1","queue","siblings","midpoint","apportion","vip","vop","vom","sip","sop","sim","som","cluster","previousNode","treemap","squarify","score","pad","remaining","mode","worst","stickify","rmax","rmin","ratio","stickies","sticky","padFunction","padConstant","µ","σ","logNormal","bates","irwinHall","ordinal","category10","d3_category10","category20","d3_category20","category20b","d3_category20b","category20c","d3_category20c","quantize","threshold","circleSegment","rp","ap","padRadius","d3_svg_arcAuto","h1","h0","cornerRadius","oc","kc","lc","rc1","t30","t12","rc0","t03","t21","linear-closed","step-before","step-after","basis","basis-open","basis-closed","cardinal","cardinal-open","cardinal-closed","monotone","radial","equals","curve","self","diagonal","p3","projection_","d3_svg_symbols","cross","diamond","d3_svg_symbolTan30","square","triangle-down","d3_svg_symbolSqrt3","triangle-up","symbolTypes","d3_transitionId","d3_transitionInherit","subnodes","nameNS","attrTween","attrTweenNS","styleString","styleTween","inheritId","id0","id1","axis","tickTransform","tickValues","tickArguments_","tickFormat_","tickEnter","tickExit","tickUpdate","tickSpacing","innerTickSize","tickPadding","pathUpdate","lineEnter","lineUpdate","textEnter","textUpdate","orient","outerTickSize","d3_svg_axisDefaultOrient","d3_svg_axisOrients","tickSize","tickSubdivide","brush","brushstart","background","resize","resizes","d3_svg_brushCursor","gUpdate","backgroundUpdate","redrawX","redrawY","redraw","xExtent","yExtent","keydown","keyCode","dragging","keyup","brushmove","altKey","resizingX","move1","resizingY","event_","yClamp","xClamp","yExtentDomain","xExtentDomain","brushend","eventTarget","resizing","ex","ey","d3_svg_brushResizes","extent1","extent0","yi","clear","nw","ne","se","sw","d3_time_formatUtc","d3_time_formatIso","iso","second","seconds","minute","minutes","hour","timezone","hours","month","d3_time_scaleLocalMethods","d3_time_scaleLocalFormat","d3_time_scaleUtcMethods","d3_time_scaleUtcFormat","json","responseXML","stitchArcs","topology","ends","dp","fragmentByEnd","fragmentByStart","stitchedArcs","fragments","emptyIndex","fg","gf","meshArcs","geomsByArc","geometryType","geoms","mergeArcs","objects","register","polygonsByArc","exterior","cartesianRingArea","components","component","sgn","featureOrCollection","absolute","transformAbsolute","indexesByArc","ij","ik","presimplify","triangleArea","triangle","heap","relative","transformRelative","minAreaHeap","cartesianTriangleArea","maxArea","compareArea","up","down","removed","noop","topojson","mesh","counties","console","height","tl_2014_us_county_texas","percentChange","countyGeo"],"mappings":"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","sourcesContent":["/**\n * @license almond 0.3.1 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/jrburke/almond for details\n */\n//Going sloppy to avoid 'use strict' string cost, but strict practices should\n//be followed.\n/*jslint sloppy: true */\n/*global setTimeout: false */\n\nvar requirejs, require, define;\n(function (undef) {\n    var main, req, makeMap, handlers,\n        defined = {},\n        waiting = {},\n        config = {},\n        defining = {},\n        hasOwn = Object.prototype.hasOwnProperty,\n        aps = [].slice,\n        jsSuffixRegExp = /\\.js$/;\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    /**\n     * Given a relative module name, like ./something, normalize it to\n     * a real name that can be mapped to a path.\n     * @param {String} name the relative name\n     * @param {String} baseName a real name that the name arg is relative\n     * to.\n     * @returns {String} normalized name\n     */\n    function normalize(name, baseName) {\n        var nameParts, nameSegment, mapValue, foundMap, lastIndex,\n            foundI, foundStarMap, starI, i, j, part,\n            baseParts = baseName && baseName.split(\"/\"),\n            map = config.map,\n            starMap = (map && map['*']) || {};\n\n        //Adjust any relative paths.\n        if (name && name.charAt(0) === \".\") {\n            //If have a base name, try to normalize against it,\n            //otherwise, assume it is a top-level require that will\n            //be relative to baseUrl in the end.\n            if (baseName) {\n                name = name.split('/');\n                lastIndex = name.length - 1;\n\n                // Node .js allowance:\n                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n                }\n\n                //Lop off the last part of baseParts, so that . matches the\n                //\"directory\" and not name of the baseName's module. For instance,\n                //baseName of \"one/two/three\", maps to \"one/two/three.js\", but we\n                //want the directory, \"one/two\" for this normalization.\n                name = baseParts.slice(0, baseParts.length - 1).concat(name);\n\n                //start trimDots\n                for (i = 0; i < name.length; i += 1) {\n                    part = name[i];\n                    if (part === \".\") {\n                        name.splice(i, 1);\n                        i -= 1;\n                    } else if (part === \"..\") {\n                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {\n                            //End of the line. Keep at least one non-dot\n                            //path segment at the front so it can be mapped\n                            //correctly to disk. Otherwise, there is likely\n                            //no path mapping for a path starting with '..'.\n                            //This can still fail, but catches the most reasonable\n                            //uses of ..\n                            break;\n                        } else if (i > 0) {\n                            name.splice(i - 1, 2);\n                            i -= 2;\n                        }\n                    }\n                }\n                //end trimDots\n\n                name = name.join(\"/\");\n            } else if (name.indexOf('./') === 0) {\n                // No baseName, so this is ID is resolved relative\n                // to baseUrl, pull off the leading dot.\n                name = name.substring(2);\n            }\n        }\n\n        //Apply map config if available.\n        if ((baseParts || starMap) && map) {\n            nameParts = name.split('/');\n\n            for (i = nameParts.length; i > 0; i -= 1) {\n                nameSegment = nameParts.slice(0, i).join(\"/\");\n\n                if (baseParts) {\n                    //Find the longest baseName segment match in the config.\n                    //So, do joins on the biggest to smallest lengths of baseParts.\n                    for (j = baseParts.length; j > 0; j -= 1) {\n                        mapValue = map[baseParts.slice(0, j).join('/')];\n\n                        //baseName segment has  config, find if it has one for\n                        //this name.\n                        if (mapValue) {\n                            mapValue = mapValue[nameSegment];\n                            if (mapValue) {\n                                //Match, update name to the new value.\n                                foundMap = mapValue;\n                                foundI = i;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (foundMap) {\n                    break;\n                }\n\n                //Check for a star map match, but just hold on to it,\n                //if there is a shorter segment match later in a matching\n                //config, then favor over this star map.\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\n                    foundStarMap = starMap[nameSegment];\n                    starI = i;\n                }\n            }\n\n            if (!foundMap && foundStarMap) {\n                foundMap = foundStarMap;\n                foundI = starI;\n            }\n\n            if (foundMap) {\n                nameParts.splice(0, foundI, foundMap);\n                name = nameParts.join('/');\n            }\n        }\n\n        return name;\n    }\n\n    function makeRequire(relName, forceSync) {\n        return function () {\n            //A version of a require function that passes a moduleName\n            //value for items that may need to\n            //look up paths relative to the moduleName\n            var args = aps.call(arguments, 0);\n\n            //If first arg is not require('string'), and there is only\n            //one arg, it is the array form without a callback. Insert\n            //a null so that the following concat is correct.\n            if (typeof args[0] !== 'string' && args.length === 1) {\n                args.push(null);\n            }\n            return req.apply(undef, args.concat([relName, forceSync]));\n        };\n    }\n\n    function makeNormalize(relName) {\n        return function (name) {\n            return normalize(name, relName);\n        };\n    }\n\n    function makeLoad(depName) {\n        return function (value) {\n            defined[depName] = value;\n        };\n    }\n\n    function callDep(name) {\n        if (hasProp(waiting, name)) {\n            var args = waiting[name];\n            delete waiting[name];\n            defining[name] = true;\n            main.apply(undef, args);\n        }\n\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\n            throw new Error('No ' + name);\n        }\n        return defined[name];\n    }\n\n    //Turns a plugin!resource to [plugin, resource]\n    //with the plugin being undefined if the name\n    //did not have a plugin prefix.\n    function splitPrefix(name) {\n        var prefix,\n            index = name ? name.indexOf('!') : -1;\n        if (index > -1) {\n            prefix = name.substring(0, index);\n            name = name.substring(index + 1, name.length);\n        }\n        return [prefix, name];\n    }\n\n    /**\n     * Makes a name map, normalizing the name, and using a plugin\n     * for normalization if necessary. Grabs a ref to plugin\n     * too, as an optimization.\n     */\n    makeMap = function (name, relName) {\n        var plugin,\n            parts = splitPrefix(name),\n            prefix = parts[0];\n\n        name = parts[1];\n\n        if (prefix) {\n            prefix = normalize(prefix, relName);\n            plugin = callDep(prefix);\n        }\n\n        //Normalize according\n        if (prefix) {\n            if (plugin && plugin.normalize) {\n                name = plugin.normalize(name, makeNormalize(relName));\n            } else {\n                name = normalize(name, relName);\n            }\n        } else {\n            name = normalize(name, relName);\n            parts = splitPrefix(name);\n            prefix = parts[0];\n            name = parts[1];\n            if (prefix) {\n                plugin = callDep(prefix);\n            }\n        }\n\n        //Using ridiculous property names for space reasons\n        return {\n            f: prefix ? prefix + '!' + name : name, //fullName\n            n: name,\n            pr: prefix,\n            p: plugin\n        };\n    };\n\n    function makeConfig(name) {\n        return function () {\n            return (config && config.config && config.config[name]) || {};\n        };\n    }\n\n    handlers = {\n        require: function (name) {\n            return makeRequire(name);\n        },\n        exports: function (name) {\n            var e = defined[name];\n            if (typeof e !== 'undefined') {\n                return e;\n            } else {\n                return (defined[name] = {});\n            }\n        },\n        module: function (name) {\n            return {\n                id: name,\n                uri: '',\n                exports: defined[name],\n                config: makeConfig(name)\n            };\n        }\n    };\n\n    main = function (name, deps, callback, relName) {\n        var cjsModule, depName, ret, map, i,\n            args = [],\n            callbackType = typeof callback,\n            usingExports;\n\n        //Use name if no relName\n        relName = relName || name;\n\n        //Call the callback to define the module, if necessary.\n        if (callbackType === 'undefined' || callbackType === 'function') {\n            //Pull out the defined dependencies and pass the ordered\n            //values to the callback.\n            //Default to [require, exports, module] if no deps\n            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\n            for (i = 0; i < deps.length; i += 1) {\n                map = makeMap(deps[i], relName);\n                depName = map.f;\n\n                //Fast path CommonJS standard dependencies.\n                if (depName === \"require\") {\n                    args[i] = handlers.require(name);\n                } else if (depName === \"exports\") {\n                    //CommonJS module spec 1.1\n                    args[i] = handlers.exports(name);\n                    usingExports = true;\n                } else if (depName === \"module\") {\n                    //CommonJS module spec 1.1\n                    cjsModule = args[i] = handlers.module(name);\n                } else if (hasProp(defined, depName) ||\n                           hasProp(waiting, depName) ||\n                           hasProp(defining, depName)) {\n                    args[i] = callDep(depName);\n                } else if (map.p) {\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n                    args[i] = defined[depName];\n                } else {\n                    throw new Error(name + ' missing ' + depName);\n                }\n            }\n\n            ret = callback ? callback.apply(defined[name], args) : undefined;\n\n            if (name) {\n                //If setting exports via \"module\" is in play,\n                //favor that over return value and exports. After that,\n                //favor a non-undefined return value over exports use.\n                if (cjsModule && cjsModule.exports !== undef &&\n                        cjsModule.exports !== defined[name]) {\n                    defined[name] = cjsModule.exports;\n                } else if (ret !== undef || !usingExports) {\n                    //Use the return value from the function.\n                    defined[name] = ret;\n                }\n            }\n        } else if (name) {\n            //May just be an object definition for the module. Only\n            //worry about defining if have a module name.\n            defined[name] = callback;\n        }\n    };\n\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\n        if (typeof deps === \"string\") {\n            if (handlers[deps]) {\n                //callback in this case is really relName\n                return handlers[deps](callback);\n            }\n            //Just return the module wanted. In this scenario, the\n            //deps arg is the module name, and second arg (if passed)\n            //is just the relName.\n            //Normalize module name, if it contains . or ..\n            return callDep(makeMap(deps, callback).f);\n        } else if (!deps.splice) {\n            //deps is a config object, not an array.\n            config = deps;\n            if (config.deps) {\n                req(config.deps, config.callback);\n            }\n            if (!callback) {\n                return;\n            }\n\n            if (callback.splice) {\n                //callback is an array, which means it is a dependency list.\n                //Adjust args if there are dependencies\n                deps = callback;\n                callback = relName;\n                relName = null;\n            } else {\n                deps = undef;\n            }\n        }\n\n        //Support require(['a'])\n        callback = callback || function () {};\n\n        //If relName is a function, it is an errback handler,\n        //so remove it.\n        if (typeof relName === 'function') {\n            relName = forceSync;\n            forceSync = alt;\n        }\n\n        //Simulate async callback;\n        if (forceSync) {\n            main(undef, deps, callback, relName);\n        } else {\n            //Using a non-zero value because of concern for what old browsers\n            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\n            //If want a value immediately, use require('id') instead -- something\n            //that works in almond on the global level, but not guaranteed and\n            //unlikely to work in other AMD implementations.\n            setTimeout(function () {\n                main(undef, deps, callback, relName);\n            }, 4);\n        }\n\n        return req;\n    };\n\n    /**\n     * Just drops the config on the floor, but returns req in case\n     * the config return value is used.\n     */\n    req.config = function (cfg) {\n        return req(cfg);\n    };\n\n    /**\n     * Expose module registry for debugging and tooling\n     */\n    requirejs._defined = defined;\n\n    define = function (name, deps, callback) {\n        if (typeof name !== 'string') {\n            throw new Error('See almond README: incorrect module build, no module name');\n        }\n\n        //This module may not have dependencies\n        if (!deps.splice) {\n            //deps is not an array, so probably means\n            //an object literal or factory function for\n            //the value. Adjust args.\n            callback = deps;\n            deps = [];\n        }\n\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\n            waiting[name] = [name, deps, callback];\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n}());\n\ndefine(\"../../bower_components/almond/almond\", function(){});\n\n","!function() {\n  var d3 = {\n    version: \"3.5.5\"\n  };\n  var d3_arraySlice = [].slice, d3_array = function(list) {\n    return d3_arraySlice.call(list);\n  };\n  var d3_document = this.document;\n  function d3_documentElement(node) {\n    return node && (node.ownerDocument || node.document || node).documentElement;\n  }\n  function d3_window(node) {\n    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);\n  }\n  if (d3_document) {\n    try {\n      d3_array(d3_document.documentElement.childNodes)[0].nodeType;\n    } catch (e) {\n      d3_array = function(list) {\n        var i = list.length, array = new Array(i);\n        while (i--) array[i] = list[i];\n        return array;\n      };\n    }\n  }\n  if (!Date.now) Date.now = function() {\n    return +new Date();\n  };\n  if (d3_document) {\n    try {\n      d3_document.createElement(\"DIV\").style.setProperty(\"opacity\", 0, \"\");\n    } catch (error) {\n      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;\n      d3_element_prototype.setAttribute = function(name, value) {\n        d3_element_setAttribute.call(this, name, value + \"\");\n      };\n      d3_element_prototype.setAttributeNS = function(space, local, value) {\n        d3_element_setAttributeNS.call(this, space, local, value + \"\");\n      };\n      d3_style_prototype.setProperty = function(name, value, priority) {\n        d3_style_setProperty.call(this, name, value + \"\", priority);\n      };\n    }\n  }\n  d3.ascending = d3_ascending;\n  function d3_ascending(a, b) {\n    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n  d3.descending = function(a, b) {\n    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n  };\n  d3.min = function(array, f) {\n    var i = -1, n = array.length, a, b;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null && a > b) a = b;\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;\n    }\n    return a;\n  };\n  d3.max = function(array, f) {\n    var i = -1, n = array.length, a, b;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null && b > a) a = b;\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;\n    }\n    return a;\n  };\n  d3.extent = function(array, f) {\n    var i = -1, n = array.length, a, b, c;\n    if (arguments.length === 1) {\n      while (++i < n) if ((b = array[i]) != null && b >= b) {\n        a = c = b;\n        break;\n      }\n      while (++i < n) if ((b = array[i]) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    } else {\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {\n        a = c = b;\n        break;\n      }\n      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {\n        if (a > b) a = b;\n        if (c < b) c = b;\n      }\n    }\n    return [ a, c ];\n  };\n  function d3_number(x) {\n    return x === null ? NaN : +x;\n  }\n  function d3_numeric(x) {\n    return !isNaN(x);\n  }\n  d3.sum = function(array, f) {\n    var s = 0, n = array.length, a, i = -1;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = +array[i])) s += a;\n    } else {\n      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;\n    }\n    return s;\n  };\n  d3.mean = function(array, f) {\n    var s = 0, n = array.length, a, i = -1, j = n;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;\n    } else {\n      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;\n    }\n    if (j) return s / j;\n  };\n  d3.quantile = function(values, p) {\n    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;\n    return e ? v + e * (values[h] - v) : v;\n  };\n  d3.median = function(array, f) {\n    var numbers = [], n = array.length, a, i = -1;\n    if (arguments.length === 1) {\n      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);\n    } else {\n      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);\n    }\n    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);\n  };\n  d3.variance = function(array, f) {\n    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;\n    if (arguments.length === 1) {\n      while (++i < n) {\n        if (d3_numeric(a = d3_number(array[i]))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    } else {\n      while (++i < n) {\n        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {\n          d = a - m;\n          m += d / ++j;\n          s += d * (a - m);\n        }\n      }\n    }\n    if (j > 1) return s / (j - 1);\n  };\n  d3.deviation = function() {\n    var v = d3.variance.apply(this, arguments);\n    return v ? Math.sqrt(v) : v;\n  };\n  function d3_bisector(compare) {\n    return {\n      left: function(a, x, lo, hi) {\n        if (arguments.length < 3) lo = 0;\n        if (arguments.length < 4) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;\n        }\n        return lo;\n      },\n      right: function(a, x, lo, hi) {\n        if (arguments.length < 3) lo = 0;\n        if (arguments.length < 4) hi = a.length;\n        while (lo < hi) {\n          var mid = lo + hi >>> 1;\n          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;\n        }\n        return lo;\n      }\n    };\n  }\n  var d3_bisect = d3_bisector(d3_ascending);\n  d3.bisectLeft = d3_bisect.left;\n  d3.bisect = d3.bisectRight = d3_bisect.right;\n  d3.bisector = function(f) {\n    return d3_bisector(f.length === 1 ? function(d, x) {\n      return d3_ascending(f(d), x);\n    } : f);\n  };\n  d3.shuffle = function(array, i0, i1) {\n    if ((m = arguments.length) < 3) {\n      i1 = array.length;\n      if (m < 2) i0 = 0;\n    }\n    var m = i1 - i0, t, i;\n    while (m) {\n      i = Math.random() * m-- | 0;\n      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;\n    }\n    return array;\n  };\n  d3.permute = function(array, indexes) {\n    var i = indexes.length, permutes = new Array(i);\n    while (i--) permutes[i] = array[indexes[i]];\n    return permutes;\n  };\n  d3.pairs = function(array) {\n    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);\n    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];\n    return pairs;\n  };\n  d3.zip = function() {\n    if (!(n = arguments.length)) return [];\n    for (var i = -1, m = d3.min(arguments, d3_zipLength), zips = new Array(m); ++i < m; ) {\n      for (var j = -1, n, zip = zips[i] = new Array(n); ++j < n; ) {\n        zip[j] = arguments[j][i];\n      }\n    }\n    return zips;\n  };\n  function d3_zipLength(d) {\n    return d.length;\n  }\n  d3.transpose = function(matrix) {\n    return d3.zip.apply(d3, matrix);\n  };\n  d3.keys = function(map) {\n    var keys = [];\n    for (var key in map) keys.push(key);\n    return keys;\n  };\n  d3.values = function(map) {\n    var values = [];\n    for (var key in map) values.push(map[key]);\n    return values;\n  };\n  d3.entries = function(map) {\n    var entries = [];\n    for (var key in map) entries.push({\n      key: key,\n      value: map[key]\n    });\n    return entries;\n  };\n  d3.merge = function(arrays) {\n    var n = arrays.length, m, i = -1, j = 0, merged, array;\n    while (++i < n) j += arrays[i].length;\n    merged = new Array(j);\n    while (--n >= 0) {\n      array = arrays[n];\n      m = array.length;\n      while (--m >= 0) {\n        merged[--j] = array[m];\n      }\n    }\n    return merged;\n  };\n  var abs = Math.abs;\n  d3.range = function(start, stop, step) {\n    if (arguments.length < 3) {\n      step = 1;\n      if (arguments.length < 2) {\n        stop = start;\n        start = 0;\n      }\n    }\n    if ((stop - start) / step === Infinity) throw new Error(\"infinite range\");\n    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;\n    start *= k, stop *= k, step *= k;\n    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);\n    return range;\n  };\n  function d3_range_integerScale(x) {\n    var k = 1;\n    while (x * k % 1) k *= 10;\n    return k;\n  }\n  function d3_class(ctor, properties) {\n    for (var key in properties) {\n      Object.defineProperty(ctor.prototype, key, {\n        value: properties[key],\n        enumerable: false\n      });\n    }\n  }\n  d3.map = function(object, f) {\n    var map = new d3_Map();\n    if (object instanceof d3_Map) {\n      object.forEach(function(key, value) {\n        map.set(key, value);\n      });\n    } else if (Array.isArray(object)) {\n      var i = -1, n = object.length, o;\n      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);\n    } else {\n      for (var key in object) map.set(key, object[key]);\n    }\n    return map;\n  };\n  function d3_Map() {\n    this._ = Object.create(null);\n  }\n  var d3_map_proto = \"__proto__\", d3_map_zero = \"\\x00\";\n  d3_class(d3_Map, {\n    has: d3_map_has,\n    get: function(key) {\n      return this._[d3_map_escape(key)];\n    },\n    set: function(key, value) {\n      return this._[d3_map_escape(key)] = value;\n    },\n    remove: d3_map_remove,\n    keys: d3_map_keys,\n    values: function() {\n      var values = [];\n      for (var key in this._) values.push(this._[key]);\n      return values;\n    },\n    entries: function() {\n      var entries = [];\n      for (var key in this._) entries.push({\n        key: d3_map_unescape(key),\n        value: this._[key]\n      });\n      return entries;\n    },\n    size: d3_map_size,\n    empty: d3_map_empty,\n    forEach: function(f) {\n      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);\n    }\n  });\n  function d3_map_escape(key) {\n    return (key += \"\") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;\n  }\n  function d3_map_unescape(key) {\n    return (key += \"\")[0] === d3_map_zero ? key.slice(1) : key;\n  }\n  function d3_map_has(key) {\n    return d3_map_escape(key) in this._;\n  }\n  function d3_map_remove(key) {\n    return (key = d3_map_escape(key)) in this._ && delete this._[key];\n  }\n  function d3_map_keys() {\n    var keys = [];\n    for (var key in this._) keys.push(d3_map_unescape(key));\n    return keys;\n  }\n  function d3_map_size() {\n    var size = 0;\n    for (var key in this._) ++size;\n    return size;\n  }\n  function d3_map_empty() {\n    for (var key in this._) return false;\n    return true;\n  }\n  d3.nest = function() {\n    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;\n    function map(mapType, array, depth) {\n      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;\n      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;\n      while (++i < n) {\n        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {\n          values.push(object);\n        } else {\n          valuesByKey.set(keyValue, [ object ]);\n        }\n      }\n      if (mapType) {\n        object = mapType();\n        setter = function(keyValue, values) {\n          object.set(keyValue, map(mapType, values, depth));\n        };\n      } else {\n        object = {};\n        setter = function(keyValue, values) {\n          object[keyValue] = map(mapType, values, depth);\n        };\n      }\n      valuesByKey.forEach(setter);\n      return object;\n    }\n    function entries(map, depth) {\n      if (depth >= keys.length) return map;\n      var array = [], sortKey = sortKeys[depth++];\n      map.forEach(function(key, keyMap) {\n        array.push({\n          key: key,\n          values: entries(keyMap, depth)\n        });\n      });\n      return sortKey ? array.sort(function(a, b) {\n        return sortKey(a.key, b.key);\n      }) : array;\n    }\n    nest.map = function(array, mapType) {\n      return map(mapType, array, 0);\n    };\n    nest.entries = function(array) {\n      return entries(map(d3.map, array, 0), 0);\n    };\n    nest.key = function(d) {\n      keys.push(d);\n      return nest;\n    };\n    nest.sortKeys = function(order) {\n      sortKeys[keys.length - 1] = order;\n      return nest;\n    };\n    nest.sortValues = function(order) {\n      sortValues = order;\n      return nest;\n    };\n    nest.rollup = function(f) {\n      rollup = f;\n      return nest;\n    };\n    return nest;\n  };\n  d3.set = function(array) {\n    var set = new d3_Set();\n    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);\n    return set;\n  };\n  function d3_Set() {\n    this._ = Object.create(null);\n  }\n  d3_class(d3_Set, {\n    has: d3_map_has,\n    add: function(key) {\n      this._[d3_map_escape(key += \"\")] = true;\n      return key;\n    },\n    remove: d3_map_remove,\n    values: d3_map_keys,\n    size: d3_map_size,\n    empty: d3_map_empty,\n    forEach: function(f) {\n      for (var key in this._) f.call(this, d3_map_unescape(key));\n    }\n  });\n  d3.behavior = {};\n  function d3_identity(d) {\n    return d;\n  }\n  d3.rebind = function(target, source) {\n    var i = 1, n = arguments.length, method;\n    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);\n    return target;\n  };\n  function d3_rebind(target, source, method) {\n    return function() {\n      var value = method.apply(source, arguments);\n      return value === source ? target : value;\n    };\n  }\n  function d3_vendorSymbol(object, name) {\n    if (name in object) return name;\n    name = name.charAt(0).toUpperCase() + name.slice(1);\n    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {\n      var prefixName = d3_vendorPrefixes[i] + name;\n      if (prefixName in object) return prefixName;\n    }\n  }\n  var d3_vendorPrefixes = [ \"webkit\", \"ms\", \"moz\", \"Moz\", \"o\", \"O\" ];\n  function d3_noop() {}\n  d3.dispatch = function() {\n    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;\n    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n    return dispatch;\n  };\n  function d3_dispatch() {}\n  d3_dispatch.prototype.on = function(type, listener) {\n    var i = type.indexOf(\".\"), name = \"\";\n    if (i >= 0) {\n      name = type.slice(i + 1);\n      type = type.slice(0, i);\n    }\n    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);\n    if (arguments.length === 2) {\n      if (listener == null) for (type in this) {\n        if (this.hasOwnProperty(type)) this[type].on(name, null);\n      }\n      return this;\n    }\n  };\n  function d3_dispatch_event(dispatch) {\n    var listeners = [], listenerByName = new d3_Map();\n    function event() {\n      var z = listeners, i = -1, n = z.length, l;\n      while (++i < n) if (l = z[i].on) l.apply(this, arguments);\n      return dispatch;\n    }\n    event.on = function(name, listener) {\n      var l = listenerByName.get(name), i;\n      if (arguments.length < 2) return l && l.on;\n      if (l) {\n        l.on = null;\n        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));\n        listenerByName.remove(name);\n      }\n      if (listener) listeners.push(listenerByName.set(name, {\n        on: listener\n      }));\n      return dispatch;\n    };\n    return event;\n  }\n  d3.event = null;\n  function d3_eventPreventDefault() {\n    d3.event.preventDefault();\n  }\n  function d3_eventSource() {\n    var e = d3.event, s;\n    while (s = e.sourceEvent) e = s;\n    return e;\n  }\n  function d3_eventDispatch(target) {\n    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;\n    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);\n    dispatch.of = function(thiz, argumentz) {\n      return function(e1) {\n        try {\n          var e0 = e1.sourceEvent = d3.event;\n          e1.target = target;\n          d3.event = e1;\n          dispatch[e1.type].apply(thiz, argumentz);\n        } finally {\n          d3.event = e0;\n        }\n      };\n    };\n    return dispatch;\n  }\n  d3.requote = function(s) {\n    return s.replace(d3_requote_re, \"\\\\$&\");\n  };\n  var d3_requote_re = /[\\\\\\^\\$\\*\\+\\?\\|\\[\\]\\(\\)\\.\\{\\}]/g;\n  var d3_subclass = {}.__proto__ ? function(object, prototype) {\n    object.__proto__ = prototype;\n  } : function(object, prototype) {\n    for (var property in prototype) object[property] = prototype[property];\n  };\n  function d3_selection(groups) {\n    d3_subclass(groups, d3_selectionPrototype);\n    return groups;\n  }\n  var d3_select = function(s, n) {\n    return n.querySelector(s);\n  }, d3_selectAll = function(s, n) {\n    return n.querySelectorAll(s);\n  }, d3_selectMatches = function(n, s) {\n    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, \"matchesSelector\")];\n    d3_selectMatches = function(n, s) {\n      return d3_selectMatcher.call(n, s);\n    };\n    return d3_selectMatches(n, s);\n  };\n  if (typeof Sizzle === \"function\") {\n    d3_select = function(s, n) {\n      return Sizzle(s, n)[0] || null;\n    };\n    d3_selectAll = Sizzle;\n    d3_selectMatches = Sizzle.matchesSelector;\n  }\n  d3.selection = function() {\n    return d3.select(d3_document.documentElement);\n  };\n  var d3_selectionPrototype = d3.selection.prototype = [];\n  d3_selectionPrototype.select = function(selector) {\n    var subgroups = [], subgroup, subnode, group, node;\n    selector = d3_selection_selector(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = (group = this[j]).parentNode;\n      for (var i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroup.push(subnode = selector.call(node, node.__data__, i, j));\n          if (subnode && \"__data__\" in node) subnode.__data__ = node.__data__;\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_selector(selector) {\n    return typeof selector === \"function\" ? selector : function() {\n      return d3_select(selector, this);\n    };\n  }\n  d3_selectionPrototype.selectAll = function(selector) {\n    var subgroups = [], subgroup, node;\n    selector = d3_selection_selectorAll(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));\n          subgroup.parentNode = node;\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_selectorAll(selector) {\n    return typeof selector === \"function\" ? selector : function() {\n      return d3_selectAll(selector, this);\n    };\n  }\n  var d3_nsPrefix = {\n    svg: \"http://www.w3.org/2000/svg\",\n    xhtml: \"http://www.w3.org/1999/xhtml\",\n    xlink: \"http://www.w3.org/1999/xlink\",\n    xml: \"http://www.w3.org/XML/1998/namespace\",\n    xmlns: \"http://www.w3.org/2000/xmlns/\"\n  };\n  d3.ns = {\n    prefix: d3_nsPrefix,\n    qualify: function(name) {\n      var i = name.indexOf(\":\"), prefix = name;\n      if (i >= 0) {\n        prefix = name.slice(0, i);\n        name = name.slice(i + 1);\n      }\n      return d3_nsPrefix.hasOwnProperty(prefix) ? {\n        space: d3_nsPrefix[prefix],\n        local: name\n      } : name;\n    }\n  };\n  d3_selectionPrototype.attr = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") {\n        var node = this.node();\n        name = d3.ns.qualify(name);\n        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);\n      }\n      for (value in name) this.each(d3_selection_attr(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_attr(name, value));\n  };\n  function d3_selection_attr(name, value) {\n    name = d3.ns.qualify(name);\n    function attrNull() {\n      this.removeAttribute(name);\n    }\n    function attrNullNS() {\n      this.removeAttributeNS(name.space, name.local);\n    }\n    function attrConstant() {\n      this.setAttribute(name, value);\n    }\n    function attrConstantNS() {\n      this.setAttributeNS(name.space, name.local, value);\n    }\n    function attrFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);\n    }\n    function attrFunctionNS() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);\n    }\n    return value == null ? name.local ? attrNullNS : attrNull : typeof value === \"function\" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;\n  }\n  function d3_collapse(s) {\n    return s.trim().replace(/\\s+/g, \" \");\n  }\n  d3_selectionPrototype.classed = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") {\n        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;\n        if (value = node.classList) {\n          while (++i < n) if (!value.contains(name[i])) return false;\n        } else {\n          value = node.getAttribute(\"class\");\n          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;\n        }\n        return true;\n      }\n      for (value in name) this.each(d3_selection_classed(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_classed(name, value));\n  };\n  function d3_selection_classedRe(name) {\n    return new RegExp(\"(?:^|\\\\s+)\" + d3.requote(name) + \"(?:\\\\s+|$)\", \"g\");\n  }\n  function d3_selection_classes(name) {\n    return (name + \"\").trim().split(/^|\\s+/);\n  }\n  function d3_selection_classed(name, value) {\n    name = d3_selection_classes(name).map(d3_selection_classedName);\n    var n = name.length;\n    function classedConstant() {\n      var i = -1;\n      while (++i < n) name[i](this, value);\n    }\n    function classedFunction() {\n      var i = -1, x = value.apply(this, arguments);\n      while (++i < n) name[i](this, x);\n    }\n    return typeof value === \"function\" ? classedFunction : classedConstant;\n  }\n  function d3_selection_classedName(name) {\n    var re = d3_selection_classedRe(name);\n    return function(node, value) {\n      if (c = node.classList) return value ? c.add(name) : c.remove(name);\n      var c = node.getAttribute(\"class\") || \"\";\n      if (value) {\n        re.lastIndex = 0;\n        if (!re.test(c)) node.setAttribute(\"class\", d3_collapse(c + \" \" + name));\n      } else {\n        node.setAttribute(\"class\", d3_collapse(c.replace(re, \" \")));\n      }\n    };\n  }\n  d3_selectionPrototype.style = function(name, value, priority) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof name !== \"string\") {\n        if (n < 2) value = \"\";\n        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));\n        return this;\n      }\n      if (n < 2) {\n        var node = this.node();\n        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);\n      }\n      priority = \"\";\n    }\n    return this.each(d3_selection_style(name, value, priority));\n  };\n  function d3_selection_style(name, value, priority) {\n    function styleNull() {\n      this.style.removeProperty(name);\n    }\n    function styleConstant() {\n      this.style.setProperty(name, value, priority);\n    }\n    function styleFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);\n    }\n    return value == null ? styleNull : typeof value === \"function\" ? styleFunction : styleConstant;\n  }\n  d3_selectionPrototype.property = function(name, value) {\n    if (arguments.length < 2) {\n      if (typeof name === \"string\") return this.node()[name];\n      for (value in name) this.each(d3_selection_property(value, name[value]));\n      return this;\n    }\n    return this.each(d3_selection_property(name, value));\n  };\n  function d3_selection_property(name, value) {\n    function propertyNull() {\n      delete this[name];\n    }\n    function propertyConstant() {\n      this[name] = value;\n    }\n    function propertyFunction() {\n      var x = value.apply(this, arguments);\n      if (x == null) delete this[name]; else this[name] = x;\n    }\n    return value == null ? propertyNull : typeof value === \"function\" ? propertyFunction : propertyConstant;\n  }\n  d3_selectionPrototype.text = function(value) {\n    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n      var v = value.apply(this, arguments);\n      this.textContent = v == null ? \"\" : v;\n    } : value == null ? function() {\n      this.textContent = \"\";\n    } : function() {\n      this.textContent = value;\n    }) : this.node().textContent;\n  };\n  d3_selectionPrototype.html = function(value) {\n    return arguments.length ? this.each(typeof value === \"function\" ? function() {\n      var v = value.apply(this, arguments);\n      this.innerHTML = v == null ? \"\" : v;\n    } : value == null ? function() {\n      this.innerHTML = \"\";\n    } : function() {\n      this.innerHTML = value;\n    }) : this.node().innerHTML;\n  };\n  d3_selectionPrototype.append = function(name) {\n    name = d3_selection_creator(name);\n    return this.select(function() {\n      return this.appendChild(name.apply(this, arguments));\n    });\n  };\n  function d3_selection_creator(name) {\n    function create() {\n      var document = this.ownerDocument, namespace = this.namespaceURI;\n      return namespace ? document.createElementNS(namespace, name) : document.createElement(name);\n    }\n    function createNS() {\n      return this.ownerDocument.createElementNS(name.space, name.local);\n    }\n    return typeof name === \"function\" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;\n  }\n  d3_selectionPrototype.insert = function(name, before) {\n    name = d3_selection_creator(name);\n    before = d3_selection_selector(before);\n    return this.select(function() {\n      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);\n    });\n  };\n  d3_selectionPrototype.remove = function() {\n    return this.each(d3_selectionRemove);\n  };\n  function d3_selectionRemove() {\n    var parent = this.parentNode;\n    if (parent) parent.removeChild(this);\n  }\n  d3_selectionPrototype.data = function(value, key) {\n    var i = -1, n = this.length, group, node;\n    if (!arguments.length) {\n      value = new Array(n = (group = this[0]).length);\n      while (++i < n) {\n        if (node = group[i]) {\n          value[i] = node.__data__;\n        }\n      }\n      return value;\n    }\n    function bind(group, groupData) {\n      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;\n      if (key) {\n        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;\n        for (i = -1; ++i < n; ) {\n          if (nodeByKeyValue.has(keyValue = key.call(node = group[i], node.__data__, i))) {\n            exitNodes[i] = node;\n          } else {\n            nodeByKeyValue.set(keyValue, node);\n          }\n          keyValues[i] = keyValue;\n        }\n        for (i = -1; ++i < m; ) {\n          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {\n            enterNodes[i] = d3_selection_dataNode(nodeData);\n          } else if (node !== true) {\n            updateNodes[i] = node;\n            node.__data__ = nodeData;\n          }\n          nodeByKeyValue.set(keyValue, true);\n        }\n        for (i = -1; ++i < n; ) {\n          if (nodeByKeyValue.get(keyValues[i]) !== true) {\n            exitNodes[i] = group[i];\n          }\n        }\n      } else {\n        for (i = -1; ++i < n0; ) {\n          node = group[i];\n          nodeData = groupData[i];\n          if (node) {\n            node.__data__ = nodeData;\n            updateNodes[i] = node;\n          } else {\n            enterNodes[i] = d3_selection_dataNode(nodeData);\n          }\n        }\n        for (;i < m; ++i) {\n          enterNodes[i] = d3_selection_dataNode(groupData[i]);\n        }\n        for (;i < n; ++i) {\n          exitNodes[i] = group[i];\n        }\n      }\n      enterNodes.update = updateNodes;\n      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;\n      enter.push(enterNodes);\n      update.push(updateNodes);\n      exit.push(exitNodes);\n    }\n    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);\n    if (typeof value === \"function\") {\n      while (++i < n) {\n        bind(group = this[i], value.call(group, group.parentNode.__data__, i));\n      }\n    } else {\n      while (++i < n) {\n        bind(group = this[i], value);\n      }\n    }\n    update.enter = function() {\n      return enter;\n    };\n    update.exit = function() {\n      return exit;\n    };\n    return update;\n  };\n  function d3_selection_dataNode(data) {\n    return {\n      __data__: data\n    };\n  }\n  d3_selectionPrototype.datum = function(value) {\n    return arguments.length ? this.property(\"__data__\", value) : this.property(\"__data__\");\n  };\n  d3_selectionPrototype.filter = function(filter) {\n    var subgroups = [], subgroup, group, node;\n    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = (group = this[j]).parentNode;\n      for (var i = 0, n = group.length; i < n; i++) {\n        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n          subgroup.push(node);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  function d3_selection_filter(selector) {\n    return function() {\n      return d3_selectMatches(this, selector);\n    };\n  }\n  d3_selectionPrototype.order = function() {\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {\n        if (node = group[i]) {\n          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);\n          next = node;\n        }\n      }\n    }\n    return this;\n  };\n  d3_selectionPrototype.sort = function(comparator) {\n    comparator = d3_selection_sortComparator.apply(this, arguments);\n    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);\n    return this.order();\n  };\n  function d3_selection_sortComparator(comparator) {\n    if (!arguments.length) comparator = d3_ascending;\n    return function(a, b) {\n      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;\n    };\n  }\n  d3_selectionPrototype.each = function(callback) {\n    return d3_selection_each(this, function(node, i, j) {\n      callback.call(node, node.__data__, i, j);\n    });\n  };\n  function d3_selection_each(groups, callback) {\n    for (var j = 0, m = groups.length; j < m; j++) {\n      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {\n        if (node = group[i]) callback(node, i, j);\n      }\n    }\n    return groups;\n  }\n  d3_selectionPrototype.call = function(callback) {\n    var args = d3_array(arguments);\n    callback.apply(args[0] = this, args);\n    return this;\n  };\n  d3_selectionPrototype.empty = function() {\n    return !this.node();\n  };\n  d3_selectionPrototype.node = function() {\n    for (var j = 0, m = this.length; j < m; j++) {\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        var node = group[i];\n        if (node) return node;\n      }\n    }\n    return null;\n  };\n  d3_selectionPrototype.size = function() {\n    var n = 0;\n    d3_selection_each(this, function() {\n      ++n;\n    });\n    return n;\n  };\n  function d3_selection_enter(selection) {\n    d3_subclass(selection, d3_selection_enterPrototype);\n    return selection;\n  }\n  var d3_selection_enterPrototype = [];\n  d3.selection.enter = d3_selection_enter;\n  d3.selection.enter.prototype = d3_selection_enterPrototype;\n  d3_selection_enterPrototype.append = d3_selectionPrototype.append;\n  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;\n  d3_selection_enterPrototype.node = d3_selectionPrototype.node;\n  d3_selection_enterPrototype.call = d3_selectionPrototype.call;\n  d3_selection_enterPrototype.size = d3_selectionPrototype.size;\n  d3_selection_enterPrototype.select = function(selector) {\n    var subgroups = [], subgroup, subnode, upgroup, group, node;\n    for (var j = -1, m = this.length; ++j < m; ) {\n      upgroup = (group = this[j]).update;\n      subgroups.push(subgroup = []);\n      subgroup.parentNode = group.parentNode;\n      for (var i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));\n          subnode.__data__ = node.__data__;\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_selection(subgroups);\n  };\n  d3_selection_enterPrototype.insert = function(name, before) {\n    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);\n    return d3_selectionPrototype.insert.call(this, name, before);\n  };\n  function d3_selection_enterInsertBefore(enter) {\n    var i0, j0;\n    return function(d, i, j) {\n      var group = enter[j].update, n = group.length, node;\n      if (j != j0) j0 = j, i0 = 0;\n      if (i >= i0) i0 = i + 1;\n      while (!(node = group[i0]) && ++i0 < n) ;\n      return node;\n    };\n  }\n  d3.select = function(node) {\n    var group;\n    if (typeof node === \"string\") {\n      group = [ d3_select(node, d3_document) ];\n      group.parentNode = d3_document.documentElement;\n    } else {\n      group = [ node ];\n      group.parentNode = d3_documentElement(node);\n    }\n    return d3_selection([ group ]);\n  };\n  d3.selectAll = function(nodes) {\n    var group;\n    if (typeof nodes === \"string\") {\n      group = d3_array(d3_selectAll(nodes, d3_document));\n      group.parentNode = d3_document.documentElement;\n    } else {\n      group = nodes;\n      group.parentNode = null;\n    }\n    return d3_selection([ group ]);\n  };\n  d3_selectionPrototype.on = function(type, listener, capture) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof type !== \"string\") {\n        if (n < 2) listener = false;\n        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));\n        return this;\n      }\n      if (n < 2) return (n = this.node()[\"__on\" + type]) && n._;\n      capture = false;\n    }\n    return this.each(d3_selection_on(type, listener, capture));\n  };\n  function d3_selection_on(type, listener, capture) {\n    var name = \"__on\" + type, i = type.indexOf(\".\"), wrap = d3_selection_onListener;\n    if (i > 0) type = type.slice(0, i);\n    var filter = d3_selection_onFilters.get(type);\n    if (filter) type = filter, wrap = d3_selection_onFilter;\n    function onRemove() {\n      var l = this[name];\n      if (l) {\n        this.removeEventListener(type, l, l.$);\n        delete this[name];\n      }\n    }\n    function onAdd() {\n      var l = wrap(listener, d3_array(arguments));\n      onRemove.call(this);\n      this.addEventListener(type, this[name] = l, l.$ = capture);\n      l._ = listener;\n    }\n    function removeAll() {\n      var re = new RegExp(\"^__on([^.]+)\" + d3.requote(type) + \"$\"), match;\n      for (var name in this) {\n        if (match = name.match(re)) {\n          var l = this[name];\n          this.removeEventListener(match[1], l, l.$);\n          delete this[name];\n        }\n      }\n    }\n    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;\n  }\n  var d3_selection_onFilters = d3.map({\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\"\n  });\n  if (d3_document) {\n    d3_selection_onFilters.forEach(function(k) {\n      if (\"on\" + k in d3_document) d3_selection_onFilters.remove(k);\n    });\n  }\n  function d3_selection_onListener(listener, argumentz) {\n    return function(e) {\n      var o = d3.event;\n      d3.event = e;\n      argumentz[0] = this.__data__;\n      try {\n        listener.apply(this, argumentz);\n      } finally {\n        d3.event = o;\n      }\n    };\n  }\n  function d3_selection_onFilter(listener, argumentz) {\n    var l = d3_selection_onListener(listener, argumentz);\n    return function(e) {\n      var target = this, related = e.relatedTarget;\n      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {\n        l.call(target, e);\n      }\n    };\n  }\n  var d3_event_dragSelect, d3_event_dragId = 0;\n  function d3_event_dragSuppress(node) {\n    var name = \".dragsuppress-\" + ++d3_event_dragId, click = \"click\" + name, w = d3.select(d3_window(node)).on(\"touchmove\" + name, d3_eventPreventDefault).on(\"dragstart\" + name, d3_eventPreventDefault).on(\"selectstart\" + name, d3_eventPreventDefault);\n    if (d3_event_dragSelect == null) {\n      d3_event_dragSelect = \"onselectstart\" in node ? false : d3_vendorSymbol(node.style, \"userSelect\");\n    }\n    if (d3_event_dragSelect) {\n      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];\n      style[d3_event_dragSelect] = \"none\";\n    }\n    return function(suppressClick) {\n      w.on(name, null);\n      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;\n      if (suppressClick) {\n        var off = function() {\n          w.on(click, null);\n        };\n        w.on(click, function() {\n          d3_eventPreventDefault();\n          off();\n        }, true);\n        setTimeout(off, 0);\n      }\n    };\n  }\n  d3.mouse = function(container) {\n    return d3_mousePoint(container, d3_eventSource());\n  };\n  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;\n  function d3_mousePoint(container, e) {\n    if (e.changedTouches) e = e.changedTouches[0];\n    var svg = container.ownerSVGElement || container;\n    if (svg.createSVGPoint) {\n      var point = svg.createSVGPoint();\n      if (d3_mouse_bug44083 < 0) {\n        var window = d3_window(container);\n        if (window.scrollX || window.scrollY) {\n          svg = d3.select(\"body\").append(\"svg\").style({\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            margin: 0,\n            padding: 0,\n            border: \"none\"\n          }, \"important\");\n          var ctm = svg[0][0].getScreenCTM();\n          d3_mouse_bug44083 = !(ctm.f || ctm.e);\n          svg.remove();\n        }\n      }\n      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, \n      point.y = e.clientY;\n      point = point.matrixTransform(container.getScreenCTM().inverse());\n      return [ point.x, point.y ];\n    }\n    var rect = container.getBoundingClientRect();\n    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];\n  }\n  d3.touch = function(container, touches, identifier) {\n    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;\n    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {\n      if ((touch = touches[i]).identifier === identifier) {\n        return d3_mousePoint(container, touch);\n      }\n    }\n  };\n  d3.behavior.drag = function() {\n    var event = d3_eventDispatch(drag, \"drag\", \"dragstart\", \"dragend\"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, \"mousemove\", \"mouseup\"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, \"touchmove\", \"touchend\");\n    function drag() {\n      this.on(\"mousedown.drag\", mousedown).on(\"touchstart.drag\", touchstart);\n    }\n    function dragstart(id, position, subject, move, end) {\n      return function() {\n        var that = this, target = d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = \".drag\" + (dragId == null ? \"\" : \"-\" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);\n        if (origin) {\n          dragOffset = origin.apply(that, arguments);\n          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];\n        } else {\n          dragOffset = [ 0, 0 ];\n        }\n        dispatch({\n          type: \"dragstart\"\n        });\n        function moved() {\n          var position1 = position(parent, dragId), dx, dy;\n          if (!position1) return;\n          dx = position1[0] - position0[0];\n          dy = position1[1] - position0[1];\n          dragged |= dx | dy;\n          position0 = position1;\n          dispatch({\n            type: \"drag\",\n            x: position1[0] + dragOffset[0],\n            y: position1[1] + dragOffset[1],\n            dx: dx,\n            dy: dy\n          });\n        }\n        function ended() {\n          if (!position(parent, dragId)) return;\n          dragSubject.on(move + dragName, null).on(end + dragName, null);\n          dragRestore(dragged && d3.event.target === target);\n          dispatch({\n            type: \"dragend\"\n          });\n        }\n      };\n    }\n    drag.origin = function(x) {\n      if (!arguments.length) return origin;\n      origin = x;\n      return drag;\n    };\n    return d3.rebind(drag, event, \"on\");\n  };\n  function d3_behavior_dragTouchId() {\n    return d3.event.changedTouches[0].identifier;\n  }\n  d3.touches = function(container, touches) {\n    if (arguments.length < 2) touches = d3_eventSource().touches;\n    return touches ? d3_array(touches).map(function(touch) {\n      var point = d3_mousePoint(container, touch);\n      point.identifier = touch.identifier;\n      return point;\n    }) : [];\n  };\n  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;\n  function d3_sgn(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n  }\n  function d3_cross2d(a, b, c) {\n    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n  }\n  function d3_acos(x) {\n    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);\n  }\n  function d3_asin(x) {\n    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);\n  }\n  function d3_sinh(x) {\n    return ((x = Math.exp(x)) - 1 / x) / 2;\n  }\n  function d3_cosh(x) {\n    return ((x = Math.exp(x)) + 1 / x) / 2;\n  }\n  function d3_tanh(x) {\n    return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n  }\n  function d3_haversin(x) {\n    return (x = Math.sin(x / 2)) * x;\n  }\n  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;\n  d3.interpolateZoom = function(p0, p1) {\n    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2];\n    var dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1), dr = r1 - r0, S = (dr || Math.log(w1 / w0)) / ρ;\n    function interpolate(t) {\n      var s = t * S;\n      if (dr) {\n        var coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));\n        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];\n      }\n      return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * s) ];\n    }\n    interpolate.duration = S * 1e3;\n    return interpolate;\n  };\n  d3.behavior.zoom = function() {\n    var view = {\n      x: 0,\n      y: 0,\n      k: 1\n    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = \"mousedown.zoom\", mousemove = \"mousemove.zoom\", mouseup = \"mouseup.zoom\", mousewheelTimer, touchstart = \"touchstart.zoom\", touchtime, event = d3_eventDispatch(zoom, \"zoomstart\", \"zoom\", \"zoomend\"), x0, x1, y0, y1;\n    if (!d3_behavior_zoomWheel) {\n      d3_behavior_zoomWheel = \"onwheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);\n      }, \"wheel\") : \"onmousewheel\" in d3_document ? (d3_behavior_zoomDelta = function() {\n        return d3.event.wheelDelta;\n      }, \"mousewheel\") : (d3_behavior_zoomDelta = function() {\n        return -d3.event.detail;\n      }, \"MozMousePixelScroll\");\n    }\n    function zoom(g) {\n      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + \".zoom\", mousewheeled).on(\"dblclick.zoom\", dblclicked).on(touchstart, touchstarted);\n    }\n    zoom.event = function(g) {\n      g.each(function() {\n        var dispatch = event.of(this, arguments), view1 = view;\n        if (d3_transitionInheritId) {\n          d3.select(this).transition().each(\"start.zoom\", function() {\n            view = this.__chart__ || {\n              x: 0,\n              y: 0,\n              k: 1\n            };\n            zoomstarted(dispatch);\n          }).tween(\"zoom:zoom\", function() {\n            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);\n            return function(t) {\n              var l = i(t), k = dx / l[2];\n              this.__chart__ = view = {\n                x: cx - l[0] * k,\n                y: cy - l[1] * k,\n                k: k\n              };\n              zoomed(dispatch);\n            };\n          }).each(\"interrupt.zoom\", function() {\n            zoomended(dispatch);\n          }).each(\"end.zoom\", function() {\n            zoomended(dispatch);\n          });\n        } else {\n          this.__chart__ = view;\n          zoomstarted(dispatch);\n          zoomed(dispatch);\n          zoomended(dispatch);\n        }\n      });\n    };\n    zoom.translate = function(_) {\n      if (!arguments.length) return [ view.x, view.y ];\n      view = {\n        x: +_[0],\n        y: +_[1],\n        k: view.k\n      };\n      rescale();\n      return zoom;\n    };\n    zoom.scale = function(_) {\n      if (!arguments.length) return view.k;\n      view = {\n        x: view.x,\n        y: view.y,\n        k: +_\n      };\n      rescale();\n      return zoom;\n    };\n    zoom.scaleExtent = function(_) {\n      if (!arguments.length) return scaleExtent;\n      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.center = function(_) {\n      if (!arguments.length) return center;\n      center = _ && [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.size = function(_) {\n      if (!arguments.length) return size;\n      size = _ && [ +_[0], +_[1] ];\n      return zoom;\n    };\n    zoom.duration = function(_) {\n      if (!arguments.length) return duration;\n      duration = +_;\n      return zoom;\n    };\n    zoom.x = function(z) {\n      if (!arguments.length) return x1;\n      x1 = z;\n      x0 = z.copy();\n      view = {\n        x: 0,\n        y: 0,\n        k: 1\n      };\n      return zoom;\n    };\n    zoom.y = function(z) {\n      if (!arguments.length) return y1;\n      y1 = z;\n      y0 = z.copy();\n      view = {\n        x: 0,\n        y: 0,\n        k: 1\n      };\n      return zoom;\n    };\n    function location(p) {\n      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];\n    }\n    function point(l) {\n      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];\n    }\n    function scaleTo(s) {\n      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));\n    }\n    function translateTo(p, l) {\n      l = point(l);\n      view.x += p[0] - l[0];\n      view.y += p[1] - l[1];\n    }\n    function zoomTo(that, p, l, k) {\n      that.__chart__ = {\n        x: view.x,\n        y: view.y,\n        k: view.k\n      };\n      scaleTo(Math.pow(2, k));\n      translateTo(center0 = p, l);\n      that = d3.select(that);\n      if (duration > 0) that = that.transition().duration(duration);\n      that.call(zoom.event);\n    }\n    function rescale() {\n      if (x1) x1.domain(x0.range().map(function(x) {\n        return (x - view.x) / view.k;\n      }).map(x0.invert));\n      if (y1) y1.domain(y0.range().map(function(y) {\n        return (y - view.y) / view.k;\n      }).map(y0.invert));\n    }\n    function zoomstarted(dispatch) {\n      if (!zooming++) dispatch({\n        type: \"zoomstart\"\n      });\n    }\n    function zoomed(dispatch) {\n      rescale();\n      dispatch({\n        type: \"zoom\",\n        scale: view.k,\n        translate: [ view.x, view.y ]\n      });\n    }\n    function zoomended(dispatch) {\n      if (!--zooming) dispatch({\n        type: \"zoomend\"\n      });\n      center0 = null;\n    }\n    function mousedowned() {\n      var that = this, target = d3.event.target, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);\n      d3_selection_interrupt.call(that);\n      zoomstarted(dispatch);\n      function moved() {\n        dragged = 1;\n        translateTo(d3.mouse(that), location0);\n        zoomed(dispatch);\n      }\n      function ended() {\n        subject.on(mousemove, null).on(mouseup, null);\n        dragRestore(dragged && d3.event.target === target);\n        zoomended(dispatch);\n      }\n    }\n    function touchstarted() {\n      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = \".zoom-\" + d3.event.changedTouches[0].identifier, touchmove = \"touchmove\" + zoomName, touchend = \"touchend\" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);\n      started();\n      zoomstarted(dispatch);\n      subject.on(mousedown, null).on(touchstart, started);\n      function relocate() {\n        var touches = d3.touches(that);\n        scale0 = view.k;\n        touches.forEach(function(t) {\n          if (t.identifier in locations0) locations0[t.identifier] = location(t);\n        });\n        return touches;\n      }\n      function started() {\n        var target = d3.event.target;\n        d3.select(target).on(touchmove, moved).on(touchend, ended);\n        targets.push(target);\n        var changed = d3.event.changedTouches;\n        for (var i = 0, n = changed.length; i < n; ++i) {\n          locations0[changed[i].identifier] = null;\n        }\n        var touches = relocate(), now = Date.now();\n        if (touches.length === 1) {\n          if (now - touchtime < 500) {\n            var p = touches[0];\n            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);\n            d3_eventPreventDefault();\n          }\n          touchtime = now;\n        } else if (touches.length > 1) {\n          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];\n          distance0 = dx * dx + dy * dy;\n        }\n      }\n      function moved() {\n        var touches = d3.touches(that), p0, l0, p1, l1;\n        d3_selection_interrupt.call(that);\n        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {\n          p1 = touches[i];\n          if (l1 = locations0[p1.identifier]) {\n            if (l0) break;\n            p0 = p1, l0 = l1;\n          }\n        }\n        if (l1) {\n          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);\n          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];\n          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];\n          scaleTo(scale1 * scale0);\n        }\n        touchtime = null;\n        translateTo(p0, l0);\n        zoomed(dispatch);\n      }\n      function ended() {\n        if (d3.event.touches.length) {\n          var changed = d3.event.changedTouches;\n          for (var i = 0, n = changed.length; i < n; ++i) {\n            delete locations0[changed[i].identifier];\n          }\n          for (var identifier in locations0) {\n            return void relocate();\n          }\n        }\n        d3.selectAll(targets).on(zoomName, null);\n        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);\n        dragRestore();\n        zoomended(dispatch);\n      }\n    }\n    function mousewheeled() {\n      var dispatch = event.of(this, arguments);\n      if (mousewheelTimer) clearTimeout(mousewheelTimer); else translate0 = location(center0 = center || d3.mouse(this)), \n      d3_selection_interrupt.call(this), zoomstarted(dispatch);\n      mousewheelTimer = setTimeout(function() {\n        mousewheelTimer = null;\n        zoomended(dispatch);\n      }, 50);\n      d3_eventPreventDefault();\n      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);\n      translateTo(center0, translate0);\n      zoomed(dispatch);\n    }\n    function dblclicked() {\n      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;\n      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);\n    }\n    return d3.rebind(zoom, event, \"on\");\n  };\n  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;\n  d3.color = d3_color;\n  function d3_color() {}\n  d3_color.prototype.toString = function() {\n    return this.rgb() + \"\";\n  };\n  d3.hsl = d3_hsl;\n  function d3_hsl(h, s, l) {\n    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse(\"\" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);\n  }\n  var d3_hslPrototype = d3_hsl.prototype = new d3_color();\n  d3_hslPrototype.brighter = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_hsl(this.h, this.s, this.l / k);\n  };\n  d3_hslPrototype.darker = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_hsl(this.h, this.s, k * this.l);\n  };\n  d3_hslPrototype.rgb = function() {\n    return d3_hsl_rgb(this.h, this.s, this.l);\n  };\n  function d3_hsl_rgb(h, s, l) {\n    var m1, m2;\n    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;\n    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;\n    l = l < 0 ? 0 : l > 1 ? 1 : l;\n    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;\n    m1 = 2 * l - m2;\n    function v(h) {\n      if (h > 360) h -= 360; else if (h < 0) h += 360;\n      if (h < 60) return m1 + (m2 - m1) * h / 60;\n      if (h < 180) return m2;\n      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;\n      return m1;\n    }\n    function vv(h) {\n      return Math.round(v(h) * 255);\n    }\n    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));\n  }\n  d3.hcl = d3_hcl;\n  function d3_hcl(h, c, l) {\n    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);\n  }\n  var d3_hclPrototype = d3_hcl.prototype = new d3_color();\n  d3_hclPrototype.brighter = function(k) {\n    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));\n  };\n  d3_hclPrototype.darker = function(k) {\n    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));\n  };\n  d3_hclPrototype.rgb = function() {\n    return d3_hcl_lab(this.h, this.c, this.l).rgb();\n  };\n  function d3_hcl_lab(h, c, l) {\n    if (isNaN(h)) h = 0;\n    if (isNaN(c)) c = 0;\n    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);\n  }\n  d3.lab = d3_lab;\n  function d3_lab(l, a, b) {\n    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);\n  }\n  var d3_lab_K = 18;\n  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;\n  var d3_labPrototype = d3_lab.prototype = new d3_color();\n  d3_labPrototype.brighter = function(k) {\n    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n  };\n  d3_labPrototype.darker = function(k) {\n    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);\n  };\n  d3_labPrototype.rgb = function() {\n    return d3_lab_rgb(this.l, this.a, this.b);\n  };\n  function d3_lab_rgb(l, a, b) {\n    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;\n    x = d3_lab_xyz(x) * d3_lab_X;\n    y = d3_lab_xyz(y) * d3_lab_Y;\n    z = d3_lab_xyz(z) * d3_lab_Z;\n    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));\n  }\n  function d3_lab_hcl(l, a, b) {\n    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);\n  }\n  function d3_lab_xyz(x) {\n    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;\n  }\n  function d3_xyz_lab(x) {\n    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;\n  }\n  function d3_xyz_rgb(r) {\n    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));\n  }\n  d3.rgb = d3_rgb;\n  function d3_rgb(r, g, b) {\n    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse(\"\" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);\n  }\n  function d3_rgbNumber(value) {\n    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);\n  }\n  function d3_rgbString(value) {\n    return d3_rgbNumber(value) + \"\";\n  }\n  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();\n  d3_rgbPrototype.brighter = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    var r = this.r, g = this.g, b = this.b, i = 30;\n    if (!r && !g && !b) return new d3_rgb(i, i, i);\n    if (r && r < i) r = i;\n    if (g && g < i) g = i;\n    if (b && b < i) b = i;\n    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));\n  };\n  d3_rgbPrototype.darker = function(k) {\n    k = Math.pow(.7, arguments.length ? k : 1);\n    return new d3_rgb(k * this.r, k * this.g, k * this.b);\n  };\n  d3_rgbPrototype.hsl = function() {\n    return d3_rgb_hsl(this.r, this.g, this.b);\n  };\n  d3_rgbPrototype.toString = function() {\n    return \"#\" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);\n  };\n  function d3_rgb_hex(v) {\n    return v < 16 ? \"0\" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);\n  }\n  function d3_rgb_parse(format, rgb, hsl) {\n    var r = 0, g = 0, b = 0, m1, m2, color;\n    m1 = /([a-z]+)\\((.*)\\)/i.exec(format);\n    if (m1) {\n      m2 = m1[2].split(\",\");\n      switch (m1[1]) {\n       case \"hsl\":\n        {\n          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);\n        }\n\n       case \"rgb\":\n        {\n          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));\n        }\n      }\n    }\n    if (color = d3_rgb_names.get(format.toLowerCase())) {\n      return rgb(color.r, color.g, color.b);\n    }\n    if (format != null && format.charAt(0) === \"#\" && !isNaN(color = parseInt(format.slice(1), 16))) {\n      if (format.length === 4) {\n        r = (color & 3840) >> 4;\n        r = r >> 4 | r;\n        g = color & 240;\n        g = g >> 4 | g;\n        b = color & 15;\n        b = b << 4 | b;\n      } else if (format.length === 7) {\n        r = (color & 16711680) >> 16;\n        g = (color & 65280) >> 8;\n        b = color & 255;\n      }\n    }\n    return rgb(r, g, b);\n  }\n  function d3_rgb_hsl(r, g, b) {\n    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;\n    if (d) {\n      s = l < .5 ? d / (max + min) : d / (2 - max - min);\n      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;\n      h *= 60;\n    } else {\n      h = NaN;\n      s = l > 0 && l < 1 ? 0 : h;\n    }\n    return new d3_hsl(h, s, l);\n  }\n  function d3_rgb_lab(r, g, b) {\n    r = d3_rgb_xyz(r);\n    g = d3_rgb_xyz(g);\n    b = d3_rgb_xyz(b);\n    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);\n    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));\n  }\n  function d3_rgb_xyz(r) {\n    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);\n  }\n  function d3_rgb_parseNumber(c) {\n    var f = parseFloat(c);\n    return c.charAt(c.length - 1) === \"%\" ? Math.round(f * 2.55) : f;\n  }\n  var d3_rgb_names = d3.map({\n    aliceblue: 15792383,\n    antiquewhite: 16444375,\n    aqua: 65535,\n    aquamarine: 8388564,\n    azure: 15794175,\n    beige: 16119260,\n    bisque: 16770244,\n    black: 0,\n    blanchedalmond: 16772045,\n    blue: 255,\n    blueviolet: 9055202,\n    brown: 10824234,\n    burlywood: 14596231,\n    cadetblue: 6266528,\n    chartreuse: 8388352,\n    chocolate: 13789470,\n    coral: 16744272,\n    cornflowerblue: 6591981,\n    cornsilk: 16775388,\n    crimson: 14423100,\n    cyan: 65535,\n    darkblue: 139,\n    darkcyan: 35723,\n    darkgoldenrod: 12092939,\n    darkgray: 11119017,\n    darkgreen: 25600,\n    darkgrey: 11119017,\n    darkkhaki: 12433259,\n    darkmagenta: 9109643,\n    darkolivegreen: 5597999,\n    darkorange: 16747520,\n    darkorchid: 10040012,\n    darkred: 9109504,\n    darksalmon: 15308410,\n    darkseagreen: 9419919,\n    darkslateblue: 4734347,\n    darkslategray: 3100495,\n    darkslategrey: 3100495,\n    darkturquoise: 52945,\n    darkviolet: 9699539,\n    deeppink: 16716947,\n    deepskyblue: 49151,\n    dimgray: 6908265,\n    dimgrey: 6908265,\n    dodgerblue: 2003199,\n    firebrick: 11674146,\n    floralwhite: 16775920,\n    forestgreen: 2263842,\n    fuchsia: 16711935,\n    gainsboro: 14474460,\n    ghostwhite: 16316671,\n    gold: 16766720,\n    goldenrod: 14329120,\n    gray: 8421504,\n    green: 32768,\n    greenyellow: 11403055,\n    grey: 8421504,\n    honeydew: 15794160,\n    hotpink: 16738740,\n    indianred: 13458524,\n    indigo: 4915330,\n    ivory: 16777200,\n    khaki: 15787660,\n    lavender: 15132410,\n    lavenderblush: 16773365,\n    lawngreen: 8190976,\n    lemonchiffon: 16775885,\n    lightblue: 11393254,\n    lightcoral: 15761536,\n    lightcyan: 14745599,\n    lightgoldenrodyellow: 16448210,\n    lightgray: 13882323,\n    lightgreen: 9498256,\n    lightgrey: 13882323,\n    lightpink: 16758465,\n    lightsalmon: 16752762,\n    lightseagreen: 2142890,\n    lightskyblue: 8900346,\n    lightslategray: 7833753,\n    lightslategrey: 7833753,\n    lightsteelblue: 11584734,\n    lightyellow: 16777184,\n    lime: 65280,\n    limegreen: 3329330,\n    linen: 16445670,\n    magenta: 16711935,\n    maroon: 8388608,\n    mediumaquamarine: 6737322,\n    mediumblue: 205,\n    mediumorchid: 12211667,\n    mediumpurple: 9662683,\n    mediumseagreen: 3978097,\n    mediumslateblue: 8087790,\n    mediumspringgreen: 64154,\n    mediumturquoise: 4772300,\n    mediumvioletred: 13047173,\n    midnightblue: 1644912,\n    mintcream: 16121850,\n    mistyrose: 16770273,\n    moccasin: 16770229,\n    navajowhite: 16768685,\n    navy: 128,\n    oldlace: 16643558,\n    olive: 8421376,\n    olivedrab: 7048739,\n    orange: 16753920,\n    orangered: 16729344,\n    orchid: 14315734,\n    palegoldenrod: 15657130,\n    palegreen: 10025880,\n    paleturquoise: 11529966,\n    palevioletred: 14381203,\n    papayawhip: 16773077,\n    peachpuff: 16767673,\n    peru: 13468991,\n    pink: 16761035,\n    plum: 14524637,\n    powderblue: 11591910,\n    purple: 8388736,\n    rebeccapurple: 6697881,\n    red: 16711680,\n    rosybrown: 12357519,\n    royalblue: 4286945,\n    saddlebrown: 9127187,\n    salmon: 16416882,\n    sandybrown: 16032864,\n    seagreen: 3050327,\n    seashell: 16774638,\n    sienna: 10506797,\n    silver: 12632256,\n    skyblue: 8900331,\n    slateblue: 6970061,\n    slategray: 7372944,\n    slategrey: 7372944,\n    snow: 16775930,\n    springgreen: 65407,\n    steelblue: 4620980,\n    tan: 13808780,\n    teal: 32896,\n    thistle: 14204888,\n    tomato: 16737095,\n    turquoise: 4251856,\n    violet: 15631086,\n    wheat: 16113331,\n    white: 16777215,\n    whitesmoke: 16119285,\n    yellow: 16776960,\n    yellowgreen: 10145074\n  });\n  d3_rgb_names.forEach(function(key, value) {\n    d3_rgb_names.set(key, d3_rgbNumber(value));\n  });\n  function d3_functor(v) {\n    return typeof v === \"function\" ? v : function() {\n      return v;\n    };\n  }\n  d3.functor = d3_functor;\n  d3.xhr = d3_xhrType(d3_identity);\n  function d3_xhrType(response) {\n    return function(url, mimeType, callback) {\n      if (arguments.length === 2 && typeof mimeType === \"function\") callback = mimeType, \n      mimeType = null;\n      return d3_xhr(url, mimeType, response, callback);\n    };\n  }\n  function d3_xhr(url, mimeType, response, callback) {\n    var xhr = {}, dispatch = d3.dispatch(\"beforesend\", \"progress\", \"load\", \"error\"), headers = {}, request = new XMLHttpRequest(), responseType = null;\n    if (this.XDomainRequest && !(\"withCredentials\" in request) && /^(http(s)?:)?\\/\\//.test(url)) request = new XDomainRequest();\n    \"onload\" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {\n      request.readyState > 3 && respond();\n    };\n    function respond() {\n      var status = request.status, result;\n      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {\n        try {\n          result = response.call(xhr, request);\n        } catch (e) {\n          dispatch.error.call(xhr, e);\n          return;\n        }\n        dispatch.load.call(xhr, result);\n      } else {\n        dispatch.error.call(xhr, request);\n      }\n    }\n    request.onprogress = function(event) {\n      var o = d3.event;\n      d3.event = event;\n      try {\n        dispatch.progress.call(xhr, request);\n      } finally {\n        d3.event = o;\n      }\n    };\n    xhr.header = function(name, value) {\n      name = (name + \"\").toLowerCase();\n      if (arguments.length < 2) return headers[name];\n      if (value == null) delete headers[name]; else headers[name] = value + \"\";\n      return xhr;\n    };\n    xhr.mimeType = function(value) {\n      if (!arguments.length) return mimeType;\n      mimeType = value == null ? null : value + \"\";\n      return xhr;\n    };\n    xhr.responseType = function(value) {\n      if (!arguments.length) return responseType;\n      responseType = value;\n      return xhr;\n    };\n    xhr.response = function(value) {\n      response = value;\n      return xhr;\n    };\n    [ \"get\", \"post\" ].forEach(function(method) {\n      xhr[method] = function() {\n        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));\n      };\n    });\n    xhr.send = function(method, data, callback) {\n      if (arguments.length === 2 && typeof data === \"function\") callback = data, data = null;\n      request.open(method, url, true);\n      if (mimeType != null && !(\"accept\" in headers)) headers[\"accept\"] = mimeType + \",*/*\";\n      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);\n      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);\n      if (responseType != null) request.responseType = responseType;\n      if (callback != null) xhr.on(\"error\", callback).on(\"load\", function(request) {\n        callback(null, request);\n      });\n      dispatch.beforesend.call(xhr, request);\n      request.send(data == null ? null : data);\n      return xhr;\n    };\n    xhr.abort = function() {\n      request.abort();\n      return xhr;\n    };\n    d3.rebind(xhr, dispatch, \"on\");\n    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));\n  }\n  function d3_xhr_fixCallback(callback) {\n    return callback.length === 1 ? function(error, request) {\n      callback(error == null ? request : null);\n    } : callback;\n  }\n  function d3_xhrHasResponse(request) {\n    var type = request.responseType;\n    return type && type !== \"text\" ? request.response : request.responseText;\n  }\n  d3.dsv = function(delimiter, mimeType) {\n    var reFormat = new RegExp('[\"' + delimiter + \"\\n]\"), delimiterCode = delimiter.charCodeAt(0);\n    function dsv(url, row, callback) {\n      if (arguments.length < 3) callback = row, row = null;\n      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);\n      xhr.row = function(_) {\n        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;\n      };\n      return xhr;\n    }\n    function response(request) {\n      return dsv.parse(request.responseText);\n    }\n    function typedResponse(f) {\n      return function(request) {\n        return dsv.parse(request.responseText, f);\n      };\n    }\n    dsv.parse = function(text, f) {\n      var o;\n      return dsv.parseRows(text, function(row, i) {\n        if (o) return o(row, i - 1);\n        var a = new Function(\"d\", \"return {\" + row.map(function(name, i) {\n          return JSON.stringify(name) + \": d[\" + i + \"]\";\n        }).join(\",\") + \"}\");\n        o = f ? function(row, i) {\n          return f(a(row), i);\n        } : a;\n      });\n    };\n    dsv.parseRows = function(text, f) {\n      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;\n      function token() {\n        if (I >= N) return EOF;\n        if (eol) return eol = false, EOL;\n        var j = I;\n        if (text.charCodeAt(j) === 34) {\n          var i = j;\n          while (i++ < N) {\n            if (text.charCodeAt(i) === 34) {\n              if (text.charCodeAt(i + 1) !== 34) break;\n              ++i;\n            }\n          }\n          I = i + 2;\n          var c = text.charCodeAt(i + 1);\n          if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(i + 2) === 10) ++I;\n          } else if (c === 10) {\n            eol = true;\n          }\n          return text.slice(j + 1, i).replace(/\"\"/g, '\"');\n        }\n        while (I < N) {\n          var c = text.charCodeAt(I++), k = 1;\n          if (c === 10) eol = true; else if (c === 13) {\n            eol = true;\n            if (text.charCodeAt(I) === 10) ++I, ++k;\n          } else if (c !== delimiterCode) continue;\n          return text.slice(j, I - k);\n        }\n        return text.slice(j);\n      }\n      while ((t = token()) !== EOF) {\n        var a = [];\n        while (t !== EOL && t !== EOF) {\n          a.push(t);\n          t = token();\n        }\n        if (f && (a = f(a, n++)) == null) continue;\n        rows.push(a);\n      }\n      return rows;\n    };\n    dsv.format = function(rows) {\n      if (Array.isArray(rows[0])) return dsv.formatRows(rows);\n      var fieldSet = new d3_Set(), fields = [];\n      rows.forEach(function(row) {\n        for (var field in row) {\n          if (!fieldSet.has(field)) {\n            fields.push(fieldSet.add(field));\n          }\n        }\n      });\n      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {\n        return fields.map(function(field) {\n          return formatValue(row[field]);\n        }).join(delimiter);\n      })).join(\"\\n\");\n    };\n    dsv.formatRows = function(rows) {\n      return rows.map(formatRow).join(\"\\n\");\n    };\n    function formatRow(row) {\n      return row.map(formatValue).join(delimiter);\n    }\n    function formatValue(text) {\n      return reFormat.test(text) ? '\"' + text.replace(/\\\"/g, '\"\"') + '\"' : text;\n    }\n    return dsv;\n  };\n  d3.csv = d3.dsv(\",\", \"text/csv\");\n  d3.tsv = d3.dsv(\"\t\", \"text/tab-separated-values\");\n  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_active, d3_timer_frame = this[d3_vendorSymbol(this, \"requestAnimationFrame\")] || function(callback) {\n    setTimeout(callback, 17);\n  };\n  d3.timer = function(callback, delay, then) {\n    var n = arguments.length;\n    if (n < 2) delay = 0;\n    if (n < 3) then = Date.now();\n    var time = then + delay, timer = {\n      c: callback,\n      t: time,\n      f: false,\n      n: null\n    };\n    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;\n    d3_timer_queueTail = timer;\n    if (!d3_timer_interval) {\n      d3_timer_timeout = clearTimeout(d3_timer_timeout);\n      d3_timer_interval = 1;\n      d3_timer_frame(d3_timer_step);\n    }\n  };\n  function d3_timer_step() {\n    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;\n    if (delay > 24) {\n      if (isFinite(delay)) {\n        clearTimeout(d3_timer_timeout);\n        d3_timer_timeout = setTimeout(d3_timer_step, delay);\n      }\n      d3_timer_interval = 0;\n    } else {\n      d3_timer_interval = 1;\n      d3_timer_frame(d3_timer_step);\n    }\n  }\n  d3.timer.flush = function() {\n    d3_timer_mark();\n    d3_timer_sweep();\n  };\n  function d3_timer_mark() {\n    var now = Date.now();\n    d3_timer_active = d3_timer_queueHead;\n    while (d3_timer_active) {\n      if (now >= d3_timer_active.t) d3_timer_active.f = d3_timer_active.c(now - d3_timer_active.t);\n      d3_timer_active = d3_timer_active.n;\n    }\n    return now;\n  }\n  function d3_timer_sweep() {\n    var t0, t1 = d3_timer_queueHead, time = Infinity;\n    while (t1) {\n      if (t1.f) {\n        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;\n      } else {\n        if (t1.t < time) time = t1.t;\n        t1 = (t0 = t1).n;\n      }\n    }\n    d3_timer_queueTail = t0;\n    return time;\n  }\n  function d3_format_precision(x, p) {\n    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);\n  }\n  d3.round = function(x, n) {\n    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);\n  };\n  var d3_formatPrefixes = [ \"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"µ\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\" ].map(d3_formatPrefix);\n  d3.formatPrefix = function(value, precision) {\n    var i = 0;\n    if (value) {\n      if (value < 0) value *= -1;\n      if (precision) value = d3.round(value, d3_format_precision(value, precision));\n      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);\n      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));\n    }\n    return d3_formatPrefixes[8 + i / 3];\n  };\n  function d3_formatPrefix(d, i) {\n    var k = Math.pow(10, abs(8 - i) * 3);\n    return {\n      scale: i > 8 ? function(d) {\n        return d / k;\n      } : function(d) {\n        return d * k;\n      },\n      symbol: d\n    };\n  }\n  function d3_locale_numberFormat(locale) {\n    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {\n      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;\n      while (i > 0 && g > 0) {\n        if (length + g + 1 > width) g = Math.max(1, width - length);\n        t.push(value.substring(i -= g, i + g));\n        if ((length += g + 1) > width) break;\n        g = locale_grouping[j = (j + 1) % locale_grouping.length];\n      }\n      return t.reverse().join(locale_thousands);\n    } : d3_identity;\n    return function(specifier) {\n      var match = d3_format_re.exec(specifier), fill = match[1] || \" \", align = match[2] || \">\", sign = match[3] || \"-\", symbol = match[4] || \"\", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = \"\", suffix = \"\", integer = false, exponent = true;\n      if (precision) precision = +precision.substring(1);\n      if (zfill || fill === \"0\" && align === \"=\") {\n        zfill = fill = \"0\";\n        align = \"=\";\n      }\n      switch (type) {\n       case \"n\":\n        comma = true;\n        type = \"g\";\n        break;\n\n       case \"%\":\n        scale = 100;\n        suffix = \"%\";\n        type = \"f\";\n        break;\n\n       case \"p\":\n        scale = 100;\n        suffix = \"%\";\n        type = \"r\";\n        break;\n\n       case \"b\":\n       case \"o\":\n       case \"x\":\n       case \"X\":\n        if (symbol === \"#\") prefix = \"0\" + type.toLowerCase();\n\n       case \"c\":\n        exponent = false;\n\n       case \"d\":\n        integer = true;\n        precision = 0;\n        break;\n\n       case \"s\":\n        scale = -1;\n        type = \"r\";\n        break;\n      }\n      if (symbol === \"$\") prefix = locale_currency[0], suffix = locale_currency[1];\n      if (type == \"r\" && !precision) type = \"g\";\n      if (precision != null) {\n        if (type == \"g\") precision = Math.max(1, Math.min(21, precision)); else if (type == \"e\" || type == \"f\") precision = Math.max(0, Math.min(20, precision));\n      }\n      type = d3_format_types.get(type) || d3_format_typeDefault;\n      var zcomma = zfill && comma;\n      return function(value) {\n        var fullSuffix = suffix;\n        if (integer && value % 1) return \"\";\n        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, \"-\") : sign === \"-\" ? \"\" : sign;\n        if (scale < 0) {\n          var unit = d3.formatPrefix(value, precision);\n          value = unit.scale(value);\n          fullSuffix = unit.symbol + suffix;\n        } else {\n          value *= scale;\n        }\n        value = type(value, precision);\n        var i = value.lastIndexOf(\".\"), before, after;\n        if (i < 0) {\n          var j = exponent ? value.lastIndexOf(\"e\") : -1;\n          if (j < 0) before = value, after = \"\"; else before = value.substring(0, j), after = value.substring(j);\n        } else {\n          before = value.substring(0, i);\n          after = locale_decimal + value.substring(i + 1);\n        }\n        if (!zfill && comma) before = formatGroup(before, Infinity);\n        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : \"\";\n        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);\n        negative += prefix;\n        value = before + after;\n        return (align === \"<\" ? negative + value + padding : align === \">\" ? padding + negative + value : align === \"^\" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;\n      };\n    };\n  }\n  var d3_format_re = /(?:([^{])?([<>=^]))?([+\\- ])?([$#])?(0)?(\\d+)?(,)?(\\.-?\\d+)?([a-z%])?/i;\n  var d3_format_types = d3.map({\n    b: function(x) {\n      return x.toString(2);\n    },\n    c: function(x) {\n      return String.fromCharCode(x);\n    },\n    o: function(x) {\n      return x.toString(8);\n    },\n    x: function(x) {\n      return x.toString(16);\n    },\n    X: function(x) {\n      return x.toString(16).toUpperCase();\n    },\n    g: function(x, p) {\n      return x.toPrecision(p);\n    },\n    e: function(x, p) {\n      return x.toExponential(p);\n    },\n    f: function(x, p) {\n      return x.toFixed(p);\n    },\n    r: function(x, p) {\n      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));\n    }\n  });\n  function d3_format_typeDefault(x) {\n    return x + \"\";\n  }\n  var d3_time = d3.time = {}, d3_date = Date;\n  function d3_date_utc() {\n    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);\n  }\n  d3_date_utc.prototype = {\n    getDate: function() {\n      return this._.getUTCDate();\n    },\n    getDay: function() {\n      return this._.getUTCDay();\n    },\n    getFullYear: function() {\n      return this._.getUTCFullYear();\n    },\n    getHours: function() {\n      return this._.getUTCHours();\n    },\n    getMilliseconds: function() {\n      return this._.getUTCMilliseconds();\n    },\n    getMinutes: function() {\n      return this._.getUTCMinutes();\n    },\n    getMonth: function() {\n      return this._.getUTCMonth();\n    },\n    getSeconds: function() {\n      return this._.getUTCSeconds();\n    },\n    getTime: function() {\n      return this._.getTime();\n    },\n    getTimezoneOffset: function() {\n      return 0;\n    },\n    valueOf: function() {\n      return this._.valueOf();\n    },\n    setDate: function() {\n      d3_time_prototype.setUTCDate.apply(this._, arguments);\n    },\n    setDay: function() {\n      d3_time_prototype.setUTCDay.apply(this._, arguments);\n    },\n    setFullYear: function() {\n      d3_time_prototype.setUTCFullYear.apply(this._, arguments);\n    },\n    setHours: function() {\n      d3_time_prototype.setUTCHours.apply(this._, arguments);\n    },\n    setMilliseconds: function() {\n      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);\n    },\n    setMinutes: function() {\n      d3_time_prototype.setUTCMinutes.apply(this._, arguments);\n    },\n    setMonth: function() {\n      d3_time_prototype.setUTCMonth.apply(this._, arguments);\n    },\n    setSeconds: function() {\n      d3_time_prototype.setUTCSeconds.apply(this._, arguments);\n    },\n    setTime: function() {\n      d3_time_prototype.setTime.apply(this._, arguments);\n    }\n  };\n  var d3_time_prototype = Date.prototype;\n  function d3_time_interval(local, step, number) {\n    function round(date) {\n      var d0 = local(date), d1 = offset(d0, 1);\n      return date - d0 < d1 - date ? d0 : d1;\n    }\n    function ceil(date) {\n      step(date = local(new d3_date(date - 1)), 1);\n      return date;\n    }\n    function offset(date, k) {\n      step(date = new d3_date(+date), k);\n      return date;\n    }\n    function range(t0, t1, dt) {\n      var time = ceil(t0), times = [];\n      if (dt > 1) {\n        while (time < t1) {\n          if (!(number(time) % dt)) times.push(new Date(+time));\n          step(time, 1);\n        }\n      } else {\n        while (time < t1) times.push(new Date(+time)), step(time, 1);\n      }\n      return times;\n    }\n    function range_utc(t0, t1, dt) {\n      try {\n        d3_date = d3_date_utc;\n        var utc = new d3_date_utc();\n        utc._ = t0;\n        return range(utc, t1, dt);\n      } finally {\n        d3_date = Date;\n      }\n    }\n    local.floor = local;\n    local.round = round;\n    local.ceil = ceil;\n    local.offset = offset;\n    local.range = range;\n    var utc = local.utc = d3_time_interval_utc(local);\n    utc.floor = utc;\n    utc.round = d3_time_interval_utc(round);\n    utc.ceil = d3_time_interval_utc(ceil);\n    utc.offset = d3_time_interval_utc(offset);\n    utc.range = range_utc;\n    return local;\n  }\n  function d3_time_interval_utc(method) {\n    return function(date, k) {\n      try {\n        d3_date = d3_date_utc;\n        var utc = new d3_date_utc();\n        utc._ = date;\n        return method(utc, k)._;\n      } finally {\n        d3_date = Date;\n      }\n    };\n  }\n  d3_time.year = d3_time_interval(function(date) {\n    date = d3_time.day(date);\n    date.setMonth(0, 1);\n    return date;\n  }, function(date, offset) {\n    date.setFullYear(date.getFullYear() + offset);\n  }, function(date) {\n    return date.getFullYear();\n  });\n  d3_time.years = d3_time.year.range;\n  d3_time.years.utc = d3_time.year.utc.range;\n  d3_time.day = d3_time_interval(function(date) {\n    var day = new d3_date(2e3, 0);\n    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n    return day;\n  }, function(date, offset) {\n    date.setDate(date.getDate() + offset);\n  }, function(date) {\n    return date.getDate() - 1;\n  });\n  d3_time.days = d3_time.day.range;\n  d3_time.days.utc = d3_time.day.utc.range;\n  d3_time.dayOfYear = function(date) {\n    var year = d3_time.year(date);\n    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);\n  };\n  [ \"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\" ].forEach(function(day, i) {\n    i = 7 - i;\n    var interval = d3_time[day] = d3_time_interval(function(date) {\n      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);\n      return date;\n    }, function(date, offset) {\n      date.setDate(date.getDate() + Math.floor(offset) * 7);\n    }, function(date) {\n      var day = d3_time.year(date).getDay();\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);\n    });\n    d3_time[day + \"s\"] = interval.range;\n    d3_time[day + \"s\"].utc = interval.utc.range;\n    d3_time[day + \"OfYear\"] = function(date) {\n      var day = d3_time.year(date).getDay();\n      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);\n    };\n  });\n  d3_time.week = d3_time.sunday;\n  d3_time.weeks = d3_time.sunday.range;\n  d3_time.weeks.utc = d3_time.sunday.utc.range;\n  d3_time.weekOfYear = d3_time.sundayOfYear;\n  function d3_locale_timeFormat(locale) {\n    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;\n    function d3_time_format(template) {\n      var n = template.length;\n      function format(date) {\n        var string = [], i = -1, j = 0, c, p, f;\n        while (++i < n) {\n          if (template.charCodeAt(i) === 37) {\n            string.push(template.slice(j, i));\n            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);\n            if (f = d3_time_formats[c]) c = f(date, p == null ? c === \"e\" ? \" \" : \"0\" : p);\n            string.push(c);\n            j = i + 1;\n          }\n        }\n        string.push(template.slice(j, i));\n        return string.join(\"\");\n      }\n      format.parse = function(string) {\n        var d = {\n          y: 1900,\n          m: 0,\n          d: 1,\n          H: 0,\n          M: 0,\n          S: 0,\n          L: 0,\n          Z: null\n        }, i = d3_time_parse(d, template, string, 0);\n        if (i != string.length) return null;\n        if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\n        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();\n        if (\"j\" in d) date.setFullYear(d.y, 0, d.j); else if (\"w\" in d && (\"W\" in d || \"U\" in d)) {\n          date.setFullYear(d.y, 0, 1);\n          date.setFullYear(d.y, 0, \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);\n        } else date.setFullYear(d.y, d.m, d.d);\n        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);\n        return localZ ? date._ : date;\n      };\n      format.toString = function() {\n        return template;\n      };\n      return format;\n    }\n    function d3_time_parse(date, template, string, j) {\n      var c, p, t, i = 0, n = template.length, m = string.length;\n      while (i < n) {\n        if (j >= m) return -1;\n        c = template.charCodeAt(i++);\n        if (c === 37) {\n          t = template.charAt(i++);\n          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];\n          if (!p || (j = p(date, string, j)) < 0) return -1;\n        } else if (c != string.charCodeAt(j++)) {\n          return -1;\n        }\n      }\n      return j;\n    }\n    d3_time_format.utc = function(template) {\n      var local = d3_time_format(template);\n      function format(date) {\n        try {\n          d3_date = d3_date_utc;\n          var utc = new d3_date();\n          utc._ = date;\n          return local(utc);\n        } finally {\n          d3_date = Date;\n        }\n      }\n      format.parse = function(string) {\n        try {\n          d3_date = d3_date_utc;\n          var date = local.parse(string);\n          return date && date._;\n        } finally {\n          d3_date = Date;\n        }\n      };\n      format.toString = local.toString;\n      return format;\n    };\n    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;\n    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);\n    locale_periods.forEach(function(p, i) {\n      d3_time_periodLookup.set(p.toLowerCase(), i);\n    });\n    var d3_time_formats = {\n      a: function(d) {\n        return locale_shortDays[d.getDay()];\n      },\n      A: function(d) {\n        return locale_days[d.getDay()];\n      },\n      b: function(d) {\n        return locale_shortMonths[d.getMonth()];\n      },\n      B: function(d) {\n        return locale_months[d.getMonth()];\n      },\n      c: d3_time_format(locale_dateTime),\n      d: function(d, p) {\n        return d3_time_formatPad(d.getDate(), p, 2);\n      },\n      e: function(d, p) {\n        return d3_time_formatPad(d.getDate(), p, 2);\n      },\n      H: function(d, p) {\n        return d3_time_formatPad(d.getHours(), p, 2);\n      },\n      I: function(d, p) {\n        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);\n      },\n      j: function(d, p) {\n        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);\n      },\n      L: function(d, p) {\n        return d3_time_formatPad(d.getMilliseconds(), p, 3);\n      },\n      m: function(d, p) {\n        return d3_time_formatPad(d.getMonth() + 1, p, 2);\n      },\n      M: function(d, p) {\n        return d3_time_formatPad(d.getMinutes(), p, 2);\n      },\n      p: function(d) {\n        return locale_periods[+(d.getHours() >= 12)];\n      },\n      S: function(d, p) {\n        return d3_time_formatPad(d.getSeconds(), p, 2);\n      },\n      U: function(d, p) {\n        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);\n      },\n      w: function(d) {\n        return d.getDay();\n      },\n      W: function(d, p) {\n        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);\n      },\n      x: d3_time_format(locale_date),\n      X: d3_time_format(locale_time),\n      y: function(d, p) {\n        return d3_time_formatPad(d.getFullYear() % 100, p, 2);\n      },\n      Y: function(d, p) {\n        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);\n      },\n      Z: d3_time_zone,\n      \"%\": function() {\n        return \"%\";\n      }\n    };\n    var d3_time_parsers = {\n      a: d3_time_parseWeekdayAbbrev,\n      A: d3_time_parseWeekday,\n      b: d3_time_parseMonthAbbrev,\n      B: d3_time_parseMonth,\n      c: d3_time_parseLocaleFull,\n      d: d3_time_parseDay,\n      e: d3_time_parseDay,\n      H: d3_time_parseHour24,\n      I: d3_time_parseHour24,\n      j: d3_time_parseDayOfYear,\n      L: d3_time_parseMilliseconds,\n      m: d3_time_parseMonthNumber,\n      M: d3_time_parseMinutes,\n      p: d3_time_parseAmPm,\n      S: d3_time_parseSeconds,\n      U: d3_time_parseWeekNumberSunday,\n      w: d3_time_parseWeekdayNumber,\n      W: d3_time_parseWeekNumberMonday,\n      x: d3_time_parseLocaleDate,\n      X: d3_time_parseLocaleTime,\n      y: d3_time_parseYear,\n      Y: d3_time_parseFullYear,\n      Z: d3_time_parseZone,\n      \"%\": d3_time_parseLiteralPercent\n    };\n    function d3_time_parseWeekdayAbbrev(date, string, i) {\n      d3_time_dayAbbrevRe.lastIndex = 0;\n      var n = d3_time_dayAbbrevRe.exec(string.slice(i));\n      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseWeekday(date, string, i) {\n      d3_time_dayRe.lastIndex = 0;\n      var n = d3_time_dayRe.exec(string.slice(i));\n      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseMonthAbbrev(date, string, i) {\n      d3_time_monthAbbrevRe.lastIndex = 0;\n      var n = d3_time_monthAbbrevRe.exec(string.slice(i));\n      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseMonth(date, string, i) {\n      d3_time_monthRe.lastIndex = 0;\n      var n = d3_time_monthRe.exec(string.slice(i));\n      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n    }\n    function d3_time_parseLocaleFull(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);\n    }\n    function d3_time_parseLocaleDate(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);\n    }\n    function d3_time_parseLocaleTime(date, string, i) {\n      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);\n    }\n    function d3_time_parseAmPm(date, string, i) {\n      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());\n      return n == null ? -1 : (date.p = n, i);\n    }\n    return d3_time_format;\n  }\n  var d3_time_formatPads = {\n    \"-\": \"\",\n    _: \" \",\n    \"0\": \"0\"\n  }, d3_time_numberRe = /^\\s*\\d+/, d3_time_percentRe = /^%/;\n  function d3_time_formatPad(value, fill, width) {\n    var sign = value < 0 ? \"-\" : \"\", string = (sign ? -value : value) + \"\", length = string.length;\n    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n  }\n  function d3_time_formatRe(names) {\n    return new RegExp(\"^(?:\" + names.map(d3.requote).join(\"|\") + \")\", \"i\");\n  }\n  function d3_time_formatLookup(names) {\n    var map = new d3_Map(), i = -1, n = names.length;\n    while (++i < n) map.set(names[i].toLowerCase(), i);\n    return map;\n  }\n  function d3_time_parseWeekdayNumber(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 1));\n    return n ? (date.w = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseWeekNumberSunday(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i));\n    return n ? (date.U = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseWeekNumberMonday(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i));\n    return n ? (date.W = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseFullYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 4));\n    return n ? (date.y = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;\n  }\n  function d3_time_parseZone(date, string, i) {\n    return /^[+-]\\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, \n    i + 5) : -1;\n  }\n  function d3_time_expandYear(d) {\n    return d + (d > 68 ? 1900 : 2e3);\n  }\n  function d3_time_parseMonthNumber(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;\n  }\n  function d3_time_parseDay(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.d = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseDayOfYear(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n    return n ? (date.j = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseHour24(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.H = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseMinutes(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.M = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseSeconds(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 2));\n    return n ? (date.S = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_parseMilliseconds(date, string, i) {\n    d3_time_numberRe.lastIndex = 0;\n    var n = d3_time_numberRe.exec(string.slice(i, i + 3));\n    return n ? (date.L = +n[0], i + n[0].length) : -1;\n  }\n  function d3_time_zone(d) {\n    var z = d.getTimezoneOffset(), zs = z > 0 ? \"-\" : \"+\", zh = abs(z) / 60 | 0, zm = abs(z) % 60;\n    return zs + d3_time_formatPad(zh, \"0\", 2) + d3_time_formatPad(zm, \"0\", 2);\n  }\n  function d3_time_parseLiteralPercent(date, string, i) {\n    d3_time_percentRe.lastIndex = 0;\n    var n = d3_time_percentRe.exec(string.slice(i, i + 1));\n    return n ? i + n[0].length : -1;\n  }\n  function d3_time_formatMulti(formats) {\n    var n = formats.length, i = -1;\n    while (++i < n) formats[i][0] = this(formats[i][0]);\n    return function(date) {\n      var i = 0, f = formats[i];\n      while (!f[1](date)) f = formats[++i];\n      return f[0](date);\n    };\n  }\n  d3.locale = function(locale) {\n    return {\n      numberFormat: d3_locale_numberFormat(locale),\n      timeFormat: d3_locale_timeFormat(locale)\n    };\n  };\n  var d3_locale_enUS = d3.locale({\n    decimal: \".\",\n    thousands: \",\",\n    grouping: [ 3 ],\n    currency: [ \"$\", \"\" ],\n    dateTime: \"%a %b %e %X %Y\",\n    date: \"%m/%d/%Y\",\n    time: \"%H:%M:%S\",\n    periods: [ \"AM\", \"PM\" ],\n    days: [ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\" ],\n    shortDays: [ \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\" ],\n    months: [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ],\n    shortMonths: [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ]\n  });\n  d3.format = d3_locale_enUS.numberFormat;\n  d3.geo = {};\n  function d3_adder() {}\n  d3_adder.prototype = {\n    s: 0,\n    t: 0,\n    add: function(y) {\n      d3_adderSum(y, this.t, d3_adderTemp);\n      d3_adderSum(d3_adderTemp.s, this.s, this);\n      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;\n    },\n    reset: function() {\n      this.s = this.t = 0;\n    },\n    valueOf: function() {\n      return this.s;\n    }\n  };\n  var d3_adderTemp = new d3_adder();\n  function d3_adderSum(a, b, o) {\n    var x = o.s = a + b, bv = x - a, av = x - bv;\n    o.t = a - av + (b - bv);\n  }\n  d3.geo.stream = function(object, listener) {\n    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {\n      d3_geo_streamObjectType[object.type](object, listener);\n    } else {\n      d3_geo_streamGeometry(object, listener);\n    }\n  };\n  function d3_geo_streamGeometry(geometry, listener) {\n    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {\n      d3_geo_streamGeometryType[geometry.type](geometry, listener);\n    }\n  }\n  var d3_geo_streamObjectType = {\n    Feature: function(feature, listener) {\n      d3_geo_streamGeometry(feature.geometry, listener);\n    },\n    FeatureCollection: function(object, listener) {\n      var features = object.features, i = -1, n = features.length;\n      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);\n    }\n  };\n  var d3_geo_streamGeometryType = {\n    Sphere: function(object, listener) {\n      listener.sphere();\n    },\n    Point: function(object, listener) {\n      object = object.coordinates;\n      listener.point(object[0], object[1], object[2]);\n    },\n    MultiPoint: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);\n    },\n    LineString: function(object, listener) {\n      d3_geo_streamLine(object.coordinates, listener, 0);\n    },\n    MultiLineString: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);\n    },\n    Polygon: function(object, listener) {\n      d3_geo_streamPolygon(object.coordinates, listener);\n    },\n    MultiPolygon: function(object, listener) {\n      var coordinates = object.coordinates, i = -1, n = coordinates.length;\n      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);\n    },\n    GeometryCollection: function(object, listener) {\n      var geometries = object.geometries, i = -1, n = geometries.length;\n      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);\n    }\n  };\n  function d3_geo_streamLine(coordinates, listener, closed) {\n    var i = -1, n = coordinates.length - closed, coordinate;\n    listener.lineStart();\n    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);\n    listener.lineEnd();\n  }\n  function d3_geo_streamPolygon(coordinates, listener) {\n    var i = -1, n = coordinates.length;\n    listener.polygonStart();\n    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);\n    listener.polygonEnd();\n  }\n  d3.geo.area = function(object) {\n    d3_geo_areaSum = 0;\n    d3.geo.stream(object, d3_geo_area);\n    return d3_geo_areaSum;\n  };\n  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();\n  var d3_geo_area = {\n    sphere: function() {\n      d3_geo_areaSum += 4 * π;\n    },\n    point: d3_noop,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: function() {\n      d3_geo_areaRingSum.reset();\n      d3_geo_area.lineStart = d3_geo_areaRingStart;\n    },\n    polygonEnd: function() {\n      var area = 2 * d3_geo_areaRingSum;\n      d3_geo_areaSum += area < 0 ? 4 * π + area : area;\n      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;\n    }\n  };\n  function d3_geo_areaRingStart() {\n    var λ00, φ00, λ0, cosφ0, sinφ0;\n    d3_geo_area.point = function(λ, φ) {\n      d3_geo_area.point = nextPoint;\n      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), \n      sinφ0 = Math.sin(φ);\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      φ = φ * d3_radians / 2 + π / 4;\n      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);\n      d3_geo_areaRingSum.add(Math.atan2(v, u));\n      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;\n    }\n    d3_geo_area.lineEnd = function() {\n      nextPoint(λ00, φ00);\n    };\n  }\n  function d3_geo_cartesian(spherical) {\n    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);\n    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];\n  }\n  function d3_geo_cartesianDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  }\n  function d3_geo_cartesianCross(a, b) {\n    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];\n  }\n  function d3_geo_cartesianAdd(a, b) {\n    a[0] += b[0];\n    a[1] += b[1];\n    a[2] += b[2];\n  }\n  function d3_geo_cartesianScale(vector, k) {\n    return [ vector[0] * k, vector[1] * k, vector[2] * k ];\n  }\n  function d3_geo_cartesianNormalize(d) {\n    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n    d[0] /= l;\n    d[1] /= l;\n    d[2] /= l;\n  }\n  function d3_geo_spherical(cartesian) {\n    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];\n  }\n  function d3_geo_sphericalEqual(a, b) {\n    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;\n  }\n  d3.geo.bounds = function() {\n    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;\n    var bound = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        bound.point = ringPoint;\n        bound.lineStart = ringStart;\n        bound.lineEnd = ringEnd;\n        dλSum = 0;\n        d3_geo_area.polygonStart();\n      },\n      polygonEnd: function() {\n        d3_geo_area.polygonEnd();\n        bound.point = point;\n        bound.lineStart = lineStart;\n        bound.lineEnd = lineEnd;\n        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;\n        range[0] = λ0, range[1] = λ1;\n      }\n    };\n    function point(λ, φ) {\n      ranges.push(range = [ λ0 = λ, λ1 = λ ]);\n      if (φ < φ0) φ0 = φ;\n      if (φ > φ1) φ1 = φ;\n    }\n    function linePoint(λ, φ) {\n      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);\n      if (p0) {\n        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);\n        d3_geo_cartesianNormalize(inflection);\n        inflection = d3_geo_spherical(inflection);\n        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;\n        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n          var φi = inflection[1] * d3_degrees;\n          if (φi > φ1) φ1 = φi;\n        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {\n          var φi = -inflection[1] * d3_degrees;\n          if (φi < φ0) φ0 = φi;\n        } else {\n          if (φ < φ0) φ0 = φ;\n          if (φ > φ1) φ1 = φ;\n        }\n        if (antimeridian) {\n          if (λ < λ_) {\n            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n          } else {\n            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n          }\n        } else {\n          if (λ1 >= λ0) {\n            if (λ < λ0) λ0 = λ;\n            if (λ > λ1) λ1 = λ;\n          } else {\n            if (λ > λ_) {\n              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;\n            } else {\n              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;\n            }\n          }\n        }\n      } else {\n        point(λ, φ);\n      }\n      p0 = p, λ_ = λ;\n    }\n    function lineStart() {\n      bound.point = linePoint;\n    }\n    function lineEnd() {\n      range[0] = λ0, range[1] = λ1;\n      bound.point = point;\n      p0 = null;\n    }\n    function ringPoint(λ, φ) {\n      if (p0) {\n        var dλ = λ - λ_;\n        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;\n      } else λ__ = λ, φ__ = φ;\n      d3_geo_area.point(λ, φ);\n      linePoint(λ, φ);\n    }\n    function ringStart() {\n      d3_geo_area.lineStart();\n    }\n    function ringEnd() {\n      ringPoint(λ__, φ__);\n      d3_geo_area.lineEnd();\n      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);\n      range[0] = λ0, range[1] = λ1;\n      p0 = null;\n    }\n    function angle(λ0, λ1) {\n      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;\n    }\n    function compareRanges(a, b) {\n      return a[0] - b[0];\n    }\n    function withinRange(x, range) {\n      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n    }\n    return function(feature) {\n      φ1 = λ1 = -(λ0 = φ0 = Infinity);\n      ranges = [];\n      d3.geo.stream(feature, bound);\n      var n = ranges.length;\n      if (n) {\n        ranges.sort(compareRanges);\n        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {\n          b = ranges[i];\n          if (withinRange(b[0], a) || withinRange(b[1], a)) {\n            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n          } else {\n            merged.push(a = b);\n          }\n        }\n        var best = -Infinity, dλ;\n        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {\n          b = merged[i];\n          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];\n        }\n      }\n      ranges = range = null;\n      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];\n    };\n  }();\n  d3.geo.centroid = function(object) {\n    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n    d3.geo.stream(object, d3_geo_centroid);\n    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;\n    if (m < ε2) {\n      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;\n      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;\n      m = x * x + y * y + z * z;\n      if (m < ε2) return [ NaN, NaN ];\n    }\n    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];\n  };\n  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;\n  var d3_geo_centroid = {\n    sphere: d3_noop,\n    point: d3_geo_centroidPoint,\n    lineStart: d3_geo_centroidLineStart,\n    lineEnd: d3_geo_centroidLineEnd,\n    polygonStart: function() {\n      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;\n    }\n  };\n  function d3_geo_centroidPoint(λ, φ) {\n    λ *= d3_radians;\n    var cosφ = Math.cos(φ *= d3_radians);\n    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));\n  }\n  function d3_geo_centroidPointXYZ(x, y, z) {\n    ++d3_geo_centroidW0;\n    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;\n    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;\n    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;\n  }\n  function d3_geo_centroidLineStart() {\n    var x0, y0, z0;\n    d3_geo_centroid.point = function(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians);\n      x0 = cosφ * Math.cos(λ);\n      y0 = cosφ * Math.sin(λ);\n      z0 = Math.sin(φ);\n      d3_geo_centroid.point = nextPoint;\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n      d3_geo_centroidW1 += w;\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    }\n  }\n  function d3_geo_centroidLineEnd() {\n    d3_geo_centroid.point = d3_geo_centroidPoint;\n  }\n  function d3_geo_centroidRingStart() {\n    var λ00, φ00, x0, y0, z0;\n    d3_geo_centroid.point = function(λ, φ) {\n      λ00 = λ, φ00 = φ;\n      d3_geo_centroid.point = nextPoint;\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians);\n      x0 = cosφ * Math.cos(λ);\n      y0 = cosφ * Math.sin(λ);\n      z0 = Math.sin(φ);\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    };\n    d3_geo_centroid.lineEnd = function() {\n      nextPoint(λ00, φ00);\n      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;\n      d3_geo_centroid.point = d3_geo_centroidPoint;\n    };\n    function nextPoint(λ, φ) {\n      λ *= d3_radians;\n      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);\n      d3_geo_centroidX2 += v * cx;\n      d3_geo_centroidY2 += v * cy;\n      d3_geo_centroidZ2 += v * cz;\n      d3_geo_centroidW1 += w;\n      d3_geo_centroidX1 += w * (x0 + (x0 = x));\n      d3_geo_centroidY1 += w * (y0 + (y0 = y));\n      d3_geo_centroidZ1 += w * (z0 + (z0 = z));\n      d3_geo_centroidPointXYZ(x0, y0, z0);\n    }\n  }\n  function d3_geo_compose(a, b) {\n    function compose(x, y) {\n      return x = a(x, y), b(x[0], x[1]);\n    }\n    if (a.invert && b.invert) compose.invert = function(x, y) {\n      return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n    };\n    return compose;\n  }\n  function d3_true() {\n    return true;\n  }\n  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {\n    var subject = [], clip = [];\n    segments.forEach(function(segment) {\n      if ((n = segment.length - 1) <= 0) return;\n      var n, p0 = segment[0], p1 = segment[n];\n      if (d3_geo_sphericalEqual(p0, p1)) {\n        listener.lineStart();\n        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);\n        listener.lineEnd();\n        return;\n      }\n      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);\n      a.o = b;\n      subject.push(a);\n      clip.push(b);\n      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);\n      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);\n      a.o = b;\n      subject.push(a);\n      clip.push(b);\n    });\n    clip.sort(compare);\n    d3_geo_clipPolygonLinkCircular(subject);\n    d3_geo_clipPolygonLinkCircular(clip);\n    if (!subject.length) return;\n    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {\n      clip[i].e = entry = !entry;\n    }\n    var start = subject[0], points, point;\n    while (1) {\n      var current = start, isSubject = true;\n      while (current.v) if ((current = current.n) === start) return;\n      points = current.z;\n      listener.lineStart();\n      do {\n        current.v = current.o.v = true;\n        if (current.e) {\n          if (isSubject) {\n            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.n.x, 1, listener);\n          }\n          current = current.n;\n        } else {\n          if (isSubject) {\n            points = current.p.z;\n            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);\n          } else {\n            interpolate(current.x, current.p.x, -1, listener);\n          }\n          current = current.p;\n        }\n        current = current.o;\n        points = current.z;\n        isSubject = !isSubject;\n      } while (!current.v);\n      listener.lineEnd();\n    }\n  }\n  function d3_geo_clipPolygonLinkCircular(array) {\n    if (!(n = array.length)) return;\n    var n, i = 0, a = array[0], b;\n    while (++i < n) {\n      a.n = b = array[i];\n      b.p = a;\n      a = b;\n    }\n    a.n = b = array[0];\n    b.p = a;\n  }\n  function d3_geo_clipPolygonIntersection(point, points, other, entry) {\n    this.x = point;\n    this.z = points;\n    this.o = other;\n    this.e = entry;\n    this.v = false;\n    this.n = this.p = null;\n  }\n  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {\n    return function(rotate, listener) {\n      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          clip.point = pointRing;\n          clip.lineStart = ringStart;\n          clip.lineEnd = ringEnd;\n          segments = [];\n          polygon = [];\n        },\n        polygonEnd: function() {\n          clip.point = point;\n          clip.lineStart = lineStart;\n          clip.lineEnd = lineEnd;\n          segments = d3.merge(segments);\n          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);\n          if (segments.length) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);\n          } else if (clipStartInside) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            listener.lineStart();\n            interpolate(null, null, 1, listener);\n            listener.lineEnd();\n          }\n          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;\n          segments = polygon = null;\n        },\n        sphere: function() {\n          listener.polygonStart();\n          listener.lineStart();\n          interpolate(null, null, 1, listener);\n          listener.lineEnd();\n          listener.polygonEnd();\n        }\n      };\n      function point(λ, φ) {\n        var point = rotate(λ, φ);\n        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);\n      }\n      function pointLine(λ, φ) {\n        var point = rotate(λ, φ);\n        line.point(point[0], point[1]);\n      }\n      function lineStart() {\n        clip.point = pointLine;\n        line.lineStart();\n      }\n      function lineEnd() {\n        clip.point = point;\n        line.lineEnd();\n      }\n      var segments;\n      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;\n      function pointRing(λ, φ) {\n        ring.push([ λ, φ ]);\n        var point = rotate(λ, φ);\n        ringListener.point(point[0], point[1]);\n      }\n      function ringStart() {\n        ringListener.lineStart();\n        ring = [];\n      }\n      function ringEnd() {\n        pointRing(ring[0][0], ring[0][1]);\n        ringListener.lineEnd();\n        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;\n        ring.pop();\n        polygon.push(ring);\n        ring = null;\n        if (!n) return;\n        if (clean & 1) {\n          segment = ringSegments[0];\n          var n = segment.length - 1, i = -1, point;\n          if (n > 0) {\n            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;\n            listener.lineStart();\n            while (++i < n) listener.point((point = segment[i])[0], point[1]);\n            listener.lineEnd();\n          }\n          return;\n        }\n        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));\n      }\n      return clip;\n    };\n  }\n  function d3_geo_clipSegmentLength1(segment) {\n    return segment.length > 1;\n  }\n  function d3_geo_clipBufferListener() {\n    var lines = [], line;\n    return {\n      lineStart: function() {\n        lines.push(line = []);\n      },\n      point: function(λ, φ) {\n        line.push([ λ, φ ]);\n      },\n      lineEnd: d3_noop,\n      buffer: function() {\n        var buffer = lines;\n        lines = [];\n        line = null;\n        return buffer;\n      },\n      rejoin: function() {\n        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n      }\n    };\n  }\n  function d3_geo_clipSort(a, b) {\n    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);\n  }\n  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);\n  function d3_geo_clipAntimeridianLine(listener) {\n    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;\n    return {\n      lineStart: function() {\n        listener.lineStart();\n        clean = 1;\n      },\n      point: function(λ1, φ1) {\n        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);\n        if (abs(dλ - π) < ε) {\n          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);\n          listener.point(sλ0, φ0);\n          listener.lineEnd();\n          listener.lineStart();\n          listener.point(sλ1, φ0);\n          listener.point(λ1, φ0);\n          clean = 0;\n        } else if (sλ0 !== sλ1 && dλ >= π) {\n          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;\n          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;\n          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);\n          listener.point(sλ0, φ0);\n          listener.lineEnd();\n          listener.lineStart();\n          listener.point(sλ1, φ0);\n          clean = 0;\n        }\n        listener.point(λ0 = λ1, φ0 = φ1);\n        sλ0 = sλ1;\n      },\n      lineEnd: function() {\n        listener.lineEnd();\n        λ0 = φ0 = NaN;\n      },\n      clean: function() {\n        return 2 - clean;\n      }\n    };\n  }\n  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {\n    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);\n    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;\n  }\n  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {\n    var φ;\n    if (from == null) {\n      φ = direction * halfπ;\n      listener.point(-π, φ);\n      listener.point(0, φ);\n      listener.point(π, φ);\n      listener.point(π, 0);\n      listener.point(π, -φ);\n      listener.point(0, -φ);\n      listener.point(-π, -φ);\n      listener.point(-π, 0);\n      listener.point(-π, φ);\n    } else if (abs(from[0] - to[0]) > ε) {\n      var s = from[0] < to[0] ? π : -π;\n      φ = direction * s / 2;\n      listener.point(-s, φ);\n      listener.point(0, φ);\n      listener.point(s, φ);\n    } else {\n      listener.point(to[0], to[1]);\n    }\n  }\n  function d3_geo_pointInPolygon(point, polygon) {\n    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;\n    d3_geo_areaRingSum.reset();\n    for (var i = 0, n = polygon.length; i < n; ++i) {\n      var ring = polygon[i], m = ring.length;\n      if (!m) continue;\n      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;\n      while (true) {\n        if (j === m) j = 0;\n        point = ring[j];\n        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;\n        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));\n        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;\n        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {\n          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));\n          d3_geo_cartesianNormalize(arc);\n          var intersection = d3_geo_cartesianCross(meridianNormal, arc);\n          d3_geo_cartesianNormalize(intersection);\n          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);\n          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {\n            winding += antimeridian ^ dλ >= 0 ? 1 : -1;\n          }\n        }\n        if (!j++) break;\n        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;\n      }\n    }\n    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < 0) ^ winding & 1;\n  }\n  function d3_geo_clipCircle(radius) {\n    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);\n    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);\n    function visible(λ, φ) {\n      return Math.cos(λ) * Math.cos(φ) > cr;\n    }\n    function clipLine(listener) {\n      var point0, c0, v0, v00, clean;\n      return {\n        lineStart: function() {\n          v00 = v0 = false;\n          clean = 1;\n        },\n        point: function(λ, φ) {\n          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;\n          if (!point0 && (v00 = v0 = v)) listener.lineStart();\n          if (v !== v0) {\n            point2 = intersect(point0, point1);\n            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {\n              point1[0] += ε;\n              point1[1] += ε;\n              v = visible(point1[0], point1[1]);\n            }\n          }\n          if (v !== v0) {\n            clean = 0;\n            if (v) {\n              listener.lineStart();\n              point2 = intersect(point1, point0);\n              listener.point(point2[0], point2[1]);\n            } else {\n              point2 = intersect(point0, point1);\n              listener.point(point2[0], point2[1]);\n              listener.lineEnd();\n            }\n            point0 = point2;\n          } else if (notHemisphere && point0 && smallRadius ^ v) {\n            var t;\n            if (!(c & c0) && (t = intersect(point1, point0, true))) {\n              clean = 0;\n              if (smallRadius) {\n                listener.lineStart();\n                listener.point(t[0][0], t[0][1]);\n                listener.point(t[1][0], t[1][1]);\n                listener.lineEnd();\n              } else {\n                listener.point(t[1][0], t[1][1]);\n                listener.lineEnd();\n                listener.lineStart();\n                listener.point(t[0][0], t[0][1]);\n              }\n            }\n          }\n          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {\n            listener.point(point1[0], point1[1]);\n          }\n          point0 = point1, v0 = v, c0 = c;\n        },\n        lineEnd: function() {\n          if (v0) listener.lineEnd();\n          point0 = null;\n        },\n        clean: function() {\n          return clean | (v00 && v0) << 1;\n        }\n      };\n    }\n    function intersect(a, b, two) {\n      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);\n      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;\n      if (!determinant) return !two && a;\n      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);\n      d3_geo_cartesianAdd(A, B);\n      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);\n      if (t2 < 0) return;\n      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);\n      d3_geo_cartesianAdd(q, A);\n      q = d3_geo_spherical(q);\n      if (!two) return q;\n      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;\n      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;\n      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;\n      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;\n      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {\n        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);\n        d3_geo_cartesianAdd(q1, A);\n        return [ q, d3_geo_spherical(q1) ];\n      }\n    }\n    function code(λ, φ) {\n      var r = smallRadius ? radius : π - radius, code = 0;\n      if (λ < -r) code |= 1; else if (λ > r) code |= 2;\n      if (φ < -r) code |= 4; else if (φ > r) code |= 8;\n      return code;\n    }\n  }\n  function d3_geom_clipLine(x0, y0, x1, y1) {\n    return function(line) {\n      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;\n      r = x0 - ax;\n      if (!dx && r > 0) return;\n      r /= dx;\n      if (dx < 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      } else if (dx > 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      }\n      r = x1 - ax;\n      if (!dx && r < 0) return;\n      r /= dx;\n      if (dx < 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      } else if (dx > 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      }\n      r = y0 - ay;\n      if (!dy && r > 0) return;\n      r /= dy;\n      if (dy < 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      } else if (dy > 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      }\n      r = y1 - ay;\n      if (!dy && r < 0) return;\n      r /= dy;\n      if (dy < 0) {\n        if (r > t1) return;\n        if (r > t0) t0 = r;\n      } else if (dy > 0) {\n        if (r < t0) return;\n        if (r < t1) t1 = r;\n      }\n      if (t0 > 0) line.a = {\n        x: ax + t0 * dx,\n        y: ay + t0 * dy\n      };\n      if (t1 < 1) line.b = {\n        x: ax + t1 * dx,\n        y: ay + t1 * dy\n      };\n      return line;\n    };\n  }\n  var d3_geo_clipExtentMAX = 1e9;\n  d3.geo.clipExtent = function() {\n    var x0, y0, x1, y1, stream, clip, clipExtent = {\n      stream: function(output) {\n        if (stream) stream.valid = false;\n        stream = clip(output);\n        stream.valid = true;\n        return stream;\n      },\n      extent: function(_) {\n        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);\n        if (stream) stream.valid = false, stream = null;\n        return clipExtent;\n      }\n    };\n    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);\n  };\n  function d3_geo_clipExtent(x0, y0, x1, y1) {\n    return function(listener) {\n      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;\n      var clip = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          listener = bufferListener;\n          segments = [];\n          polygon = [];\n          clean = true;\n        },\n        polygonEnd: function() {\n          listener = listener_;\n          segments = d3.merge(segments);\n          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;\n          if (inside || visible) {\n            listener.polygonStart();\n            if (inside) {\n              listener.lineStart();\n              interpolate(null, null, 1, listener);\n              listener.lineEnd();\n            }\n            if (visible) {\n              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);\n            }\n            listener.polygonEnd();\n          }\n          segments = polygon = ring = null;\n        }\n      };\n      function insidePolygon(p) {\n        var wn = 0, n = polygon.length, y = p[1];\n        for (var i = 0; i < n; ++i) {\n          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {\n            b = v[j];\n            if (a[1] <= y) {\n              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;\n            } else {\n              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;\n            }\n            a = b;\n          }\n        }\n        return wn !== 0;\n      }\n      function interpolate(from, to, direction, listener) {\n        var a = 0, a1 = 0;\n        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {\n          do {\n            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n          } while ((a = (a + direction + 4) % 4) !== a1);\n        } else {\n          listener.point(to[0], to[1]);\n        }\n      }\n      function pointVisible(x, y) {\n        return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n      }\n      function point(x, y) {\n        if (pointVisible(x, y)) listener.point(x, y);\n      }\n      var x__, y__, v__, x_, y_, v_, first, clean;\n      function lineStart() {\n        clip.point = linePoint;\n        if (polygon) polygon.push(ring = []);\n        first = true;\n        v_ = false;\n        x_ = y_ = NaN;\n      }\n      function lineEnd() {\n        if (segments) {\n          linePoint(x__, y__);\n          if (v__ && v_) bufferListener.rejoin();\n          segments.push(bufferListener.buffer());\n        }\n        clip.point = point;\n        if (v_) listener.lineEnd();\n      }\n      function linePoint(x, y) {\n        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));\n        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));\n        var v = pointVisible(x, y);\n        if (polygon) ring.push([ x, y ]);\n        if (first) {\n          x__ = x, y__ = y, v__ = v;\n          first = false;\n          if (v) {\n            listener.lineStart();\n            listener.point(x, y);\n          }\n        } else {\n          if (v && v_) listener.point(x, y); else {\n            var l = {\n              a: {\n                x: x_,\n                y: y_\n              },\n              b: {\n                x: x,\n                y: y\n              }\n            };\n            if (clipLine(l)) {\n              if (!v_) {\n                listener.lineStart();\n                listener.point(l.a.x, l.a.y);\n              }\n              listener.point(l.b.x, l.b.y);\n              if (!v) listener.lineEnd();\n              clean = false;\n            } else if (v) {\n              listener.lineStart();\n              listener.point(x, y);\n              clean = false;\n            }\n          }\n        }\n        x_ = x, y_ = y, v_ = v;\n      }\n      return clip;\n    };\n    function corner(p, direction) {\n      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;\n    }\n    function compare(a, b) {\n      return comparePoints(a.x, b.x);\n    }\n    function comparePoints(a, b) {\n      var ca = corner(a, 1), cb = corner(b, 1);\n      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];\n    }\n  }\n  function d3_geo_conic(projectAt) {\n    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);\n    p.parallels = function(_) {\n      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];\n      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);\n    };\n    return p;\n  }\n  function d3_geo_conicEqualArea(φ0, φ1) {\n    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;\n    function forward(λ, φ) {\n      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;\n      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = ρ0 - y;\n      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];\n    };\n    return forward;\n  }\n  (d3.geo.conicEqualArea = function() {\n    return d3_geo_conic(d3_geo_conicEqualArea);\n  }).raw = d3_geo_conicEqualArea;\n  d3.geo.albers = function() {\n    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);\n  };\n  d3.geo.albersUsa = function() {\n    var lower48 = d3.geo.albers();\n    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);\n    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);\n    var point, pointStream = {\n      point: function(x, y) {\n        point = [ x, y ];\n      }\n    }, lower48Point, alaskaPoint, hawaiiPoint;\n    function albersUsa(coordinates) {\n      var x = coordinates[0], y = coordinates[1];\n      point = null;\n      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);\n      return point;\n    }\n    albersUsa.invert = function(coordinates) {\n      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;\n      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);\n    };\n    albersUsa.stream = function(stream) {\n      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);\n      return {\n        point: function(x, y) {\n          lower48Stream.point(x, y);\n          alaskaStream.point(x, y);\n          hawaiiStream.point(x, y);\n        },\n        sphere: function() {\n          lower48Stream.sphere();\n          alaskaStream.sphere();\n          hawaiiStream.sphere();\n        },\n        lineStart: function() {\n          lower48Stream.lineStart();\n          alaskaStream.lineStart();\n          hawaiiStream.lineStart();\n        },\n        lineEnd: function() {\n          lower48Stream.lineEnd();\n          alaskaStream.lineEnd();\n          hawaiiStream.lineEnd();\n        },\n        polygonStart: function() {\n          lower48Stream.polygonStart();\n          alaskaStream.polygonStart();\n          hawaiiStream.polygonStart();\n        },\n        polygonEnd: function() {\n          lower48Stream.polygonEnd();\n          alaskaStream.polygonEnd();\n          hawaiiStream.polygonEnd();\n        }\n      };\n    };\n    albersUsa.precision = function(_) {\n      if (!arguments.length) return lower48.precision();\n      lower48.precision(_);\n      alaska.precision(_);\n      hawaii.precision(_);\n      return albersUsa;\n    };\n    albersUsa.scale = function(_) {\n      if (!arguments.length) return lower48.scale();\n      lower48.scale(_);\n      alaska.scale(_ * .35);\n      hawaii.scale(_);\n      return albersUsa.translate(lower48.translate());\n    };\n    albersUsa.translate = function(_) {\n      if (!arguments.length) return lower48.translate();\n      var k = lower48.scale(), x = +_[0], y = +_[1];\n      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;\n      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;\n      return albersUsa;\n    };\n    return albersUsa.scale(1070);\n  };\n  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {\n    point: d3_noop,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: function() {\n      d3_geo_pathAreaPolygon = 0;\n      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;\n      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);\n    }\n  };\n  function d3_geo_pathAreaRingStart() {\n    var x00, y00, x0, y0;\n    d3_geo_pathArea.point = function(x, y) {\n      d3_geo_pathArea.point = nextPoint;\n      x00 = x0 = x, y00 = y0 = y;\n    };\n    function nextPoint(x, y) {\n      d3_geo_pathAreaPolygon += y0 * x - x0 * y;\n      x0 = x, y0 = y;\n    }\n    d3_geo_pathArea.lineEnd = function() {\n      nextPoint(x00, y00);\n    };\n  }\n  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;\n  var d3_geo_pathBounds = {\n    point: d3_geo_pathBoundsPoint,\n    lineStart: d3_noop,\n    lineEnd: d3_noop,\n    polygonStart: d3_noop,\n    polygonEnd: d3_noop\n  };\n  function d3_geo_pathBoundsPoint(x, y) {\n    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;\n    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;\n    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;\n    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;\n  }\n  function d3_geo_pathBuffer() {\n    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];\n    var stream = {\n      point: point,\n      lineStart: function() {\n        stream.point = pointLineStart;\n      },\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function(_) {\n        pointCircle = d3_geo_pathBufferCircle(_);\n        return stream;\n      },\n      result: function() {\n        if (buffer.length) {\n          var result = buffer.join(\"\");\n          buffer = [];\n          return result;\n        }\n      }\n    };\n    function point(x, y) {\n      buffer.push(\"M\", x, \",\", y, pointCircle);\n    }\n    function pointLineStart(x, y) {\n      buffer.push(\"M\", x, \",\", y);\n      stream.point = pointLine;\n    }\n    function pointLine(x, y) {\n      buffer.push(\"L\", x, \",\", y);\n    }\n    function lineEnd() {\n      stream.point = point;\n    }\n    function lineEndPolygon() {\n      buffer.push(\"Z\");\n    }\n    return stream;\n  }\n  function d3_geo_pathBufferCircle(radius) {\n    return \"m0,\" + radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius + \"z\";\n  }\n  var d3_geo_pathCentroid = {\n    point: d3_geo_pathCentroidPoint,\n    lineStart: d3_geo_pathCentroidLineStart,\n    lineEnd: d3_geo_pathCentroidLineEnd,\n    polygonStart: function() {\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;\n    },\n    polygonEnd: function() {\n      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;\n      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;\n    }\n  };\n  function d3_geo_pathCentroidPoint(x, y) {\n    d3_geo_centroidX0 += x;\n    d3_geo_centroidY0 += y;\n    ++d3_geo_centroidZ0;\n  }\n  function d3_geo_pathCentroidLineStart() {\n    var x0, y0;\n    d3_geo_pathCentroid.point = function(x, y) {\n      d3_geo_pathCentroid.point = nextPoint;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    };\n    function nextPoint(x, y) {\n      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n      d3_geo_centroidX1 += z * (x0 + x) / 2;\n      d3_geo_centroidY1 += z * (y0 + y) / 2;\n      d3_geo_centroidZ1 += z;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    }\n  }\n  function d3_geo_pathCentroidLineEnd() {\n    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;\n  }\n  function d3_geo_pathCentroidRingStart() {\n    var x00, y00, x0, y0;\n    d3_geo_pathCentroid.point = function(x, y) {\n      d3_geo_pathCentroid.point = nextPoint;\n      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);\n    };\n    function nextPoint(x, y) {\n      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);\n      d3_geo_centroidX1 += z * (x0 + x) / 2;\n      d3_geo_centroidY1 += z * (y0 + y) / 2;\n      d3_geo_centroidZ1 += z;\n      z = y0 * x - x0 * y;\n      d3_geo_centroidX2 += z * (x0 + x);\n      d3_geo_centroidY2 += z * (y0 + y);\n      d3_geo_centroidZ2 += z * 3;\n      d3_geo_pathCentroidPoint(x0 = x, y0 = y);\n    }\n    d3_geo_pathCentroid.lineEnd = function() {\n      nextPoint(x00, y00);\n    };\n  }\n  function d3_geo_pathContext(context) {\n    var pointRadius = 4.5;\n    var stream = {\n      point: point,\n      lineStart: function() {\n        stream.point = pointLineStart;\n      },\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        stream.lineEnd = lineEndPolygon;\n      },\n      polygonEnd: function() {\n        stream.lineEnd = lineEnd;\n        stream.point = point;\n      },\n      pointRadius: function(_) {\n        pointRadius = _;\n        return stream;\n      },\n      result: d3_noop\n    };\n    function point(x, y) {\n      context.moveTo(x + pointRadius, y);\n      context.arc(x, y, pointRadius, 0, τ);\n    }\n    function pointLineStart(x, y) {\n      context.moveTo(x, y);\n      stream.point = pointLine;\n    }\n    function pointLine(x, y) {\n      context.lineTo(x, y);\n    }\n    function lineEnd() {\n      stream.point = point;\n    }\n    function lineEndPolygon() {\n      context.closePath();\n    }\n    return stream;\n  }\n  function d3_geo_resample(project) {\n    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;\n    function resample(stream) {\n      return (maxDepth ? resampleRecursive : resampleNone)(stream);\n    }\n    function resampleNone(stream) {\n      return d3_geo_transformPoint(stream, function(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      });\n    }\n    function resampleRecursive(stream) {\n      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;\n      var resample = {\n        point: point,\n        lineStart: lineStart,\n        lineEnd: lineEnd,\n        polygonStart: function() {\n          stream.polygonStart();\n          resample.lineStart = ringStart;\n        },\n        polygonEnd: function() {\n          stream.polygonEnd();\n          resample.lineStart = lineStart;\n        }\n      };\n      function point(x, y) {\n        x = project(x, y);\n        stream.point(x[0], x[1]);\n      }\n      function lineStart() {\n        x0 = NaN;\n        resample.point = linePoint;\n        stream.lineStart();\n      }\n      function linePoint(λ, φ) {\n        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n        stream.point(x0, y0);\n      }\n      function lineEnd() {\n        resample.point = point;\n        stream.lineEnd();\n      }\n      function ringStart() {\n        lineStart();\n        resample.point = ringPoint;\n        resample.lineEnd = ringEnd;\n      }\n      function ringPoint(λ, φ) {\n        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n        resample.point = linePoint;\n      }\n      function ringEnd() {\n        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);\n        resample.lineEnd = lineEnd;\n        lineEnd();\n      }\n      return resample;\n    }\n    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {\n      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;\n      if (d2 > 4 * δ2 && depth--) {\n        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;\n        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {\n          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);\n          stream.point(x2, y2);\n          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);\n        }\n      }\n    }\n    resample.precision = function(_) {\n      if (!arguments.length) return Math.sqrt(δ2);\n      maxDepth = (δ2 = _ * _) > 0 && 16;\n      return resample;\n    };\n    return resample;\n  }\n  d3.geo.path = function() {\n    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;\n    function path(object) {\n      if (object) {\n        if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);\n        d3.geo.stream(object, cacheStream);\n      }\n      return contextStream.result();\n    }\n    path.area = function(object) {\n      d3_geo_pathAreaSum = 0;\n      d3.geo.stream(object, projectStream(d3_geo_pathArea));\n      return d3_geo_pathAreaSum;\n    };\n    path.centroid = function(object) {\n      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;\n      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));\n      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];\n    };\n    path.bounds = function(object) {\n      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);\n      d3.geo.stream(object, projectStream(d3_geo_pathBounds));\n      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];\n    };\n    path.projection = function(_) {\n      if (!arguments.length) return projection;\n      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;\n      return reset();\n    };\n    path.context = function(_) {\n      if (!arguments.length) return context;\n      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);\n      if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n      return reset();\n    };\n    path.pointRadius = function(_) {\n      if (!arguments.length) return pointRadius;\n      pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n      return path;\n    };\n    function reset() {\n      cacheStream = null;\n      return path;\n    }\n    return path.projection(d3.geo.albersUsa()).context(null);\n  };\n  function d3_geo_pathProjectStream(project) {\n    var resample = d3_geo_resample(function(x, y) {\n      return project([ x * d3_degrees, y * d3_degrees ]);\n    });\n    return function(stream) {\n      return d3_geo_projectionRadians(resample(stream));\n    };\n  }\n  d3.geo.transform = function(methods) {\n    return {\n      stream: function(stream) {\n        var transform = new d3_geo_transform(stream);\n        for (var k in methods) transform[k] = methods[k];\n        return transform;\n      }\n    };\n  };\n  function d3_geo_transform(stream) {\n    this.stream = stream;\n  }\n  d3_geo_transform.prototype = {\n    point: function(x, y) {\n      this.stream.point(x, y);\n    },\n    sphere: function() {\n      this.stream.sphere();\n    },\n    lineStart: function() {\n      this.stream.lineStart();\n    },\n    lineEnd: function() {\n      this.stream.lineEnd();\n    },\n    polygonStart: function() {\n      this.stream.polygonStart();\n    },\n    polygonEnd: function() {\n      this.stream.polygonEnd();\n    }\n  };\n  function d3_geo_transformPoint(stream, point) {\n    return {\n      point: point,\n      sphere: function() {\n        stream.sphere();\n      },\n      lineStart: function() {\n        stream.lineStart();\n      },\n      lineEnd: function() {\n        stream.lineEnd();\n      },\n      polygonStart: function() {\n        stream.polygonStart();\n      },\n      polygonEnd: function() {\n        stream.polygonEnd();\n      }\n    };\n  }\n  d3.geo.projection = d3_geo_projection;\n  d3.geo.projectionMutator = d3_geo_projectionMutator;\n  function d3_geo_projection(project) {\n    return d3_geo_projectionMutator(function() {\n      return project;\n    })();\n  }\n  function d3_geo_projectionMutator(projectAt) {\n    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {\n      x = project(x, y);\n      return [ x[0] * k + δx, δy - x[1] * k ];\n    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;\n    function projection(point) {\n      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);\n      return [ point[0] * k + δx, δy - point[1] * k ];\n    }\n    function invert(point) {\n      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);\n      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];\n    }\n    projection.stream = function(output) {\n      if (stream) stream.valid = false;\n      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));\n      stream.valid = true;\n      return stream;\n    };\n    projection.clipAngle = function(_) {\n      if (!arguments.length) return clipAngle;\n      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);\n      return invalidate();\n    };\n    projection.clipExtent = function(_) {\n      if (!arguments.length) return clipExtent;\n      clipExtent = _;\n      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;\n      return invalidate();\n    };\n    projection.scale = function(_) {\n      if (!arguments.length) return k;\n      k = +_;\n      return reset();\n    };\n    projection.translate = function(_) {\n      if (!arguments.length) return [ x, y ];\n      x = +_[0];\n      y = +_[1];\n      return reset();\n    };\n    projection.center = function(_) {\n      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];\n      λ = _[0] % 360 * d3_radians;\n      φ = _[1] % 360 * d3_radians;\n      return reset();\n    };\n    projection.rotate = function(_) {\n      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];\n      δλ = _[0] % 360 * d3_radians;\n      δφ = _[1] % 360 * d3_radians;\n      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;\n      return reset();\n    };\n    d3.rebind(projection, projectResample, \"precision\");\n    function reset() {\n      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);\n      var center = project(λ, φ);\n      δx = x - center[0] * k;\n      δy = y + center[1] * k;\n      return invalidate();\n    }\n    function invalidate() {\n      if (stream) stream.valid = false, stream = null;\n      return projection;\n    }\n    return function() {\n      project = projectAt.apply(this, arguments);\n      projection.invert = project.invert && invert;\n      return reset();\n    };\n  }\n  function d3_geo_projectionRadians(stream) {\n    return d3_geo_transformPoint(stream, function(x, y) {\n      stream.point(x * d3_radians, y * d3_radians);\n    });\n  }\n  function d3_geo_equirectangular(λ, φ) {\n    return [ λ, φ ];\n  }\n  (d3.geo.equirectangular = function() {\n    return d3_geo_projection(d3_geo_equirectangular);\n  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;\n  d3.geo.rotation = function(rotate) {\n    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);\n    function forward(coordinates) {\n      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n    }\n    forward.invert = function(coordinates) {\n      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);\n      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;\n    };\n    return forward;\n  };\n  function d3_geo_identityRotation(λ, φ) {\n    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n  }\n  d3_geo_identityRotation.invert = d3_geo_equirectangular;\n  function d3_geo_rotation(δλ, δφ, δγ) {\n    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;\n  }\n  function d3_geo_forwardRotationλ(δλ) {\n    return function(λ, φ) {\n      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];\n    };\n  }\n  function d3_geo_rotationλ(δλ) {\n    var rotation = d3_geo_forwardRotationλ(δλ);\n    rotation.invert = d3_geo_forwardRotationλ(-δλ);\n    return rotation;\n  }\n  function d3_geo_rotationφγ(δφ, δγ) {\n    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);\n    function rotation(λ, φ) {\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;\n      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];\n    }\n    rotation.invert = function(λ, φ) {\n      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;\n      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];\n    };\n    return rotation;\n  }\n  d3.geo.circle = function() {\n    var origin = [ 0, 0 ], angle, precision = 6, interpolate;\n    function circle() {\n      var center = typeof origin === \"function\" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];\n      interpolate(null, null, 1, {\n        point: function(x, y) {\n          ring.push(x = rotate(x, y));\n          x[0] *= d3_degrees, x[1] *= d3_degrees;\n        }\n      });\n      return {\n        type: \"Polygon\",\n        coordinates: [ ring ]\n      };\n    }\n    circle.origin = function(x) {\n      if (!arguments.length) return origin;\n      origin = x;\n      return circle;\n    };\n    circle.angle = function(x) {\n      if (!arguments.length) return angle;\n      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);\n      return circle;\n    };\n    circle.precision = function(_) {\n      if (!arguments.length) return precision;\n      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);\n      return circle;\n    };\n    return circle.angle(90);\n  };\n  function d3_geo_circleInterpolate(radius, precision) {\n    var cr = Math.cos(radius), sr = Math.sin(radius);\n    return function(from, to, direction, listener) {\n      var step = direction * precision;\n      if (from != null) {\n        from = d3_geo_circleAngle(cr, from);\n        to = d3_geo_circleAngle(cr, to);\n        if (direction > 0 ? from < to : from > to) from += direction * τ;\n      } else {\n        from = radius + direction * τ;\n        to = radius - .5 * step;\n      }\n      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {\n        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);\n      }\n    };\n  }\n  function d3_geo_circleAngle(cr, point) {\n    var a = d3_geo_cartesian(point);\n    a[0] -= cr;\n    d3_geo_cartesianNormalize(a);\n    var angle = d3_acos(-a[1]);\n    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);\n  }\n  d3.geo.distance = function(a, b) {\n    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;\n    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);\n  };\n  d3.geo.graticule = function() {\n    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;\n    function graticule() {\n      return {\n        type: \"MultiLineString\",\n        coordinates: lines()\n      };\n    }\n    function lines() {\n      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {\n        return abs(x % DX) > ε;\n      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {\n        return abs(y % DY) > ε;\n      }).map(y));\n    }\n    graticule.lines = function() {\n      return lines().map(function(coordinates) {\n        return {\n          type: \"LineString\",\n          coordinates: coordinates\n        };\n      });\n    };\n    graticule.outline = function() {\n      return {\n        type: \"Polygon\",\n        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]\n      };\n    };\n    graticule.extent = function(_) {\n      if (!arguments.length) return graticule.minorExtent();\n      return graticule.majorExtent(_).minorExtent(_);\n    };\n    graticule.majorExtent = function(_) {\n      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];\n      X0 = +_[0][0], X1 = +_[1][0];\n      Y0 = +_[0][1], Y1 = +_[1][1];\n      if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n      return graticule.precision(precision);\n    };\n    graticule.minorExtent = function(_) {\n      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];\n      x0 = +_[0][0], x1 = +_[1][0];\n      y0 = +_[0][1], y1 = +_[1][1];\n      if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n      if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n      return graticule.precision(precision);\n    };\n    graticule.step = function(_) {\n      if (!arguments.length) return graticule.minorStep();\n      return graticule.majorStep(_).minorStep(_);\n    };\n    graticule.majorStep = function(_) {\n      if (!arguments.length) return [ DX, DY ];\n      DX = +_[0], DY = +_[1];\n      return graticule;\n    };\n    graticule.minorStep = function(_) {\n      if (!arguments.length) return [ dx, dy ];\n      dx = +_[0], dy = +_[1];\n      return graticule;\n    };\n    graticule.precision = function(_) {\n      if (!arguments.length) return precision;\n      precision = +_;\n      x = d3_geo_graticuleX(y0, y1, 90);\n      y = d3_geo_graticuleY(x0, x1, precision);\n      X = d3_geo_graticuleX(Y0, Y1, 90);\n      Y = d3_geo_graticuleY(X0, X1, precision);\n      return graticule;\n    };\n    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);\n  };\n  function d3_geo_graticuleX(y0, y1, dy) {\n    var y = d3.range(y0, y1 - ε, dy).concat(y1);\n    return function(x) {\n      return y.map(function(y) {\n        return [ x, y ];\n      });\n    };\n  }\n  function d3_geo_graticuleY(x0, x1, dx) {\n    var x = d3.range(x0, x1 - ε, dx).concat(x1);\n    return function(y) {\n      return x.map(function(x) {\n        return [ x, y ];\n      });\n    };\n  }\n  function d3_source(d) {\n    return d.source;\n  }\n  function d3_target(d) {\n    return d.target;\n  }\n  d3.geo.greatArc = function() {\n    var source = d3_source, source_, target = d3_target, target_;\n    function greatArc() {\n      return {\n        type: \"LineString\",\n        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]\n      };\n    }\n    greatArc.distance = function() {\n      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));\n    };\n    greatArc.source = function(_) {\n      if (!arguments.length) return source;\n      source = _, source_ = typeof _ === \"function\" ? null : _;\n      return greatArc;\n    };\n    greatArc.target = function(_) {\n      if (!arguments.length) return target;\n      target = _, target_ = typeof _ === \"function\" ? null : _;\n      return greatArc;\n    };\n    greatArc.precision = function() {\n      return arguments.length ? greatArc : 0;\n    };\n    return greatArc;\n  };\n  d3.geo.interpolate = function(source, target) {\n    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);\n  };\n  function d3_geo_interpolate(x0, y0, x1, y1) {\n    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);\n    var interpolate = d ? function(t) {\n      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;\n      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];\n    } : function() {\n      return [ x0 * d3_degrees, y0 * d3_degrees ];\n    };\n    interpolate.distance = d;\n    return interpolate;\n  }\n  d3.geo.length = function(object) {\n    d3_geo_lengthSum = 0;\n    d3.geo.stream(object, d3_geo_length);\n    return d3_geo_lengthSum;\n  };\n  var d3_geo_lengthSum;\n  var d3_geo_length = {\n    sphere: d3_noop,\n    point: d3_noop,\n    lineStart: d3_geo_lengthLineStart,\n    lineEnd: d3_noop,\n    polygonStart: d3_noop,\n    polygonEnd: d3_noop\n  };\n  function d3_geo_lengthLineStart() {\n    var λ0, sinφ0, cosφ0;\n    d3_geo_length.point = function(λ, φ) {\n      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);\n      d3_geo_length.point = nextPoint;\n    };\n    d3_geo_length.lineEnd = function() {\n      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;\n    };\n    function nextPoint(λ, φ) {\n      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);\n      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);\n      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;\n    }\n  }\n  function d3_geo_azimuthal(scale, angle) {\n    function azimuthal(λ, φ) {\n      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);\n      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];\n    }\n    azimuthal.invert = function(x, y) {\n      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);\n      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];\n    };\n    return azimuthal;\n  }\n  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {\n    return Math.sqrt(2 / (1 + cosλcosφ));\n  }, function(ρ) {\n    return 2 * Math.asin(ρ / 2);\n  });\n  (d3.geo.azimuthalEqualArea = function() {\n    return d3_geo_projection(d3_geo_azimuthalEqualArea);\n  }).raw = d3_geo_azimuthalEqualArea;\n  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {\n    var c = Math.acos(cosλcosφ);\n    return c && c / Math.sin(c);\n  }, d3_identity);\n  (d3.geo.azimuthalEquidistant = function() {\n    return d3_geo_projection(d3_geo_azimuthalEquidistant);\n  }).raw = d3_geo_azimuthalEquidistant;\n  function d3_geo_conicConformal(φ0, φ1) {\n    var cosφ0 = Math.cos(φ0), t = function(φ) {\n      return Math.tan(π / 4 + φ / 2);\n    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;\n    if (!n) return d3_geo_mercator;\n    function forward(λ, φ) {\n      if (F > 0) {\n        if (φ < -halfπ + ε) φ = -halfπ + ε;\n      } else {\n        if (φ > halfπ - ε) φ = halfπ - ε;\n      }\n      var ρ = F / Math.pow(t(φ), n);\n      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);\n      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];\n    };\n    return forward;\n  }\n  (d3.geo.conicConformal = function() {\n    return d3_geo_conic(d3_geo_conicConformal);\n  }).raw = d3_geo_conicConformal;\n  function d3_geo_conicEquidistant(φ0, φ1) {\n    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;\n    if (abs(n) < ε) return d3_geo_equirectangular;\n    function forward(λ, φ) {\n      var ρ = G - φ;\n      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];\n    }\n    forward.invert = function(x, y) {\n      var ρ0_y = G - y;\n      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];\n    };\n    return forward;\n  }\n  (d3.geo.conicEquidistant = function() {\n    return d3_geo_conic(d3_geo_conicEquidistant);\n  }).raw = d3_geo_conicEquidistant;\n  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {\n    return 1 / cosλcosφ;\n  }, Math.atan);\n  (d3.geo.gnomonic = function() {\n    return d3_geo_projection(d3_geo_gnomonic);\n  }).raw = d3_geo_gnomonic;\n  function d3_geo_mercator(λ, φ) {\n    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];\n  }\n  d3_geo_mercator.invert = function(x, y) {\n    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];\n  };\n  function d3_geo_mercatorProjection(project) {\n    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;\n    m.scale = function() {\n      var v = scale.apply(m, arguments);\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n    };\n    m.translate = function() {\n      var v = translate.apply(m, arguments);\n      return v === m ? clipAuto ? m.clipExtent(null) : m : v;\n    };\n    m.clipExtent = function(_) {\n      var v = clipExtent.apply(m, arguments);\n      if (v === m) {\n        if (clipAuto = _ == null) {\n          var k = π * scale(), t = translate();\n          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);\n        }\n      } else if (clipAuto) {\n        v = null;\n      }\n      return v;\n    };\n    return m.clipExtent(null);\n  }\n  (d3.geo.mercator = function() {\n    return d3_geo_mercatorProjection(d3_geo_mercator);\n  }).raw = d3_geo_mercator;\n  var d3_geo_orthographic = d3_geo_azimuthal(function() {\n    return 1;\n  }, Math.asin);\n  (d3.geo.orthographic = function() {\n    return d3_geo_projection(d3_geo_orthographic);\n  }).raw = d3_geo_orthographic;\n  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {\n    return 1 / (1 + cosλcosφ);\n  }, function(ρ) {\n    return 2 * Math.atan(ρ);\n  });\n  (d3.geo.stereographic = function() {\n    return d3_geo_projection(d3_geo_stereographic);\n  }).raw = d3_geo_stereographic;\n  function d3_geo_transverseMercator(λ, φ) {\n    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];\n  }\n  d3_geo_transverseMercator.invert = function(x, y) {\n    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];\n  };\n  (d3.geo.transverseMercator = function() {\n    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;\n    projection.center = function(_) {\n      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);\n    };\n    projection.rotate = function(_) {\n      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), \n      [ _[0], _[1], _[2] - 90 ]);\n    };\n    return rotate([ 0, 0, 90 ]);\n  }).raw = d3_geo_transverseMercator;\n  d3.geom = {};\n  function d3_geom_pointX(d) {\n    return d[0];\n  }\n  function d3_geom_pointY(d) {\n    return d[1];\n  }\n  d3.geom.hull = function(vertices) {\n    var x = d3_geom_pointX, y = d3_geom_pointY;\n    if (arguments.length) return hull(vertices);\n    function hull(data) {\n      if (data.length < 3) return [];\n      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];\n      for (i = 0; i < n; i++) {\n        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);\n      }\n      points.sort(d3_geom_hullOrder);\n      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);\n      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);\n      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];\n      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);\n      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);\n      return polygon;\n    }\n    hull.x = function(_) {\n      return arguments.length ? (x = _, hull) : x;\n    };\n    hull.y = function(_) {\n      return arguments.length ? (y = _, hull) : y;\n    };\n    return hull;\n  };\n  function d3_geom_hullUpper(points) {\n    var n = points.length, hull = [ 0, 1 ], hs = 2;\n    for (var i = 2; i < n; i++) {\n      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;\n      hull[hs++] = i;\n    }\n    return hull.slice(0, hs);\n  }\n  function d3_geom_hullOrder(a, b) {\n    return a[0] - b[0] || a[1] - b[1];\n  }\n  d3.geom.polygon = function(coordinates) {\n    d3_subclass(coordinates, d3_geom_polygonPrototype);\n    return coordinates;\n  };\n  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];\n  d3_geom_polygonPrototype.area = function() {\n    var i = -1, n = this.length, a, b = this[n - 1], area = 0;\n    while (++i < n) {\n      a = b;\n      b = this[i];\n      area += a[1] * b[0] - a[0] * b[1];\n    }\n    return area * .5;\n  };\n  d3_geom_polygonPrototype.centroid = function(k) {\n    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;\n    if (!arguments.length) k = -1 / (6 * this.area());\n    while (++i < n) {\n      a = b;\n      b = this[i];\n      c = a[0] * b[1] - b[0] * a[1];\n      x += (a[0] + b[0]) * c;\n      y += (a[1] + b[1]) * c;\n    }\n    return [ x * k, y * k ];\n  };\n  d3_geom_polygonPrototype.clip = function(subject) {\n    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;\n    while (++i < n) {\n      input = subject.slice();\n      subject.length = 0;\n      b = this[i];\n      c = input[(m = input.length - closed) - 1];\n      j = -1;\n      while (++j < m) {\n        d = input[j];\n        if (d3_geom_polygonInside(d, a, b)) {\n          if (!d3_geom_polygonInside(c, a, b)) {\n            subject.push(d3_geom_polygonIntersect(c, d, a, b));\n          }\n          subject.push(d);\n        } else if (d3_geom_polygonInside(c, a, b)) {\n          subject.push(d3_geom_polygonIntersect(c, d, a, b));\n        }\n        c = d;\n      }\n      if (closed) subject.push(subject[0]);\n      a = b;\n    }\n    return subject;\n  };\n  function d3_geom_polygonInside(p, a, b) {\n    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);\n  }\n  function d3_geom_polygonIntersect(c, d, a, b) {\n    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);\n    return [ x1 + ua * x21, y1 + ua * y21 ];\n  }\n  function d3_geom_polygonClosed(coordinates) {\n    var a = coordinates[0], b = coordinates[coordinates.length - 1];\n    return !(a[0] - b[0] || a[1] - b[1]);\n  }\n  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];\n  function d3_geom_voronoiBeach() {\n    d3_geom_voronoiRedBlackNode(this);\n    this.edge = this.site = this.circle = null;\n  }\n  function d3_geom_voronoiCreateBeach(site) {\n    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();\n    beach.site = site;\n    return beach;\n  }\n  function d3_geom_voronoiDetachBeach(beach) {\n    d3_geom_voronoiDetachCircle(beach);\n    d3_geom_voronoiBeaches.remove(beach);\n    d3_geom_voronoiBeachPool.push(beach);\n    d3_geom_voronoiRedBlackNode(beach);\n  }\n  function d3_geom_voronoiRemoveBeach(beach) {\n    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {\n      x: x,\n      y: y\n    }, previous = beach.P, next = beach.N, disappearing = [ beach ];\n    d3_geom_voronoiDetachBeach(beach);\n    var lArc = previous;\n    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {\n      previous = lArc.P;\n      disappearing.unshift(lArc);\n      d3_geom_voronoiDetachBeach(lArc);\n      lArc = previous;\n    }\n    disappearing.unshift(lArc);\n    d3_geom_voronoiDetachCircle(lArc);\n    var rArc = next;\n    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {\n      next = rArc.N;\n      disappearing.push(rArc);\n      d3_geom_voronoiDetachBeach(rArc);\n      rArc = next;\n    }\n    disappearing.push(rArc);\n    d3_geom_voronoiDetachCircle(rArc);\n    var nArcs = disappearing.length, iArc;\n    for (iArc = 1; iArc < nArcs; ++iArc) {\n      rArc = disappearing[iArc];\n      lArc = disappearing[iArc - 1];\n      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\n    }\n    lArc = disappearing[0];\n    rArc = disappearing[nArcs - 1];\n    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);\n    d3_geom_voronoiAttachCircle(lArc);\n    d3_geom_voronoiAttachCircle(rArc);\n  }\n  function d3_geom_voronoiAddBeach(site) {\n    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;\n    while (node) {\n      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;\n      if (dxl > ε) node = node.L; else {\n        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);\n        if (dxr > ε) {\n          if (!node.R) {\n            lArc = node;\n            break;\n          }\n          node = node.R;\n        } else {\n          if (dxl > -ε) {\n            lArc = node.P;\n            rArc = node;\n          } else if (dxr > -ε) {\n            lArc = node;\n            rArc = node.N;\n          } else {\n            lArc = rArc = node;\n          }\n          break;\n        }\n      }\n    }\n    var newArc = d3_geom_voronoiCreateBeach(site);\n    d3_geom_voronoiBeaches.insert(lArc, newArc);\n    if (!lArc && !rArc) return;\n    if (lArc === rArc) {\n      d3_geom_voronoiDetachCircle(lArc);\n      rArc = d3_geom_voronoiCreateBeach(lArc.site);\n      d3_geom_voronoiBeaches.insert(newArc, rArc);\n      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n      d3_geom_voronoiAttachCircle(lArc);\n      d3_geom_voronoiAttachCircle(rArc);\n      return;\n    }\n    if (!rArc) {\n      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);\n      return;\n    }\n    d3_geom_voronoiDetachCircle(lArc);\n    d3_geom_voronoiDetachCircle(rArc);\n    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {\n      x: (cy * hb - by * hc) / d + ax,\n      y: (bx * hc - cx * hb) / d + ay\n    };\n    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);\n    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);\n    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);\n    d3_geom_voronoiAttachCircle(lArc);\n    d3_geom_voronoiAttachCircle(rArc);\n  }\n  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {\n    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;\n    if (!pby2) return rfocx;\n    var lArc = arc.P;\n    if (!lArc) return -Infinity;\n    site = lArc.site;\n    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;\n    if (!plby2) return lfocx;\n    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;\n    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\n    return (rfocx + lfocx) / 2;\n  }\n  function d3_geom_voronoiRightBreakPoint(arc, directrix) {\n    var rArc = arc.N;\n    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);\n    var site = arc.site;\n    return site.y === directrix ? site.x : Infinity;\n  }\n  function d3_geom_voronoiCell(site) {\n    this.site = site;\n    this.edges = [];\n  }\n  d3_geom_voronoiCell.prototype.prepare = function() {\n    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;\n    while (iHalfEdge--) {\n      edge = halfEdges[iHalfEdge].edge;\n      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);\n    }\n    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);\n    return halfEdges.length;\n  };\n  function d3_geom_voronoiCloseCells(extent) {\n    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;\n    while (iCell--) {\n      cell = cells[iCell];\n      if (!cell || !cell.prepare()) continue;\n      halfEdges = cell.edges;\n      nHalfEdges = halfEdges.length;\n      iHalfEdge = 0;\n      while (iHalfEdge < nHalfEdges) {\n        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;\n        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;\n        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {\n          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {\n            x: x0,\n            y: abs(x2 - x0) < ε ? y2 : y1\n          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {\n            x: abs(y2 - y1) < ε ? x2 : x1,\n            y: y1\n          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {\n            x: x1,\n            y: abs(x2 - x1) < ε ? y2 : y0\n          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {\n            x: abs(y2 - y0) < ε ? x2 : x0,\n            y: y0\n          } : null), cell.site, null));\n          ++nHalfEdges;\n        }\n      }\n    }\n  }\n  function d3_geom_voronoiHalfEdgeOrder(a, b) {\n    return b.angle - a.angle;\n  }\n  function d3_geom_voronoiCircle() {\n    d3_geom_voronoiRedBlackNode(this);\n    this.x = this.y = this.arc = this.site = this.cy = null;\n  }\n  function d3_geom_voronoiAttachCircle(arc) {\n    var lArc = arc.P, rArc = arc.N;\n    if (!lArc || !rArc) return;\n    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;\n    if (lSite === rSite) return;\n    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;\n    var d = 2 * (ax * cy - ay * cx);\n    if (d >= -ε2) return;\n    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;\n    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();\n    circle.arc = arc;\n    circle.site = cSite;\n    circle.x = x + bx;\n    circle.y = cy + Math.sqrt(x * x + y * y);\n    circle.cy = cy;\n    arc.circle = circle;\n    var before = null, node = d3_geom_voronoiCircles._;\n    while (node) {\n      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {\n        if (node.L) node = node.L; else {\n          before = node.P;\n          break;\n        }\n      } else {\n        if (node.R) node = node.R; else {\n          before = node;\n          break;\n        }\n      }\n    }\n    d3_geom_voronoiCircles.insert(before, circle);\n    if (!before) d3_geom_voronoiFirstCircle = circle;\n  }\n  function d3_geom_voronoiDetachCircle(arc) {\n    var circle = arc.circle;\n    if (circle) {\n      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;\n      d3_geom_voronoiCircles.remove(circle);\n      d3_geom_voronoiCirclePool.push(circle);\n      d3_geom_voronoiRedBlackNode(circle);\n      arc.circle = null;\n    }\n  }\n  function d3_geom_voronoiClipEdges(extent) {\n    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;\n    while (i--) {\n      e = edges[i];\n      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {\n        e.a = e.b = null;\n        edges.splice(i, 1);\n      }\n    }\n  }\n  function d3_geom_voronoiConnectEdge(edge, extent) {\n    var vb = edge.b;\n    if (vb) return true;\n    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;\n    if (ry === ly) {\n      if (fx < x0 || fx >= x1) return;\n      if (lx > rx) {\n        if (!va) va = {\n          x: fx,\n          y: y0\n        }; else if (va.y >= y1) return;\n        vb = {\n          x: fx,\n          y: y1\n        };\n      } else {\n        if (!va) va = {\n          x: fx,\n          y: y1\n        }; else if (va.y < y0) return;\n        vb = {\n          x: fx,\n          y: y0\n        };\n      }\n    } else {\n      fm = (lx - rx) / (ry - ly);\n      fb = fy - fm * fx;\n      if (fm < -1 || fm > 1) {\n        if (lx > rx) {\n          if (!va) va = {\n            x: (y0 - fb) / fm,\n            y: y0\n          }; else if (va.y >= y1) return;\n          vb = {\n            x: (y1 - fb) / fm,\n            y: y1\n          };\n        } else {\n          if (!va) va = {\n            x: (y1 - fb) / fm,\n            y: y1\n          }; else if (va.y < y0) return;\n          vb = {\n            x: (y0 - fb) / fm,\n            y: y0\n          };\n        }\n      } else {\n        if (ly < ry) {\n          if (!va) va = {\n            x: x0,\n            y: fm * x0 + fb\n          }; else if (va.x >= x1) return;\n          vb = {\n            x: x1,\n            y: fm * x1 + fb\n          };\n        } else {\n          if (!va) va = {\n            x: x1,\n            y: fm * x1 + fb\n          }; else if (va.x < x0) return;\n          vb = {\n            x: x0,\n            y: fm * x0 + fb\n          };\n        }\n      }\n    }\n    edge.a = va;\n    edge.b = vb;\n    return true;\n  }\n  function d3_geom_voronoiEdge(lSite, rSite) {\n    this.l = lSite;\n    this.r = rSite;\n    this.a = this.b = null;\n  }\n  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {\n    var edge = new d3_geom_voronoiEdge(lSite, rSite);\n    d3_geom_voronoiEdges.push(edge);\n    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);\n    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);\n    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));\n    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));\n    return edge;\n  }\n  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {\n    var edge = new d3_geom_voronoiEdge(lSite, null);\n    edge.a = va;\n    edge.b = vb;\n    d3_geom_voronoiEdges.push(edge);\n    return edge;\n  }\n  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {\n    if (!edge.a && !edge.b) {\n      edge.a = vertex;\n      edge.l = lSite;\n      edge.r = rSite;\n    } else if (edge.l === rSite) {\n      edge.b = vertex;\n    } else {\n      edge.a = vertex;\n    }\n  }\n  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {\n    var va = edge.a, vb = edge.b;\n    this.edge = edge;\n    this.site = lSite;\n    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);\n  }\n  d3_geom_voronoiHalfEdge.prototype = {\n    start: function() {\n      return this.edge.l === this.site ? this.edge.a : this.edge.b;\n    },\n    end: function() {\n      return this.edge.l === this.site ? this.edge.b : this.edge.a;\n    }\n  };\n  function d3_geom_voronoiRedBlackTree() {\n    this._ = null;\n  }\n  function d3_geom_voronoiRedBlackNode(node) {\n    node.U = node.C = node.L = node.R = node.P = node.N = null;\n  }\n  d3_geom_voronoiRedBlackTree.prototype = {\n    insert: function(after, node) {\n      var parent, grandpa, uncle;\n      if (after) {\n        node.P = after;\n        node.N = after.N;\n        if (after.N) after.N.P = node;\n        after.N = node;\n        if (after.R) {\n          after = after.R;\n          while (after.L) after = after.L;\n          after.L = node;\n        } else {\n          after.R = node;\n        }\n        parent = after;\n      } else if (this._) {\n        after = d3_geom_voronoiRedBlackFirst(this._);\n        node.P = null;\n        node.N = after;\n        after.P = after.L = node;\n        parent = after;\n      } else {\n        node.P = node.N = null;\n        this._ = node;\n        parent = null;\n      }\n      node.L = node.R = null;\n      node.U = parent;\n      node.C = true;\n      after = node;\n      while (parent && parent.C) {\n        grandpa = parent.U;\n        if (parent === grandpa.L) {\n          uncle = grandpa.R;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.R) {\n              d3_geom_voronoiRedBlackRotateLeft(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            d3_geom_voronoiRedBlackRotateRight(this, grandpa);\n          }\n        } else {\n          uncle = grandpa.L;\n          if (uncle && uncle.C) {\n            parent.C = uncle.C = false;\n            grandpa.C = true;\n            after = grandpa;\n          } else {\n            if (after === parent.L) {\n              d3_geom_voronoiRedBlackRotateRight(this, parent);\n              after = parent;\n              parent = after.U;\n            }\n            parent.C = false;\n            grandpa.C = true;\n            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);\n          }\n        }\n        parent = after.U;\n      }\n      this._.C = false;\n    },\n    remove: function(node) {\n      if (node.N) node.N.P = node.P;\n      if (node.P) node.P.N = node.N;\n      node.N = node.P = null;\n      var parent = node.U, sibling, left = node.L, right = node.R, next, red;\n      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);\n      if (parent) {\n        if (parent.L === node) parent.L = next; else parent.R = next;\n      } else {\n        this._ = next;\n      }\n      if (left && right) {\n        red = next.C;\n        next.C = node.C;\n        next.L = left;\n        left.U = next;\n        if (next !== right) {\n          parent = next.U;\n          next.U = node.U;\n          node = next.R;\n          parent.L = node;\n          next.R = right;\n          right.U = next;\n        } else {\n          next.U = parent;\n          parent = next;\n          node = next.R;\n        }\n      } else {\n        red = node.C;\n        node = next;\n      }\n      if (node) node.U = parent;\n      if (red) return;\n      if (node && node.C) {\n        node.C = false;\n        return;\n      }\n      do {\n        if (node === this._) break;\n        if (node === parent.L) {\n          sibling = parent.R;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n            sibling = parent.R;\n          }\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n            if (!sibling.R || !sibling.R.C) {\n              sibling.L.C = false;\n              sibling.C = true;\n              d3_geom_voronoiRedBlackRotateRight(this, sibling);\n              sibling = parent.R;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.R.C = false;\n            d3_geom_voronoiRedBlackRotateLeft(this, parent);\n            node = this._;\n            break;\n          }\n        } else {\n          sibling = parent.L;\n          if (sibling.C) {\n            sibling.C = false;\n            parent.C = true;\n            d3_geom_voronoiRedBlackRotateRight(this, parent);\n            sibling = parent.L;\n          }\n          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {\n            if (!sibling.L || !sibling.L.C) {\n              sibling.R.C = false;\n              sibling.C = true;\n              d3_geom_voronoiRedBlackRotateLeft(this, sibling);\n              sibling = parent.L;\n            }\n            sibling.C = parent.C;\n            parent.C = sibling.L.C = false;\n            d3_geom_voronoiRedBlackRotateRight(this, parent);\n            node = this._;\n            break;\n          }\n        }\n        sibling.C = true;\n        node = parent;\n        parent = parent.U;\n      } while (!node.C);\n      if (node) node.C = false;\n    }\n  };\n  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {\n    var p = node, q = node.R, parent = p.U;\n    if (parent) {\n      if (parent.L === p) parent.L = q; else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n    q.U = parent;\n    p.U = q;\n    p.R = q.L;\n    if (p.R) p.R.U = p;\n    q.L = p;\n  }\n  function d3_geom_voronoiRedBlackRotateRight(tree, node) {\n    var p = node, q = node.L, parent = p.U;\n    if (parent) {\n      if (parent.L === p) parent.L = q; else parent.R = q;\n    } else {\n      tree._ = q;\n    }\n    q.U = parent;\n    p.U = q;\n    p.L = q.R;\n    if (p.L) p.L.U = p;\n    q.R = p;\n  }\n  function d3_geom_voronoiRedBlackFirst(node) {\n    while (node.L) node = node.L;\n    return node;\n  }\n  function d3_geom_voronoi(sites, bbox) {\n    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;\n    d3_geom_voronoiEdges = [];\n    d3_geom_voronoiCells = new Array(sites.length);\n    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();\n    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();\n    while (true) {\n      circle = d3_geom_voronoiFirstCircle;\n      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {\n        if (site.x !== x0 || site.y !== y0) {\n          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);\n          d3_geom_voronoiAddBeach(site);\n          x0 = site.x, y0 = site.y;\n        }\n        site = sites.pop();\n      } else if (circle) {\n        d3_geom_voronoiRemoveBeach(circle.arc);\n      } else {\n        break;\n      }\n    }\n    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);\n    var diagram = {\n      cells: d3_geom_voronoiCells,\n      edges: d3_geom_voronoiEdges\n    };\n    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;\n    return diagram;\n  }\n  function d3_geom_voronoiVertexOrder(a, b) {\n    return b.y - a.y || b.x - a.x;\n  }\n  d3.geom.voronoi = function(points) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;\n    if (points) return voronoi(points);\n    function voronoi(data) {\n      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];\n      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {\n        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {\n          var s = e.start();\n          return [ s.x, s.y ];\n        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];\n        polygon.point = data[i];\n      });\n      return polygons;\n    }\n    function sites(data) {\n      return data.map(function(d, i) {\n        return {\n          x: Math.round(fx(d, i) / ε) * ε,\n          y: Math.round(fy(d, i) / ε) * ε,\n          i: i\n        };\n      });\n    }\n    voronoi.links = function(data) {\n      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {\n        return edge.l && edge.r;\n      }).map(function(edge) {\n        return {\n          source: data[edge.l.i],\n          target: data[edge.r.i]\n        };\n      });\n    };\n    voronoi.triangles = function(data) {\n      var triangles = [];\n      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {\n        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;\n        while (++j < m) {\n          e0 = e1;\n          s0 = s1;\n          e1 = edges[j].edge;\n          s1 = e1.l === site ? e1.r : e1.l;\n          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {\n            triangles.push([ data[i], data[s0.i], data[s1.i] ]);\n          }\n        }\n      });\n      return triangles;\n    };\n    voronoi.x = function(_) {\n      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;\n    };\n    voronoi.y = function(_) {\n      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;\n    };\n    voronoi.clipExtent = function(_) {\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;\n      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;\n      return voronoi;\n    };\n    voronoi.size = function(_) {\n      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];\n      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);\n    };\n    return voronoi;\n  };\n  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];\n  function d3_geom_voronoiTriangleArea(a, b, c) {\n    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);\n  }\n  d3.geom.delaunay = function(vertices) {\n    return d3.geom.voronoi().triangles(vertices);\n  };\n  d3.geom.quadtree = function(points, x1, y1, x2, y2) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, compat;\n    if (compat = arguments.length) {\n      x = d3_geom_quadtreeCompatX;\n      y = d3_geom_quadtreeCompatY;\n      if (compat === 3) {\n        y2 = y1;\n        x2 = x1;\n        y1 = x1 = 0;\n      }\n      return quadtree(points);\n    }\n    function quadtree(data) {\n      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;\n      if (x1 != null) {\n        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;\n      } else {\n        x2_ = y2_ = -(x1_ = y1_ = Infinity);\n        xs = [], ys = [];\n        n = data.length;\n        if (compat) for (i = 0; i < n; ++i) {\n          d = data[i];\n          if (d.x < x1_) x1_ = d.x;\n          if (d.y < y1_) y1_ = d.y;\n          if (d.x > x2_) x2_ = d.x;\n          if (d.y > y2_) y2_ = d.y;\n          xs.push(d.x);\n          ys.push(d.y);\n        } else for (i = 0; i < n; ++i) {\n          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);\n          if (x_ < x1_) x1_ = x_;\n          if (y_ < y1_) y1_ = y_;\n          if (x_ > x2_) x2_ = x_;\n          if (y_ > y2_) y2_ = y_;\n          xs.push(x_);\n          ys.push(y_);\n        }\n      }\n      var dx = x2_ - x1_, dy = y2_ - y1_;\n      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;\n      function insert(n, d, x, y, x1, y1, x2, y2) {\n        if (isNaN(x) || isNaN(y)) return;\n        if (n.leaf) {\n          var nx = n.x, ny = n.y;\n          if (nx != null) {\n            if (abs(nx - x) + abs(ny - y) < .01) {\n              insertChild(n, d, x, y, x1, y1, x2, y2);\n            } else {\n              var nPoint = n.point;\n              n.x = n.y = n.point = null;\n              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);\n              insertChild(n, d, x, y, x1, y1, x2, y2);\n            }\n          } else {\n            n.x = x, n.y = y, n.point = d;\n          }\n        } else {\n          insertChild(n, d, x, y, x1, y1, x2, y2);\n        }\n      }\n      function insertChild(n, d, x, y, x1, y1, x2, y2) {\n        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;\n        n.leaf = false;\n        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());\n        if (right) x1 = xm; else x2 = xm;\n        if (below) y1 = ym; else y2 = ym;\n        insert(n, d, x, y, x1, y1, x2, y2);\n      }\n      var root = d3_geom_quadtreeNode();\n      root.add = function(d) {\n        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);\n      };\n      root.visit = function(f) {\n        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);\n      };\n      root.find = function(point) {\n        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);\n      };\n      i = -1;\n      if (x1 == null) {\n        while (++i < n) {\n          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);\n        }\n        --i;\n      } else data.forEach(root.add);\n      xs = ys = data = d = null;\n      return root;\n    }\n    quadtree.x = function(_) {\n      return arguments.length ? (x = _, quadtree) : x;\n    };\n    quadtree.y = function(_) {\n      return arguments.length ? (y = _, quadtree) : y;\n    };\n    quadtree.extent = function(_) {\n      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];\n      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], \n      y2 = +_[1][1];\n      return quadtree;\n    };\n    quadtree.size = function(_) {\n      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];\n      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];\n      return quadtree;\n    };\n    return quadtree;\n  };\n  function d3_geom_quadtreeCompatX(d) {\n    return d.x;\n  }\n  function d3_geom_quadtreeCompatY(d) {\n    return d.y;\n  }\n  function d3_geom_quadtreeNode() {\n    return {\n      leaf: true,\n      nodes: [],\n      point: null,\n      x: null,\n      y: null\n    };\n  }\n  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {\n    if (!f(node, x1, y1, x2, y2)) {\n      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;\n      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);\n      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);\n      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);\n      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);\n    }\n  }\n  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {\n    var minDistance2 = Infinity, closestPoint;\n    (function find(node, x1, y1, x2, y2) {\n      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;\n      if (point = node.point) {\n        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;\n        if (distance2 < minDistance2) {\n          var distance = Math.sqrt(minDistance2 = distance2);\n          x0 = x - distance, y0 = y - distance;\n          x3 = x + distance, y3 = y + distance;\n          closestPoint = point;\n        }\n      }\n      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;\n      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {\n        if (node = children[i & 3]) switch (i & 3) {\n         case 0:\n          find(node, x1, y1, xm, ym);\n          break;\n\n         case 1:\n          find(node, xm, y1, x2, ym);\n          break;\n\n         case 2:\n          find(node, x1, ym, xm, y2);\n          break;\n\n         case 3:\n          find(node, xm, ym, x2, y2);\n          break;\n        }\n      }\n    })(root, x0, y0, x3, y3);\n    return closestPoint;\n  }\n  d3.interpolateRgb = d3_interpolateRgb;\n  function d3_interpolateRgb(a, b) {\n    a = d3.rgb(a);\n    b = d3.rgb(b);\n    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;\n    return function(t) {\n      return \"#\" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));\n    };\n  }\n  d3.interpolateObject = d3_interpolateObject;\n  function d3_interpolateObject(a, b) {\n    var i = {}, c = {}, k;\n    for (k in a) {\n      if (k in b) {\n        i[k] = d3_interpolate(a[k], b[k]);\n      } else {\n        c[k] = a[k];\n      }\n    }\n    for (k in b) {\n      if (!(k in a)) {\n        c[k] = b[k];\n      }\n    }\n    return function(t) {\n      for (k in i) c[k] = i[k](t);\n      return c;\n    };\n  }\n  d3.interpolateNumber = d3_interpolateNumber;\n  function d3_interpolateNumber(a, b) {\n    a = +a, b = +b;\n    return function(t) {\n      return a * (1 - t) + b * t;\n    };\n  }\n  d3.interpolateString = d3_interpolateString;\n  function d3_interpolateString(a, b) {\n    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];\n    a = a + \"\", b = b + \"\";\n    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {\n      if ((bs = bm.index) > bi) {\n        bs = b.slice(bi, bs);\n        if (s[i]) s[i] += bs; else s[++i] = bs;\n      }\n      if ((am = am[0]) === (bm = bm[0])) {\n        if (s[i]) s[i] += bm; else s[++i] = bm;\n      } else {\n        s[++i] = null;\n        q.push({\n          i: i,\n          x: d3_interpolateNumber(am, bm)\n        });\n      }\n      bi = d3_interpolate_numberB.lastIndex;\n    }\n    if (bi < b.length) {\n      bs = b.slice(bi);\n      if (s[i]) s[i] += bs; else s[++i] = bs;\n    }\n    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {\n      return b(t) + \"\";\n    }) : function() {\n      return b;\n    } : (b = q.length, function(t) {\n      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    });\n  }\n  var d3_interpolate_numberA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, \"g\");\n  d3.interpolate = d3_interpolate;\n  function d3_interpolate(a, b) {\n    var i = d3.interpolators.length, f;\n    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;\n    return f;\n  }\n  d3.interpolators = [ function(a, b) {\n    var t = typeof b;\n    return (t === \"string\" ? d3_rgb_names.has(b) || /^(#|rgb\\(|hsl\\()/.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === \"object\" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);\n  } ];\n  d3.interpolateArray = d3_interpolateArray;\n  function d3_interpolateArray(a, b) {\n    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;\n    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));\n    for (;i < na; ++i) c[i] = a[i];\n    for (;i < nb; ++i) c[i] = b[i];\n    return function(t) {\n      for (i = 0; i < n0; ++i) c[i] = x[i](t);\n      return c;\n    };\n  }\n  var d3_ease_default = function() {\n    return d3_identity;\n  };\n  var d3_ease = d3.map({\n    linear: d3_ease_default,\n    poly: d3_ease_poly,\n    quad: function() {\n      return d3_ease_quad;\n    },\n    cubic: function() {\n      return d3_ease_cubic;\n    },\n    sin: function() {\n      return d3_ease_sin;\n    },\n    exp: function() {\n      return d3_ease_exp;\n    },\n    circle: function() {\n      return d3_ease_circle;\n    },\n    elastic: d3_ease_elastic,\n    back: d3_ease_back,\n    bounce: function() {\n      return d3_ease_bounce;\n    }\n  });\n  var d3_ease_mode = d3.map({\n    \"in\": d3_identity,\n    out: d3_ease_reverse,\n    \"in-out\": d3_ease_reflect,\n    \"out-in\": function(f) {\n      return d3_ease_reflect(d3_ease_reverse(f));\n    }\n  });\n  d3.ease = function(name) {\n    var i = name.indexOf(\"-\"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : \"in\";\n    t = d3_ease.get(t) || d3_ease_default;\n    m = d3_ease_mode.get(m) || d3_identity;\n    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));\n  };\n  function d3_ease_clamp(f) {\n    return function(t) {\n      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);\n    };\n  }\n  function d3_ease_reverse(f) {\n    return function(t) {\n      return 1 - f(1 - t);\n    };\n  }\n  function d3_ease_reflect(f) {\n    return function(t) {\n      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));\n    };\n  }\n  function d3_ease_quad(t) {\n    return t * t;\n  }\n  function d3_ease_cubic(t) {\n    return t * t * t;\n  }\n  function d3_ease_cubicInOut(t) {\n    if (t <= 0) return 0;\n    if (t >= 1) return 1;\n    var t2 = t * t, t3 = t2 * t;\n    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);\n  }\n  function d3_ease_poly(e) {\n    return function(t) {\n      return Math.pow(t, e);\n    };\n  }\n  function d3_ease_sin(t) {\n    return 1 - Math.cos(t * halfπ);\n  }\n  function d3_ease_exp(t) {\n    return Math.pow(2, 10 * (t - 1));\n  }\n  function d3_ease_circle(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n  function d3_ease_elastic(a, p) {\n    var s;\n    if (arguments.length < 2) p = .45;\n    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;\n    return function(t) {\n      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);\n    };\n  }\n  function d3_ease_back(s) {\n    if (!s) s = 1.70158;\n    return function(t) {\n      return t * t * ((s + 1) * t - s);\n    };\n  }\n  function d3_ease_bounce(t) {\n    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;\n  }\n  d3.interpolateHcl = d3_interpolateHcl;\n  function d3_interpolateHcl(a, b) {\n    a = d3.hcl(a);\n    b = d3.hcl(b);\n    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;\n    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n    return function(t) {\n      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + \"\";\n    };\n  }\n  d3.interpolateHsl = d3_interpolateHsl;\n  function d3_interpolateHsl(a, b) {\n    a = d3.hsl(a);\n    b = d3.hsl(b);\n    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;\n    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;\n    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;\n    return function(t) {\n      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + \"\";\n    };\n  }\n  d3.interpolateLab = d3_interpolateLab;\n  function d3_interpolateLab(a, b) {\n    a = d3.lab(a);\n    b = d3.lab(b);\n    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;\n    return function(t) {\n      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + \"\";\n    };\n  }\n  d3.interpolateRound = d3_interpolateRound;\n  function d3_interpolateRound(a, b) {\n    b -= a;\n    return function(t) {\n      return Math.round(a + b * t);\n    };\n  }\n  d3.transform = function(string) {\n    var g = d3_document.createElementNS(d3.ns.prefix.svg, \"g\");\n    return (d3.transform = function(string) {\n      if (string != null) {\n        g.setAttribute(\"transform\", string);\n        var t = g.transform.baseVal.consolidate();\n      }\n      return new d3_transform(t ? t.matrix : d3_transformIdentity);\n    })(string);\n  };\n  function d3_transform(m) {\n    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;\n    if (r0[0] * r1[1] < r1[0] * r0[1]) {\n      r0[0] *= -1;\n      r0[1] *= -1;\n      kx *= -1;\n      kz *= -1;\n    }\n    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;\n    this.translate = [ m.e, m.f ];\n    this.scale = [ kx, ky ];\n    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;\n  }\n  d3_transform.prototype.toString = function() {\n    return \"translate(\" + this.translate + \")rotate(\" + this.rotate + \")skewX(\" + this.skew + \")scale(\" + this.scale + \")\";\n  };\n  function d3_transformDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n  }\n  function d3_transformNormalize(a) {\n    var k = Math.sqrt(d3_transformDot(a, a));\n    if (k) {\n      a[0] /= k;\n      a[1] /= k;\n    }\n    return k;\n  }\n  function d3_transformCombine(a, b, k) {\n    a[0] += k * b[0];\n    a[1] += k * b[1];\n    return a;\n  }\n  var d3_transformIdentity = {\n    a: 1,\n    b: 0,\n    c: 0,\n    d: 1,\n    e: 0,\n    f: 0\n  };\n  d3.interpolateTransform = d3_interpolateTransform;\n  function d3_interpolateTransform(a, b) {\n    var s = [], q = [], n, A = d3.transform(a), B = d3.transform(b), ta = A.translate, tb = B.translate, ra = A.rotate, rb = B.rotate, wa = A.skew, wb = B.skew, ka = A.scale, kb = B.scale;\n    if (ta[0] != tb[0] || ta[1] != tb[1]) {\n      s.push(\"translate(\", null, \",\", null, \")\");\n      q.push({\n        i: 1,\n        x: d3_interpolateNumber(ta[0], tb[0])\n      }, {\n        i: 3,\n        x: d3_interpolateNumber(ta[1], tb[1])\n      });\n    } else if (tb[0] || tb[1]) {\n      s.push(\"translate(\" + tb + \")\");\n    } else {\n      s.push(\"\");\n    }\n    if (ra != rb) {\n      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;\n      q.push({\n        i: s.push(s.pop() + \"rotate(\", null, \")\") - 2,\n        x: d3_interpolateNumber(ra, rb)\n      });\n    } else if (rb) {\n      s.push(s.pop() + \"rotate(\" + rb + \")\");\n    }\n    if (wa != wb) {\n      q.push({\n        i: s.push(s.pop() + \"skewX(\", null, \")\") - 2,\n        x: d3_interpolateNumber(wa, wb)\n      });\n    } else if (wb) {\n      s.push(s.pop() + \"skewX(\" + wb + \")\");\n    }\n    if (ka[0] != kb[0] || ka[1] != kb[1]) {\n      n = s.push(s.pop() + \"scale(\", null, \",\", null, \")\");\n      q.push({\n        i: n - 4,\n        x: d3_interpolateNumber(ka[0], kb[0])\n      }, {\n        i: n - 2,\n        x: d3_interpolateNumber(ka[1], kb[1])\n      });\n    } else if (kb[0] != 1 || kb[1] != 1) {\n      s.push(s.pop() + \"scale(\" + kb + \")\");\n    }\n    n = q.length;\n    return function(t) {\n      var i = -1, o;\n      while (++i < n) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    };\n  }\n  function d3_uninterpolateNumber(a, b) {\n    b = (b -= a = +a) || 1 / b;\n    return function(x) {\n      return (x - a) / b;\n    };\n  }\n  function d3_uninterpolateClamp(a, b) {\n    b = (b -= a = +a) || 1 / b;\n    return function(x) {\n      return Math.max(0, Math.min(1, (x - a) / b));\n    };\n  }\n  d3.layout = {};\n  d3.layout.bundle = function() {\n    return function(links) {\n      var paths = [], i = -1, n = links.length;\n      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));\n      return paths;\n    };\n  };\n  function d3_layout_bundlePath(link) {\n    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];\n    while (start !== lca) {\n      start = start.parent;\n      points.push(start);\n    }\n    var k = points.length;\n    while (end !== lca) {\n      points.splice(k, 0, end);\n      end = end.parent;\n    }\n    return points;\n  }\n  function d3_layout_bundleAncestors(node) {\n    var ancestors = [], parent = node.parent;\n    while (parent != null) {\n      ancestors.push(node);\n      node = parent;\n      parent = parent.parent;\n    }\n    ancestors.push(node);\n    return ancestors;\n  }\n  function d3_layout_bundleLeastCommonAncestor(a, b) {\n    if (a === b) return a;\n    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;\n    while (aNode === bNode) {\n      sharedNode = aNode;\n      aNode = aNodes.pop();\n      bNode = bNodes.pop();\n    }\n    return sharedNode;\n  }\n  d3.layout.chord = function() {\n    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;\n    function relayout() {\n      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;\n      chords = [];\n      groups = [];\n      k = 0, i = -1;\n      while (++i < n) {\n        x = 0, j = -1;\n        while (++j < n) {\n          x += matrix[i][j];\n        }\n        groupSums.push(x);\n        subgroupIndex.push(d3.range(n));\n        k += x;\n      }\n      if (sortGroups) {\n        groupIndex.sort(function(a, b) {\n          return sortGroups(groupSums[a], groupSums[b]);\n        });\n      }\n      if (sortSubgroups) {\n        subgroupIndex.forEach(function(d, i) {\n          d.sort(function(a, b) {\n            return sortSubgroups(matrix[i][a], matrix[i][b]);\n          });\n        });\n      }\n      k = (τ - padding * n) / k;\n      x = 0, i = -1;\n      while (++i < n) {\n        x0 = x, j = -1;\n        while (++j < n) {\n          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;\n          subgroups[di + \"-\" + dj] = {\n            index: di,\n            subindex: dj,\n            startAngle: a0,\n            endAngle: a1,\n            value: v\n          };\n        }\n        groups[di] = {\n          index: di,\n          startAngle: x0,\n          endAngle: x,\n          value: (x - x0) / k\n        };\n        x += padding;\n      }\n      i = -1;\n      while (++i < n) {\n        j = i - 1;\n        while (++j < n) {\n          var source = subgroups[i + \"-\" + j], target = subgroups[j + \"-\" + i];\n          if (source.value || target.value) {\n            chords.push(source.value < target.value ? {\n              source: target,\n              target: source\n            } : {\n              source: source,\n              target: target\n            });\n          }\n        }\n      }\n      if (sortChords) resort();\n    }\n    function resort() {\n      chords.sort(function(a, b) {\n        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);\n      });\n    }\n    chord.matrix = function(x) {\n      if (!arguments.length) return matrix;\n      n = (matrix = x) && matrix.length;\n      chords = groups = null;\n      return chord;\n    };\n    chord.padding = function(x) {\n      if (!arguments.length) return padding;\n      padding = x;\n      chords = groups = null;\n      return chord;\n    };\n    chord.sortGroups = function(x) {\n      if (!arguments.length) return sortGroups;\n      sortGroups = x;\n      chords = groups = null;\n      return chord;\n    };\n    chord.sortSubgroups = function(x) {\n      if (!arguments.length) return sortSubgroups;\n      sortSubgroups = x;\n      chords = null;\n      return chord;\n    };\n    chord.sortChords = function(x) {\n      if (!arguments.length) return sortChords;\n      sortChords = x;\n      if (chords) resort();\n      return chord;\n    };\n    chord.chords = function() {\n      if (!chords) relayout();\n      return chords;\n    };\n    chord.groups = function() {\n      if (!groups) relayout();\n      return groups;\n    };\n    return chord;\n  };\n  d3.layout.force = function() {\n    var force = {}, event = d3.dispatch(\"start\", \"tick\", \"end\"), size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;\n    function repulse(node) {\n      return function(quad, x1, _, x2) {\n        if (quad.point !== node) {\n          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;\n          if (dw * dw / theta2 < dn) {\n            if (dn < chargeDistance2) {\n              var k = quad.charge / dn;\n              node.px -= dx * k;\n              node.py -= dy * k;\n            }\n            return true;\n          }\n          if (quad.point && dn && dn < chargeDistance2) {\n            var k = quad.pointCharge / dn;\n            node.px -= dx * k;\n            node.py -= dy * k;\n          }\n        }\n        return !quad.charge;\n      };\n    }\n    force.tick = function() {\n      if ((alpha *= .99) < .005) {\n        event.end({\n          type: \"end\",\n          alpha: alpha = 0\n        });\n        return true;\n      }\n      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;\n      for (i = 0; i < m; ++i) {\n        o = links[i];\n        s = o.source;\n        t = o.target;\n        x = t.x - s.x;\n        y = t.y - s.y;\n        if (l = x * x + y * y) {\n          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;\n          x *= l;\n          y *= l;\n          t.x -= x * (k = s.weight / (t.weight + s.weight));\n          t.y -= y * k;\n          s.x += x * (k = 1 - k);\n          s.y += y * k;\n        }\n      }\n      if (k = alpha * gravity) {\n        x = size[0] / 2;\n        y = size[1] / 2;\n        i = -1;\n        if (k) while (++i < n) {\n          o = nodes[i];\n          o.x += (x - o.x) * k;\n          o.y += (y - o.y) * k;\n        }\n      }\n      if (charge) {\n        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);\n        i = -1;\n        while (++i < n) {\n          if (!(o = nodes[i]).fixed) {\n            q.visit(repulse(o));\n          }\n        }\n      }\n      i = -1;\n      while (++i < n) {\n        o = nodes[i];\n        if (o.fixed) {\n          o.x = o.px;\n          o.y = o.py;\n        } else {\n          o.x -= (o.px - (o.px = o.x)) * friction;\n          o.y -= (o.py - (o.py = o.y)) * friction;\n        }\n      }\n      event.tick({\n        type: \"tick\",\n        alpha: alpha\n      });\n    };\n    force.nodes = function(x) {\n      if (!arguments.length) return nodes;\n      nodes = x;\n      return force;\n    };\n    force.links = function(x) {\n      if (!arguments.length) return links;\n      links = x;\n      return force;\n    };\n    force.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return force;\n    };\n    force.linkDistance = function(x) {\n      if (!arguments.length) return linkDistance;\n      linkDistance = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.distance = force.linkDistance;\n    force.linkStrength = function(x) {\n      if (!arguments.length) return linkStrength;\n      linkStrength = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.friction = function(x) {\n      if (!arguments.length) return friction;\n      friction = +x;\n      return force;\n    };\n    force.charge = function(x) {\n      if (!arguments.length) return charge;\n      charge = typeof x === \"function\" ? x : +x;\n      return force;\n    };\n    force.chargeDistance = function(x) {\n      if (!arguments.length) return Math.sqrt(chargeDistance2);\n      chargeDistance2 = x * x;\n      return force;\n    };\n    force.gravity = function(x) {\n      if (!arguments.length) return gravity;\n      gravity = +x;\n      return force;\n    };\n    force.theta = function(x) {\n      if (!arguments.length) return Math.sqrt(theta2);\n      theta2 = x * x;\n      return force;\n    };\n    force.alpha = function(x) {\n      if (!arguments.length) return alpha;\n      x = +x;\n      if (alpha) {\n        if (x > 0) alpha = x; else alpha = 0;\n      } else if (x > 0) {\n        event.start({\n          type: \"start\",\n          alpha: alpha = x\n        });\n        d3.timer(force.tick);\n      }\n      return force;\n    };\n    force.start = function() {\n      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;\n      for (i = 0; i < n; ++i) {\n        (o = nodes[i]).index = i;\n        o.weight = 0;\n      }\n      for (i = 0; i < m; ++i) {\n        o = links[i];\n        if (typeof o.source == \"number\") o.source = nodes[o.source];\n        if (typeof o.target == \"number\") o.target = nodes[o.target];\n        ++o.source.weight;\n        ++o.target.weight;\n      }\n      for (i = 0; i < n; ++i) {\n        o = nodes[i];\n        if (isNaN(o.x)) o.x = position(\"x\", w);\n        if (isNaN(o.y)) o.y = position(\"y\", h);\n        if (isNaN(o.px)) o.px = o.x;\n        if (isNaN(o.py)) o.py = o.y;\n      }\n      distances = [];\n      if (typeof linkDistance === \"function\") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;\n      strengths = [];\n      if (typeof linkStrength === \"function\") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;\n      charges = [];\n      if (typeof charge === \"function\") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;\n      function position(dimension, size) {\n        if (!neighbors) {\n          neighbors = new Array(n);\n          for (j = 0; j < n; ++j) {\n            neighbors[j] = [];\n          }\n          for (j = 0; j < m; ++j) {\n            var o = links[j];\n            neighbors[o.source.index].push(o.target);\n            neighbors[o.target.index].push(o.source);\n          }\n        }\n        var candidates = neighbors[i], j = -1, l = candidates.length, x;\n        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;\n        return Math.random() * size;\n      }\n      return force.resume();\n    };\n    force.resume = function() {\n      return force.alpha(.1);\n    };\n    force.stop = function() {\n      return force.alpha(0);\n    };\n    force.drag = function() {\n      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on(\"dragstart.force\", d3_layout_forceDragstart).on(\"drag.force\", dragmove).on(\"dragend.force\", d3_layout_forceDragend);\n      if (!arguments.length) return drag;\n      this.on(\"mouseover.force\", d3_layout_forceMouseover).on(\"mouseout.force\", d3_layout_forceMouseout).call(drag);\n    };\n    function dragmove(d) {\n      d.px = d3.event.x, d.py = d3.event.y;\n      force.resume();\n    }\n    return d3.rebind(force, event, \"on\");\n  };\n  function d3_layout_forceDragstart(d) {\n    d.fixed |= 2;\n  }\n  function d3_layout_forceDragend(d) {\n    d.fixed &= ~6;\n  }\n  function d3_layout_forceMouseover(d) {\n    d.fixed |= 4;\n    d.px = d.x, d.py = d.y;\n  }\n  function d3_layout_forceMouseout(d) {\n    d.fixed &= ~4;\n  }\n  function d3_layout_forceAccumulate(quad, alpha, charges) {\n    var cx = 0, cy = 0;\n    quad.charge = 0;\n    if (!quad.leaf) {\n      var nodes = quad.nodes, n = nodes.length, i = -1, c;\n      while (++i < n) {\n        c = nodes[i];\n        if (c == null) continue;\n        d3_layout_forceAccumulate(c, alpha, charges);\n        quad.charge += c.charge;\n        cx += c.charge * c.cx;\n        cy += c.charge * c.cy;\n      }\n    }\n    if (quad.point) {\n      if (!quad.leaf) {\n        quad.point.x += Math.random() - .5;\n        quad.point.y += Math.random() - .5;\n      }\n      var k = alpha * charges[quad.point.index];\n      quad.charge += quad.pointCharge = k;\n      cx += k * quad.point.x;\n      cy += k * quad.point.y;\n    }\n    quad.cx = cx / quad.charge;\n    quad.cy = cy / quad.charge;\n  }\n  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;\n  d3.layout.hierarchy = function() {\n    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;\n    function hierarchy(root) {\n      var stack = [ root ], nodes = [], node;\n      root.depth = 0;\n      while ((node = stack.pop()) != null) {\n        nodes.push(node);\n        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {\n          var n, childs, child;\n          while (--n >= 0) {\n            stack.push(child = childs[n]);\n            child.parent = node;\n            child.depth = node.depth + 1;\n          }\n          if (value) node.value = 0;\n          node.children = childs;\n        } else {\n          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;\n          delete node.children;\n        }\n      }\n      d3_layout_hierarchyVisitAfter(root, function(node) {\n        var childs, parent;\n        if (sort && (childs = node.children)) childs.sort(sort);\n        if (value && (parent = node.parent)) parent.value += node.value;\n      });\n      return nodes;\n    }\n    hierarchy.sort = function(x) {\n      if (!arguments.length) return sort;\n      sort = x;\n      return hierarchy;\n    };\n    hierarchy.children = function(x) {\n      if (!arguments.length) return children;\n      children = x;\n      return hierarchy;\n    };\n    hierarchy.value = function(x) {\n      if (!arguments.length) return value;\n      value = x;\n      return hierarchy;\n    };\n    hierarchy.revalue = function(root) {\n      if (value) {\n        d3_layout_hierarchyVisitBefore(root, function(node) {\n          if (node.children) node.value = 0;\n        });\n        d3_layout_hierarchyVisitAfter(root, function(node) {\n          var parent;\n          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;\n          if (parent = node.parent) parent.value += node.value;\n        });\n      }\n      return root;\n    };\n    return hierarchy;\n  };\n  function d3_layout_hierarchyRebind(object, hierarchy) {\n    d3.rebind(object, hierarchy, \"sort\", \"children\", \"value\");\n    object.nodes = object;\n    object.links = d3_layout_hierarchyLinks;\n    return object;\n  }\n  function d3_layout_hierarchyVisitBefore(node, callback) {\n    var nodes = [ node ];\n    while ((node = nodes.pop()) != null) {\n      callback(node);\n      if ((children = node.children) && (n = children.length)) {\n        var n, children;\n        while (--n >= 0) nodes.push(children[n]);\n      }\n    }\n  }\n  function d3_layout_hierarchyVisitAfter(node, callback) {\n    var nodes = [ node ], nodes2 = [];\n    while ((node = nodes.pop()) != null) {\n      nodes2.push(node);\n      if ((children = node.children) && (n = children.length)) {\n        var i = -1, n, children;\n        while (++i < n) nodes.push(children[i]);\n      }\n    }\n    while ((node = nodes2.pop()) != null) {\n      callback(node);\n    }\n  }\n  function d3_layout_hierarchyChildren(d) {\n    return d.children;\n  }\n  function d3_layout_hierarchyValue(d) {\n    return d.value;\n  }\n  function d3_layout_hierarchySort(a, b) {\n    return b.value - a.value;\n  }\n  function d3_layout_hierarchyLinks(nodes) {\n    return d3.merge(nodes.map(function(parent) {\n      return (parent.children || []).map(function(child) {\n        return {\n          source: parent,\n          target: child\n        };\n      });\n    }));\n  }\n  d3.layout.partition = function() {\n    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];\n    function position(node, x, dx, dy) {\n      var children = node.children;\n      node.x = x;\n      node.y = node.depth * dy;\n      node.dx = dx;\n      node.dy = dy;\n      if (children && (n = children.length)) {\n        var i = -1, n, c, d;\n        dx = node.value ? dx / node.value : 0;\n        while (++i < n) {\n          position(c = children[i], x, d = c.value * dx, dy);\n          x += d;\n        }\n      }\n    }\n    function depth(node) {\n      var children = node.children, d = 0;\n      if (children && (n = children.length)) {\n        var i = -1, n;\n        while (++i < n) d = Math.max(d, depth(children[i]));\n      }\n      return 1 + d;\n    }\n    function partition(d, i) {\n      var nodes = hierarchy.call(this, d, i);\n      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));\n      return nodes;\n    }\n    partition.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return partition;\n    };\n    return d3_layout_hierarchyRebind(partition, hierarchy);\n  };\n  d3.layout.pie = function() {\n    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;\n    function pie(data) {\n      var n = data.length, values = data.map(function(d, i) {\n        return +value.call(pie, d, i);\n      }), a = +(typeof startAngle === \"function\" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === \"function\" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === \"function\" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), k = (da - n * pa) / d3.sum(values), index = d3.range(n), arcs = [], v;\n      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {\n        return values[j] - values[i];\n      } : function(i, j) {\n        return sort(data[i], data[j]);\n      });\n      index.forEach(function(i) {\n        arcs[i] = {\n          data: data[i],\n          value: v = values[i],\n          startAngle: a,\n          endAngle: a += v * k + pa,\n          padAngle: p\n        };\n      });\n      return arcs;\n    }\n    pie.value = function(_) {\n      if (!arguments.length) return value;\n      value = _;\n      return pie;\n    };\n    pie.sort = function(_) {\n      if (!arguments.length) return sort;\n      sort = _;\n      return pie;\n    };\n    pie.startAngle = function(_) {\n      if (!arguments.length) return startAngle;\n      startAngle = _;\n      return pie;\n    };\n    pie.endAngle = function(_) {\n      if (!arguments.length) return endAngle;\n      endAngle = _;\n      return pie;\n    };\n    pie.padAngle = function(_) {\n      if (!arguments.length) return padAngle;\n      padAngle = _;\n      return pie;\n    };\n    return pie;\n  };\n  var d3_layout_pieSortByValue = {};\n  d3.layout.stack = function() {\n    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;\n    function stack(data, index) {\n      if (!(n = data.length)) return data;\n      var series = data.map(function(d, i) {\n        return values.call(stack, d, i);\n      });\n      var points = series.map(function(d) {\n        return d.map(function(v, i) {\n          return [ x.call(stack, v, i), y.call(stack, v, i) ];\n        });\n      });\n      var orders = order.call(stack, points, index);\n      series = d3.permute(series, orders);\n      points = d3.permute(points, orders);\n      var offsets = offset.call(stack, points, index);\n      var m = series[0].length, n, i, j, o;\n      for (j = 0; j < m; ++j) {\n        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);\n        for (i = 1; i < n; ++i) {\n          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);\n        }\n      }\n      return data;\n    }\n    stack.values = function(x) {\n      if (!arguments.length) return values;\n      values = x;\n      return stack;\n    };\n    stack.order = function(x) {\n      if (!arguments.length) return order;\n      order = typeof x === \"function\" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;\n      return stack;\n    };\n    stack.offset = function(x) {\n      if (!arguments.length) return offset;\n      offset = typeof x === \"function\" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;\n      return stack;\n    };\n    stack.x = function(z) {\n      if (!arguments.length) return x;\n      x = z;\n      return stack;\n    };\n    stack.y = function(z) {\n      if (!arguments.length) return y;\n      y = z;\n      return stack;\n    };\n    stack.out = function(z) {\n      if (!arguments.length) return out;\n      out = z;\n      return stack;\n    };\n    return stack;\n  };\n  function d3_layout_stackX(d) {\n    return d.x;\n  }\n  function d3_layout_stackY(d) {\n    return d.y;\n  }\n  function d3_layout_stackOut(d, y0, y) {\n    d.y0 = y0;\n    d.y = y;\n  }\n  var d3_layout_stackOrders = d3.map({\n    \"inside-out\": function(data) {\n      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {\n        return max[a] - max[b];\n      }), top = 0, bottom = 0, tops = [], bottoms = [];\n      for (i = 0; i < n; ++i) {\n        j = index[i];\n        if (top < bottom) {\n          top += sums[j];\n          tops.push(j);\n        } else {\n          bottom += sums[j];\n          bottoms.push(j);\n        }\n      }\n      return bottoms.reverse().concat(tops);\n    },\n    reverse: function(data) {\n      return d3.range(data.length).reverse();\n    },\n    \"default\": d3_layout_stackOrderDefault\n  });\n  var d3_layout_stackOffsets = d3.map({\n    silhouette: function(data) {\n      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];\n      for (j = 0; j < m; ++j) {\n        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n        if (o > max) max = o;\n        sums.push(o);\n      }\n      for (j = 0; j < m; ++j) {\n        y0[j] = (max - sums[j]) / 2;\n      }\n      return y0;\n    },\n    wiggle: function(data) {\n      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];\n      y0[0] = o = o0 = 0;\n      for (j = 1; j < m; ++j) {\n        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];\n        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {\n          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {\n            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;\n          }\n          s2 += s3 * data[i][j][1];\n        }\n        y0[j] = o -= s1 ? s2 / s1 * dx : 0;\n        if (o < o0) o0 = o;\n      }\n      for (j = 0; j < m; ++j) y0[j] -= o0;\n      return y0;\n    },\n    expand: function(data) {\n      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];\n      for (j = 0; j < m; ++j) {\n        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];\n        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;\n      }\n      for (j = 0; j < m; ++j) y0[j] = 0;\n      return y0;\n    },\n    zero: d3_layout_stackOffsetZero\n  });\n  function d3_layout_stackOrderDefault(data) {\n    return d3.range(data.length);\n  }\n  function d3_layout_stackOffsetZero(data) {\n    var j = -1, m = data[0].length, y0 = [];\n    while (++j < m) y0[j] = 0;\n    return y0;\n  }\n  function d3_layout_stackMaxIndex(array) {\n    var i = 1, j = 0, v = array[0][1], k, n = array.length;\n    for (;i < n; ++i) {\n      if ((k = array[i][1]) > v) {\n        j = i;\n        v = k;\n      }\n    }\n    return j;\n  }\n  function d3_layout_stackReduceSum(d) {\n    return d.reduce(d3_layout_stackSum, 0);\n  }\n  function d3_layout_stackSum(p, d) {\n    return p + d[1];\n  }\n  d3.layout.histogram = function() {\n    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;\n    function histogram(data, i) {\n      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;\n      while (++i < m) {\n        bin = bins[i] = [];\n        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);\n        bin.y = 0;\n      }\n      if (m > 0) {\n        i = -1;\n        while (++i < n) {\n          x = values[i];\n          if (x >= range[0] && x <= range[1]) {\n            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];\n            bin.y += k;\n            bin.push(data[i]);\n          }\n        }\n      }\n      return bins;\n    }\n    histogram.value = function(x) {\n      if (!arguments.length) return valuer;\n      valuer = x;\n      return histogram;\n    };\n    histogram.range = function(x) {\n      if (!arguments.length) return ranger;\n      ranger = d3_functor(x);\n      return histogram;\n    };\n    histogram.bins = function(x) {\n      if (!arguments.length) return binner;\n      binner = typeof x === \"number\" ? function(range) {\n        return d3_layout_histogramBinFixed(range, x);\n      } : d3_functor(x);\n      return histogram;\n    };\n    histogram.frequency = function(x) {\n      if (!arguments.length) return frequency;\n      frequency = !!x;\n      return histogram;\n    };\n    return histogram;\n  };\n  function d3_layout_histogramBinSturges(range, values) {\n    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));\n  }\n  function d3_layout_histogramBinFixed(range, n) {\n    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];\n    while (++x <= n) f[x] = m * x + b;\n    return f;\n  }\n  function d3_layout_histogramRange(values) {\n    return [ d3.min(values), d3.max(values) ];\n  }\n  d3.layout.pack = function() {\n    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;\n    function pack(d, i) {\n      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === \"function\" ? radius : function() {\n        return radius;\n      };\n      root.x = root.y = 0;\n      d3_layout_hierarchyVisitAfter(root, function(d) {\n        d.r = +r(d.value);\n      });\n      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n      if (padding) {\n        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;\n        d3_layout_hierarchyVisitAfter(root, function(d) {\n          d.r += dr;\n        });\n        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);\n        d3_layout_hierarchyVisitAfter(root, function(d) {\n          d.r -= dr;\n        });\n      }\n      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));\n      return nodes;\n    }\n    pack.size = function(_) {\n      if (!arguments.length) return size;\n      size = _;\n      return pack;\n    };\n    pack.radius = function(_) {\n      if (!arguments.length) return radius;\n      radius = _ == null || typeof _ === \"function\" ? _ : +_;\n      return pack;\n    };\n    pack.padding = function(_) {\n      if (!arguments.length) return padding;\n      padding = +_;\n      return pack;\n    };\n    return d3_layout_hierarchyRebind(pack, hierarchy);\n  };\n  function d3_layout_packSort(a, b) {\n    return a.value - b.value;\n  }\n  function d3_layout_packInsert(a, b) {\n    var c = a._pack_next;\n    a._pack_next = b;\n    b._pack_prev = a;\n    b._pack_next = c;\n    c._pack_prev = b;\n  }\n  function d3_layout_packSplice(a, b) {\n    a._pack_next = b;\n    b._pack_prev = a;\n  }\n  function d3_layout_packIntersects(a, b) {\n    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;\n    return .999 * dr * dr > dx * dx + dy * dy;\n  }\n  function d3_layout_packSiblings(node) {\n    if (!(nodes = node.children) || !(n = nodes.length)) return;\n    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;\n    function bound(node) {\n      xMin = Math.min(node.x - node.r, xMin);\n      xMax = Math.max(node.x + node.r, xMax);\n      yMin = Math.min(node.y - node.r, yMin);\n      yMax = Math.max(node.y + node.r, yMax);\n    }\n    nodes.forEach(d3_layout_packLink);\n    a = nodes[0];\n    a.x = -a.r;\n    a.y = 0;\n    bound(a);\n    if (n > 1) {\n      b = nodes[1];\n      b.x = b.r;\n      b.y = 0;\n      bound(b);\n      if (n > 2) {\n        c = nodes[2];\n        d3_layout_packPlace(a, b, c);\n        bound(c);\n        d3_layout_packInsert(a, c);\n        a._pack_prev = c;\n        d3_layout_packInsert(c, b);\n        b = a._pack_next;\n        for (i = 3; i < n; i++) {\n          d3_layout_packPlace(a, b, c = nodes[i]);\n          var isect = 0, s1 = 1, s2 = 1;\n          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {\n            if (d3_layout_packIntersects(j, c)) {\n              isect = 1;\n              break;\n            }\n          }\n          if (isect == 1) {\n            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {\n              if (d3_layout_packIntersects(k, c)) {\n                break;\n              }\n            }\n          }\n          if (isect) {\n            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);\n            i--;\n          } else {\n            d3_layout_packInsert(a, c);\n            b = c;\n            bound(c);\n          }\n        }\n      }\n    }\n    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;\n    for (i = 0; i < n; i++) {\n      c = nodes[i];\n      c.x -= cx;\n      c.y -= cy;\n      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));\n    }\n    node.r = cr;\n    nodes.forEach(d3_layout_packUnlink);\n  }\n  function d3_layout_packLink(node) {\n    node._pack_next = node._pack_prev = node;\n  }\n  function d3_layout_packUnlink(node) {\n    delete node._pack_next;\n    delete node._pack_prev;\n  }\n  function d3_layout_packTransform(node, x, y, k) {\n    var children = node.children;\n    node.x = x += k * node.x;\n    node.y = y += k * node.y;\n    node.r *= k;\n    if (children) {\n      var i = -1, n = children.length;\n      while (++i < n) d3_layout_packTransform(children[i], x, y, k);\n    }\n  }\n  function d3_layout_packPlace(a, b, c) {\n    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;\n    if (db && (dx || dy)) {\n      var da = b.r + c.r, dc = dx * dx + dy * dy;\n      da *= da;\n      db *= db;\n      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);\n      c.x = a.x + x * dx + y * dy;\n      c.y = a.y + x * dy - y * dx;\n    } else {\n      c.x = a.x + db;\n      c.y = a.y;\n    }\n  }\n  d3.layout.tree = function() {\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;\n    function tree(d, i) {\n      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);\n      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;\n      d3_layout_hierarchyVisitBefore(root1, secondWalk);\n      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {\n        var left = root0, right = root0, bottom = root0;\n        d3_layout_hierarchyVisitBefore(root0, function(node) {\n          if (node.x < left.x) left = node;\n          if (node.x > right.x) right = node;\n          if (node.depth > bottom.depth) bottom = node;\n        });\n        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);\n        d3_layout_hierarchyVisitBefore(root0, function(node) {\n          node.x = (node.x + tx) * kx;\n          node.y = node.depth * ky;\n        });\n      }\n      return nodes;\n    }\n    function wrapTree(root0) {\n      var root1 = {\n        A: null,\n        children: [ root0 ]\n      }, queue = [ root1 ], node1;\n      while ((node1 = queue.pop()) != null) {\n        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {\n          queue.push((children[i] = child = {\n            _: children[i],\n            parent: node1,\n            children: (child = children[i].children) && child.slice() || [],\n            A: null,\n            a: null,\n            z: 0,\n            m: 0,\n            c: 0,\n            s: 0,\n            t: null,\n            i: i\n          }).a = child);\n        }\n      }\n      return root1.children[0];\n    }\n    function firstWalk(v) {\n      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;\n      if (children.length) {\n        d3_layout_treeShift(v);\n        var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n        if (w) {\n          v.z = w.z + separation(v._, w._);\n          v.m = v.z - midpoint;\n        } else {\n          v.z = midpoint;\n        }\n      } else if (w) {\n        v.z = w.z + separation(v._, w._);\n      }\n      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n    }\n    function secondWalk(v) {\n      v._.x = v.z + v.parent.m;\n      v.m += v.parent.m;\n    }\n    function apportion(v, w, ancestor) {\n      if (w) {\n        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;\n        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {\n          vom = d3_layout_treeLeft(vom);\n          vop = d3_layout_treeRight(vop);\n          vop.a = v;\n          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n          if (shift > 0) {\n            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);\n            sip += shift;\n            sop += shift;\n          }\n          sim += vim.m;\n          sip += vip.m;\n          som += vom.m;\n          sop += vop.m;\n        }\n        if (vim && !d3_layout_treeRight(vop)) {\n          vop.t = vim;\n          vop.m += sim - sop;\n        }\n        if (vip && !d3_layout_treeLeft(vom)) {\n          vom.t = vip;\n          vom.m += sip - som;\n          ancestor = v;\n        }\n      }\n      return ancestor;\n    }\n    function sizeNode(node) {\n      node.x *= size[0];\n      node.y = node.depth * size[1];\n    }\n    tree.separation = function(x) {\n      if (!arguments.length) return separation;\n      separation = x;\n      return tree;\n    };\n    tree.size = function(x) {\n      if (!arguments.length) return nodeSize ? null : size;\n      nodeSize = (size = x) == null ? sizeNode : null;\n      return tree;\n    };\n    tree.nodeSize = function(x) {\n      if (!arguments.length) return nodeSize ? size : null;\n      nodeSize = (size = x) == null ? null : sizeNode;\n      return tree;\n    };\n    return d3_layout_hierarchyRebind(tree, hierarchy);\n  };\n  function d3_layout_treeSeparation(a, b) {\n    return a.parent == b.parent ? 1 : 2;\n  }\n  function d3_layout_treeLeft(v) {\n    var children = v.children;\n    return children.length ? children[0] : v.t;\n  }\n  function d3_layout_treeRight(v) {\n    var children = v.children, n;\n    return (n = children.length) ? children[n - 1] : v.t;\n  }\n  function d3_layout_treeMove(wm, wp, shift) {\n    var change = shift / (wp.i - wm.i);\n    wp.c -= change;\n    wp.s += shift;\n    wm.c += change;\n    wp.z += shift;\n    wp.m += shift;\n  }\n  function d3_layout_treeShift(v) {\n    var shift = 0, change = 0, children = v.children, i = children.length, w;\n    while (--i >= 0) {\n      w = children[i];\n      w.z += shift;\n      w.m += shift;\n      shift += w.s + (change += w.c);\n    }\n  }\n  function d3_layout_treeAncestor(vim, v, ancestor) {\n    return vim.a.parent === v.parent ? vim.a : ancestor;\n  }\n  d3.layout.cluster = function() {\n    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;\n    function cluster(d, i) {\n      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;\n      d3_layout_hierarchyVisitAfter(root, function(node) {\n        var children = node.children;\n        if (children && children.length) {\n          node.x = d3_layout_clusterX(children);\n          node.y = d3_layout_clusterY(children);\n        } else {\n          node.x = previousNode ? x += separation(node, previousNode) : 0;\n          node.y = 0;\n          previousNode = node;\n        }\n      });\n      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;\n      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {\n        node.x = (node.x - root.x) * size[0];\n        node.y = (root.y - node.y) * size[1];\n      } : function(node) {\n        node.x = (node.x - x0) / (x1 - x0) * size[0];\n        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];\n      });\n      return nodes;\n    }\n    cluster.separation = function(x) {\n      if (!arguments.length) return separation;\n      separation = x;\n      return cluster;\n    };\n    cluster.size = function(x) {\n      if (!arguments.length) return nodeSize ? null : size;\n      nodeSize = (size = x) == null;\n      return cluster;\n    };\n    cluster.nodeSize = function(x) {\n      if (!arguments.length) return nodeSize ? size : null;\n      nodeSize = (size = x) != null;\n      return cluster;\n    };\n    return d3_layout_hierarchyRebind(cluster, hierarchy);\n  };\n  function d3_layout_clusterY(children) {\n    return 1 + d3.max(children, function(child) {\n      return child.y;\n    });\n  }\n  function d3_layout_clusterX(children) {\n    return children.reduce(function(x, child) {\n      return x + child.x;\n    }, 0) / children.length;\n  }\n  function d3_layout_clusterLeft(node) {\n    var children = node.children;\n    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;\n  }\n  function d3_layout_clusterRight(node) {\n    var children = node.children, n;\n    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;\n  }\n  d3.layout.treemap = function() {\n    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = \"squarify\", ratio = .5 * (1 + Math.sqrt(5));\n    function scale(children, k) {\n      var i = -1, n = children.length, child, area;\n      while (++i < n) {\n        area = (child = children[i]).value * (k < 0 ? 0 : k);\n        child.area = isNaN(area) || area <= 0 ? 0 : area;\n      }\n    }\n    function squarify(node) {\n      var children = node.children;\n      if (children && children.length) {\n        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === \"slice\" ? rect.dx : mode === \"dice\" ? rect.dy : mode === \"slice-dice\" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;\n        scale(remaining, rect.dx * rect.dy / node.value);\n        row.area = 0;\n        while ((n = remaining.length) > 0) {\n          row.push(child = remaining[n - 1]);\n          row.area += child.area;\n          if (mode !== \"squarify\" || (score = worst(row, u)) <= best) {\n            remaining.pop();\n            best = score;\n          } else {\n            row.area -= row.pop().area;\n            position(row, u, rect, false);\n            u = Math.min(rect.dx, rect.dy);\n            row.length = row.area = 0;\n            best = Infinity;\n          }\n        }\n        if (row.length) {\n          position(row, u, rect, true);\n          row.length = row.area = 0;\n        }\n        children.forEach(squarify);\n      }\n    }\n    function stickify(node) {\n      var children = node.children;\n      if (children && children.length) {\n        var rect = pad(node), remaining = children.slice(), child, row = [];\n        scale(remaining, rect.dx * rect.dy / node.value);\n        row.area = 0;\n        while (child = remaining.pop()) {\n          row.push(child);\n          row.area += child.area;\n          if (child.z != null) {\n            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);\n            row.length = row.area = 0;\n          }\n        }\n        children.forEach(stickify);\n      }\n    }\n    function worst(row, u) {\n      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;\n      while (++i < n) {\n        if (!(r = row[i].area)) continue;\n        if (r < rmin) rmin = r;\n        if (r > rmax) rmax = r;\n      }\n      s *= s;\n      u *= u;\n      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;\n    }\n    function position(row, u, rect, flush) {\n      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;\n      if (u == rect.dx) {\n        if (flush || v > rect.dy) v = rect.dy;\n        while (++i < n) {\n          o = row[i];\n          o.x = x;\n          o.y = y;\n          o.dy = v;\n          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);\n        }\n        o.z = true;\n        o.dx += rect.x + rect.dx - x;\n        rect.y += v;\n        rect.dy -= v;\n      } else {\n        if (flush || v > rect.dx) v = rect.dx;\n        while (++i < n) {\n          o = row[i];\n          o.x = x;\n          o.y = y;\n          o.dx = v;\n          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);\n        }\n        o.z = false;\n        o.dy += rect.y + rect.dy - y;\n        rect.x += v;\n        rect.dx -= v;\n      }\n    }\n    function treemap(d) {\n      var nodes = stickies || hierarchy(d), root = nodes[0];\n      root.x = 0;\n      root.y = 0;\n      root.dx = size[0];\n      root.dy = size[1];\n      if (stickies) hierarchy.revalue(root);\n      scale([ root ], root.dx * root.dy / root.value);\n      (stickies ? stickify : squarify)(root);\n      if (sticky) stickies = nodes;\n      return nodes;\n    }\n    treemap.size = function(x) {\n      if (!arguments.length) return size;\n      size = x;\n      return treemap;\n    };\n    treemap.padding = function(x) {\n      if (!arguments.length) return padding;\n      function padFunction(node) {\n        var p = x.call(treemap, node, node.depth);\n        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === \"number\" ? [ p, p, p, p ] : p);\n      }\n      function padConstant(node) {\n        return d3_layout_treemapPad(node, x);\n      }\n      var type;\n      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === \"function\" ? padFunction : type === \"number\" ? (x = [ x, x, x, x ], \n      padConstant) : padConstant;\n      return treemap;\n    };\n    treemap.round = function(x) {\n      if (!arguments.length) return round != Number;\n      round = x ? Math.round : Number;\n      return treemap;\n    };\n    treemap.sticky = function(x) {\n      if (!arguments.length) return sticky;\n      sticky = x;\n      stickies = null;\n      return treemap;\n    };\n    treemap.ratio = function(x) {\n      if (!arguments.length) return ratio;\n      ratio = x;\n      return treemap;\n    };\n    treemap.mode = function(x) {\n      if (!arguments.length) return mode;\n      mode = x + \"\";\n      return treemap;\n    };\n    return d3_layout_hierarchyRebind(treemap, hierarchy);\n  };\n  function d3_layout_treemapPadNull(node) {\n    return {\n      x: node.x,\n      y: node.y,\n      dx: node.dx,\n      dy: node.dy\n    };\n  }\n  function d3_layout_treemapPad(node, padding) {\n    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];\n    if (dx < 0) {\n      x += dx / 2;\n      dx = 0;\n    }\n    if (dy < 0) {\n      y += dy / 2;\n      dy = 0;\n    }\n    return {\n      x: x,\n      y: y,\n      dx: dx,\n      dy: dy\n    };\n  }\n  d3.random = {\n    normal: function(µ, σ) {\n      var n = arguments.length;\n      if (n < 2) σ = 1;\n      if (n < 1) µ = 0;\n      return function() {\n        var x, y, r;\n        do {\n          x = Math.random() * 2 - 1;\n          y = Math.random() * 2 - 1;\n          r = x * x + y * y;\n        } while (!r || r > 1);\n        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);\n      };\n    },\n    logNormal: function() {\n      var random = d3.random.normal.apply(d3, arguments);\n      return function() {\n        return Math.exp(random());\n      };\n    },\n    bates: function(m) {\n      var random = d3.random.irwinHall(m);\n      return function() {\n        return random() / m;\n      };\n    },\n    irwinHall: function(m) {\n      return function() {\n        for (var s = 0, j = 0; j < m; j++) s += Math.random();\n        return s;\n      };\n    }\n  };\n  d3.scale = {};\n  function d3_scaleExtent(domain) {\n    var start = domain[0], stop = domain[domain.length - 1];\n    return start < stop ? [ start, stop ] : [ stop, start ];\n  }\n  function d3_scaleRange(scale) {\n    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());\n  }\n  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {\n    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);\n    return function(x) {\n      return i(u(x));\n    };\n  }\n  function d3_scale_nice(domain, nice) {\n    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;\n    if (x1 < x0) {\n      dx = i0, i0 = i1, i1 = dx;\n      dx = x0, x0 = x1, x1 = dx;\n    }\n    domain[i0] = nice.floor(x0);\n    domain[i1] = nice.ceil(x1);\n    return domain;\n  }\n  function d3_scale_niceStep(step) {\n    return step ? {\n      floor: function(x) {\n        return Math.floor(x / step) * step;\n      },\n      ceil: function(x) {\n        return Math.ceil(x / step) * step;\n      }\n    } : d3_scale_niceIdentity;\n  }\n  var d3_scale_niceIdentity = {\n    floor: d3_identity,\n    ceil: d3_identity\n  };\n  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {\n    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;\n    if (domain[k] < domain[0]) {\n      domain = domain.slice().reverse();\n      range = range.slice().reverse();\n    }\n    while (++j <= k) {\n      u.push(uninterpolate(domain[j - 1], domain[j]));\n      i.push(interpolate(range[j - 1], range[j]));\n    }\n    return function(x) {\n      var j = d3.bisect(domain, x, 1, k) - 1;\n      return i[j](u[j](x));\n    };\n  }\n  d3.scale.linear = function() {\n    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);\n  };\n  function d3_scale_linear(domain, range, interpolate, clamp) {\n    var output, input;\n    function rescale() {\n      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;\n      output = linear(domain, range, uninterpolate, interpolate);\n      input = linear(range, domain, uninterpolate, d3_interpolate);\n      return scale;\n    }\n    function scale(x) {\n      return output(x);\n    }\n    scale.invert = function(y) {\n      return input(y);\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(Number);\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.rangeRound = function(x) {\n      return scale.range(x).interpolate(d3_interpolateRound);\n    };\n    scale.clamp = function(x) {\n      if (!arguments.length) return clamp;\n      clamp = x;\n      return rescale();\n    };\n    scale.interpolate = function(x) {\n      if (!arguments.length) return interpolate;\n      interpolate = x;\n      return rescale();\n    };\n    scale.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    scale.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    scale.nice = function(m) {\n      d3_scale_linearNice(domain, m);\n      return rescale();\n    };\n    scale.copy = function() {\n      return d3_scale_linear(domain, range, interpolate, clamp);\n    };\n    return rescale();\n  }\n  function d3_scale_linearRebind(scale, linear) {\n    return d3.rebind(scale, linear, \"range\", \"rangeRound\", \"interpolate\", \"clamp\");\n  }\n  function d3_scale_linearNice(domain, m) {\n    return d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));\n  }\n  function d3_scale_linearTickRange(domain, m) {\n    if (m == null) m = 10;\n    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;\n    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;\n    extent[0] = Math.ceil(extent[0] / step) * step;\n    extent[1] = Math.floor(extent[1] / step) * step + step * .5;\n    extent[2] = step;\n    return extent;\n  }\n  function d3_scale_linearTicks(domain, m) {\n    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));\n  }\n  function d3_scale_linearTickFormat(domain, m, format) {\n    var range = d3_scale_linearTickRange(domain, m);\n    if (format) {\n      var match = d3_format_re.exec(format);\n      match.shift();\n      if (match[8] === \"s\") {\n        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));\n        if (!match[7]) match[7] = \".\" + d3_scale_linearPrecision(prefix.scale(range[2]));\n        match[8] = \"f\";\n        format = d3.format(match.join(\"\"));\n        return function(d) {\n          return format(prefix.scale(d)) + prefix.symbol;\n        };\n      }\n      if (!match[7]) match[7] = \".\" + d3_scale_linearFormatPrecision(match[8], range);\n      format = match.join(\"\");\n    } else {\n      format = \",.\" + d3_scale_linearPrecision(range[2]) + \"f\";\n    }\n    return d3.format(format);\n  }\n  var d3_scale_linearFormatSignificant = {\n    s: 1,\n    g: 1,\n    p: 1,\n    r: 1,\n    e: 1\n  };\n  function d3_scale_linearPrecision(value) {\n    return -Math.floor(Math.log(value) / Math.LN10 + .01);\n  }\n  function d3_scale_linearFormatPrecision(type, range) {\n    var p = d3_scale_linearPrecision(range[2]);\n    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== \"e\") : p - (type === \"%\") * 2;\n  }\n  d3.scale.log = function() {\n    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);\n  };\n  function d3_scale_log(linear, base, positive, domain) {\n    function log(x) {\n      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);\n    }\n    function pow(x) {\n      return positive ? Math.pow(base, x) : -Math.pow(base, -x);\n    }\n    function scale(x) {\n      return linear(log(x));\n    }\n    scale.invert = function(x) {\n      return pow(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      positive = x[0] >= 0;\n      linear.domain((domain = x.map(Number)).map(log));\n      return scale;\n    };\n    scale.base = function(_) {\n      if (!arguments.length) return base;\n      base = +_;\n      linear.domain(domain.map(log));\n      return scale;\n    };\n    scale.nice = function() {\n      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);\n      linear.domain(niced);\n      domain = niced.map(pow);\n      return scale;\n    };\n    scale.ticks = function() {\n      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;\n      if (isFinite(j - i)) {\n        if (positive) {\n          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);\n          ticks.push(pow(i));\n        } else {\n          ticks.push(pow(i));\n          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);\n        }\n        for (i = 0; ticks[i] < u; i++) {}\n        for (j = ticks.length; ticks[j - 1] > v; j--) {}\n        ticks = ticks.slice(i, j);\n      }\n      return ticks;\n    };\n    scale.tickFormat = function(n, format) {\n      if (!arguments.length) return d3_scale_logFormat;\n      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== \"function\") format = d3.format(format);\n      var k = Math.max(.1, n / scale.ticks().length), f = positive ? (e = 1e-12, Math.ceil) : (e = -1e-12, \n      Math.floor), e;\n      return function(d) {\n        return d / pow(f(log(d) + e)) <= k ? format(d) : \"\";\n      };\n    };\n    scale.copy = function() {\n      return d3_scale_log(linear.copy(), base, positive, domain);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  var d3_scale_logFormat = d3.format(\".0e\"), d3_scale_logNiceNegative = {\n    floor: function(x) {\n      return -Math.ceil(-x);\n    },\n    ceil: function(x) {\n      return -Math.floor(-x);\n    }\n  };\n  d3.scale.pow = function() {\n    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);\n  };\n  function d3_scale_pow(linear, exponent, domain) {\n    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);\n    function scale(x) {\n      return linear(powp(x));\n    }\n    scale.invert = function(x) {\n      return powb(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      linear.domain((domain = x.map(Number)).map(powp));\n      return scale;\n    };\n    scale.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    scale.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    scale.nice = function(m) {\n      return scale.domain(d3_scale_linearNice(domain, m));\n    };\n    scale.exponent = function(x) {\n      if (!arguments.length) return exponent;\n      powp = d3_scale_powPow(exponent = x);\n      powb = d3_scale_powPow(1 / exponent);\n      linear.domain(domain.map(powp));\n      return scale;\n    };\n    scale.copy = function() {\n      return d3_scale_pow(linear.copy(), exponent, domain);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  function d3_scale_powPow(e) {\n    return function(x) {\n      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);\n    };\n  }\n  d3.scale.sqrt = function() {\n    return d3.scale.pow().exponent(.5);\n  };\n  d3.scale.ordinal = function() {\n    return d3_scale_ordinal([], {\n      t: \"range\",\n      a: [ [] ]\n    });\n  };\n  function d3_scale_ordinal(domain, ranger) {\n    var index, range, rangeBand;\n    function scale(x) {\n      return range[((index.get(x) || (ranger.t === \"range\" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];\n    }\n    function steps(start, step) {\n      return d3.range(domain.length).map(function(i) {\n        return start + step * i;\n      });\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = [];\n      index = new d3_Map();\n      var i = -1, n = x.length, xi;\n      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));\n      return scale[ranger.t].apply(scale, ranger.a);\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      rangeBand = 0;\n      ranger = {\n        t: \"range\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangePoints = function(x, padding) {\n      if (arguments.length < 2) padding = 0;\n      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, \n      0) : (stop - start) / (domain.length - 1 + padding);\n      range = steps(start + step * padding / 2, step);\n      rangeBand = 0;\n      ranger = {\n        t: \"rangePoints\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeRoundPoints = function(x, padding) {\n      if (arguments.length < 2) padding = 0;\n      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), \n      0) : (stop - start) / (domain.length - 1 + padding) | 0;\n      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);\n      rangeBand = 0;\n      ranger = {\n        t: \"rangeRoundPoints\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeBands = function(x, padding, outerPadding) {\n      if (arguments.length < 2) padding = 0;\n      if (arguments.length < 3) outerPadding = padding;\n      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);\n      range = steps(start + step * outerPadding, step);\n      if (reverse) range.reverse();\n      rangeBand = step * (1 - padding);\n      ranger = {\n        t: \"rangeBands\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeRoundBands = function(x, padding, outerPadding) {\n      if (arguments.length < 2) padding = 0;\n      if (arguments.length < 3) outerPadding = padding;\n      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));\n      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);\n      if (reverse) range.reverse();\n      rangeBand = Math.round(step * (1 - padding));\n      ranger = {\n        t: \"rangeRoundBands\",\n        a: arguments\n      };\n      return scale;\n    };\n    scale.rangeBand = function() {\n      return rangeBand;\n    };\n    scale.rangeExtent = function() {\n      return d3_scaleExtent(ranger.a[0]);\n    };\n    scale.copy = function() {\n      return d3_scale_ordinal(domain, ranger);\n    };\n    return scale.domain(domain);\n  }\n  d3.scale.category10 = function() {\n    return d3.scale.ordinal().range(d3_category10);\n  };\n  d3.scale.category20 = function() {\n    return d3.scale.ordinal().range(d3_category20);\n  };\n  d3.scale.category20b = function() {\n    return d3.scale.ordinal().range(d3_category20b);\n  };\n  d3.scale.category20c = function() {\n    return d3.scale.ordinal().range(d3_category20c);\n  };\n  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);\n  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);\n  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);\n  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);\n  d3.scale.quantile = function() {\n    return d3_scale_quantile([], []);\n  };\n  function d3_scale_quantile(domain, range) {\n    var thresholds;\n    function rescale() {\n      var k = 0, q = range.length;\n      thresholds = [];\n      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);\n      return scale;\n    }\n    function scale(x) {\n      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.quantiles = function() {\n      return thresholds;\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];\n    };\n    scale.copy = function() {\n      return d3_scale_quantile(domain, range);\n    };\n    return rescale();\n  }\n  d3.scale.quantize = function() {\n    return d3_scale_quantize(0, 1, [ 0, 1 ]);\n  };\n  function d3_scale_quantize(x0, x1, range) {\n    var kx, i;\n    function scale(x) {\n      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];\n    }\n    function rescale() {\n      kx = range.length / (x1 - x0);\n      i = range.length - 1;\n      return scale;\n    }\n    scale.domain = function(x) {\n      if (!arguments.length) return [ x0, x1 ];\n      x0 = +x[0];\n      x1 = +x[x.length - 1];\n      return rescale();\n    };\n    scale.range = function(x) {\n      if (!arguments.length) return range;\n      range = x;\n      return rescale();\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      y = y < 0 ? NaN : y / kx + x0;\n      return [ y, y + 1 / kx ];\n    };\n    scale.copy = function() {\n      return d3_scale_quantize(x0, x1, range);\n    };\n    return rescale();\n  }\n  d3.scale.threshold = function() {\n    return d3_scale_threshold([ .5 ], [ 0, 1 ]);\n  };\n  function d3_scale_threshold(domain, range) {\n    function scale(x) {\n      if (x <= x) return range[d3.bisect(domain, x)];\n    }\n    scale.domain = function(_) {\n      if (!arguments.length) return domain;\n      domain = _;\n      return scale;\n    };\n    scale.range = function(_) {\n      if (!arguments.length) return range;\n      range = _;\n      return scale;\n    };\n    scale.invertExtent = function(y) {\n      y = range.indexOf(y);\n      return [ domain[y - 1], domain[y] ];\n    };\n    scale.copy = function() {\n      return d3_scale_threshold(domain, range);\n    };\n    return scale;\n  }\n  d3.scale.identity = function() {\n    return d3_scale_identity([ 0, 1 ]);\n  };\n  function d3_scale_identity(domain) {\n    function identity(x) {\n      return +x;\n    }\n    identity.invert = identity;\n    identity.domain = identity.range = function(x) {\n      if (!arguments.length) return domain;\n      domain = x.map(identity);\n      return identity;\n    };\n    identity.ticks = function(m) {\n      return d3_scale_linearTicks(domain, m);\n    };\n    identity.tickFormat = function(m, format) {\n      return d3_scale_linearTickFormat(domain, m, format);\n    };\n    identity.copy = function() {\n      return d3_scale_identity(domain);\n    };\n    return identity;\n  }\n  d3.svg = {};\n  function d3_zero() {\n    return 0;\n  }\n  d3.svg.arc = function() {\n    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;\n    function arc() {\n      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;\n      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;\n      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : \"\") + \"Z\";\n      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];\n      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {\n        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);\n        if (!cw) p1 *= -1;\n        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));\n        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));\n      }\n      if (r1) {\n        x0 = r1 * Math.cos(a0 + p1);\n        y0 = r1 * Math.sin(a0 + p1);\n        x1 = r1 * Math.cos(a1 - p1);\n        y1 = r1 * Math.sin(a1 - p1);\n        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;\n        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {\n          var h1 = (a0 + a1) / 2;\n          x0 = r1 * Math.cos(h1);\n          y0 = r1 * Math.sin(h1);\n          x1 = y1 = null;\n        }\n      } else {\n        x0 = y0 = 0;\n      }\n      if (r0) {\n        x2 = r0 * Math.cos(a1 - p0);\n        y2 = r0 * Math.sin(a1 - p0);\n        x3 = r0 * Math.cos(a0 + p0);\n        y3 = r0 * Math.sin(a0 + p0);\n        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;\n        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {\n          var h0 = (a0 + a1) / 2;\n          x2 = r0 * Math.cos(h0);\n          y2 = r0 * Math.sin(h0);\n          x3 = y3 = null;\n        }\n      } else {\n        x2 = y2 = 0;\n      }\n      if ((rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {\n        cr = r0 < r1 ^ cw ? 0 : 1;\n        var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n        if (x1 != null) {\n          var rc1 = Math.min(rc, (r1 - lc) / (kc + 1)), t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);\n          if (rc === rc1) {\n            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t30[1], \"A\", r1, \",\", r1, \" 0 \", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), \",\", cw, \" \", t12[1], \"A\", rc1, \",\", rc1, \" 0 0,\", cr, \" \", t12[0]);\n          } else {\n            path.push(\"M\", t30[0], \"A\", rc1, \",\", rc1, \" 0 1,\", cr, \" \", t12[0]);\n          }\n        } else {\n          path.push(\"M\", x0, \",\", y0);\n        }\n        if (x3 != null) {\n          var rc0 = Math.min(rc, (r0 - lc) / (kc - 1)), t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);\n          if (rc === rc0) {\n            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t21[1], \"A\", r0, \",\", r0, \" 0 \", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), \",\", 1 - cw, \" \", t03[1], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n          } else {\n            path.push(\"L\", t21[0], \"A\", rc0, \",\", rc0, \" 0 0,\", cr, \" \", t03[0]);\n          }\n        } else {\n          path.push(\"L\", x2, \",\", y2);\n        }\n      } else {\n        path.push(\"M\", x0, \",\", y0);\n        if (x1 != null) path.push(\"A\", r1, \",\", r1, \" 0 \", l1, \",\", cw, \" \", x1, \",\", y1);\n        path.push(\"L\", x2, \",\", y2);\n        if (x3 != null) path.push(\"A\", r0, \",\", r0, \" 0 \", l0, \",\", 1 - cw, \" \", x3, \",\", y3);\n      }\n      path.push(\"Z\");\n      return path.join(\"\");\n    }\n    function circleSegment(r1, cw) {\n      return \"M0,\" + r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + -r1 + \"A\" + r1 + \",\" + r1 + \" 0 1,\" + cw + \" 0,\" + r1;\n    }\n    arc.innerRadius = function(v) {\n      if (!arguments.length) return innerRadius;\n      innerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.outerRadius = function(v) {\n      if (!arguments.length) return outerRadius;\n      outerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.cornerRadius = function(v) {\n      if (!arguments.length) return cornerRadius;\n      cornerRadius = d3_functor(v);\n      return arc;\n    };\n    arc.padRadius = function(v) {\n      if (!arguments.length) return padRadius;\n      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);\n      return arc;\n    };\n    arc.startAngle = function(v) {\n      if (!arguments.length) return startAngle;\n      startAngle = d3_functor(v);\n      return arc;\n    };\n    arc.endAngle = function(v) {\n      if (!arguments.length) return endAngle;\n      endAngle = d3_functor(v);\n      return arc;\n    };\n    arc.padAngle = function(v) {\n      if (!arguments.length) return padAngle;\n      padAngle = d3_functor(v);\n      return arc;\n    };\n    arc.centroid = function() {\n      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;\n      return [ Math.cos(a) * r, Math.sin(a) * r ];\n    };\n    return arc;\n  };\n  var d3_svg_arcAuto = \"auto\";\n  function d3_svg_arcInnerRadius(d) {\n    return d.innerRadius;\n  }\n  function d3_svg_arcOuterRadius(d) {\n    return d.outerRadius;\n  }\n  function d3_svg_arcStartAngle(d) {\n    return d.startAngle;\n  }\n  function d3_svg_arcEndAngle(d) {\n    return d.endAngle;\n  }\n  function d3_svg_arcPadAngle(d) {\n    return d && d.padAngle;\n  }\n  function d3_svg_arcSweep(x0, y0, x1, y1) {\n    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;\n  }\n  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {\n    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(r * r * d2 - D * D), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;\n    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];\n  }\n  function d3_svg_line(projection) {\n    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;\n    function line(data) {\n      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);\n      function segment() {\n        segments.push(\"M\", interpolate(projection(points), tension));\n      }\n      while (++i < n) {\n        if (defined.call(this, d = data[i], i)) {\n          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);\n        } else if (points.length) {\n          segment();\n          points = [];\n        }\n      }\n      if (points.length) segment();\n      return segments.length ? segments.join(\"\") : null;\n    }\n    line.x = function(_) {\n      if (!arguments.length) return x;\n      x = _;\n      return line;\n    };\n    line.y = function(_) {\n      if (!arguments.length) return y;\n      y = _;\n      return line;\n    };\n    line.defined = function(_) {\n      if (!arguments.length) return defined;\n      defined = _;\n      return line;\n    };\n    line.interpolate = function(_) {\n      if (!arguments.length) return interpolateKey;\n      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      return line;\n    };\n    line.tension = function(_) {\n      if (!arguments.length) return tension;\n      tension = _;\n      return line;\n    };\n    return line;\n  }\n  d3.svg.line = function() {\n    return d3_svg_line(d3_identity);\n  };\n  var d3_svg_lineInterpolators = d3.map({\n    linear: d3_svg_lineLinear,\n    \"linear-closed\": d3_svg_lineLinearClosed,\n    step: d3_svg_lineStep,\n    \"step-before\": d3_svg_lineStepBefore,\n    \"step-after\": d3_svg_lineStepAfter,\n    basis: d3_svg_lineBasis,\n    \"basis-open\": d3_svg_lineBasisOpen,\n    \"basis-closed\": d3_svg_lineBasisClosed,\n    bundle: d3_svg_lineBundle,\n    cardinal: d3_svg_lineCardinal,\n    \"cardinal-open\": d3_svg_lineCardinalOpen,\n    \"cardinal-closed\": d3_svg_lineCardinalClosed,\n    monotone: d3_svg_lineMonotone\n  });\n  d3_svg_lineInterpolators.forEach(function(key, value) {\n    value.key = key;\n    value.closed = /-closed$/.test(key);\n  });\n  function d3_svg_lineLinear(points) {\n    return points.join(\"L\");\n  }\n  function d3_svg_lineLinearClosed(points) {\n    return d3_svg_lineLinear(points) + \"Z\";\n  }\n  function d3_svg_lineStep(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"H\", (p[0] + (p = points[i])[0]) / 2, \"V\", p[1]);\n    if (n > 1) path.push(\"H\", p[0]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineStepBefore(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"V\", (p = points[i])[1], \"H\", p[0]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineStepAfter(points) {\n    var i = 0, n = points.length, p = points[0], path = [ p[0], \",\", p[1] ];\n    while (++i < n) path.push(\"H\", (p = points[i])[0], \"V\", p[1]);\n    return path.join(\"\");\n  }\n  function d3_svg_lineCardinalOpen(points, tension) {\n    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));\n  }\n  function d3_svg_lineCardinalClosed(points, tension) {\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), \n    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));\n  }\n  function d3_svg_lineCardinal(points, tension) {\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));\n  }\n  function d3_svg_lineHermite(points, tangents) {\n    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {\n      return d3_svg_lineLinear(points);\n    }\n    var quad = points.length != tangents.length, path = \"\", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;\n    if (quad) {\n      path += \"Q\" + (p[0] - t0[0] * 2 / 3) + \",\" + (p[1] - t0[1] * 2 / 3) + \",\" + p[0] + \",\" + p[1];\n      p0 = points[1];\n      pi = 2;\n    }\n    if (tangents.length > 1) {\n      t = tangents[1];\n      p = points[pi];\n      pi++;\n      path += \"C\" + (p0[0] + t0[0]) + \",\" + (p0[1] + t0[1]) + \",\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n      for (var i = 2; i < tangents.length; i++, pi++) {\n        p = points[pi];\n        t = tangents[i];\n        path += \"S\" + (p[0] - t[0]) + \",\" + (p[1] - t[1]) + \",\" + p[0] + \",\" + p[1];\n      }\n    }\n    if (quad) {\n      var lp = points[pi];\n      path += \"Q\" + (p[0] + t[0] * 2 / 3) + \",\" + (p[1] + t[1] * 2 / 3) + \",\" + lp[0] + \",\" + lp[1];\n    }\n    return path;\n  }\n  function d3_svg_lineCardinalTangents(points, tension) {\n    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;\n    while (++i < n) {\n      p0 = p1;\n      p1 = p2;\n      p2 = points[i];\n      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);\n    }\n    return tangents;\n  }\n  function d3_svg_lineBasis(points) {\n    if (points.length < 3) return d3_svg_lineLinear(points);\n    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, \",\", y0, \"L\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n    points.push(points[n - 1]);\n    while (++i <= n) {\n      pi = points[i];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    points.pop();\n    path.push(\"L\", pi);\n    return path.join(\"\");\n  }\n  function d3_svg_lineBasisOpen(points) {\n    if (points.length < 4) return d3_svg_lineLinear(points);\n    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];\n    while (++i < 3) {\n      pi = points[i];\n      px.push(pi[0]);\n      py.push(pi[1]);\n    }\n    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + \",\" + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));\n    --i;\n    while (++i < n) {\n      pi = points[i];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    return path.join(\"\");\n  }\n  function d3_svg_lineBasisClosed(points) {\n    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];\n    while (++i < 4) {\n      pi = points[i % n];\n      px.push(pi[0]);\n      py.push(pi[1]);\n    }\n    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];\n    --i;\n    while (++i < m) {\n      pi = points[i % n];\n      px.shift();\n      px.push(pi[0]);\n      py.shift();\n      py.push(pi[1]);\n      d3_svg_lineBasisBezier(path, px, py);\n    }\n    return path.join(\"\");\n  }\n  function d3_svg_lineBundle(points, tension) {\n    var n = points.length - 1;\n    if (n) {\n      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;\n      while (++i <= n) {\n        p = points[i];\n        t = i / n;\n        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);\n        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);\n      }\n    }\n    return d3_svg_lineBasis(points);\n  }\n  function d3_svg_lineDot4(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n  }\n  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];\n  function d3_svg_lineBasisBezier(path, x, y) {\n    path.push(\"C\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), \",\", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));\n  }\n  function d3_svg_lineSlope(p0, p1) {\n    return (p1[1] - p0[1]) / (p1[0] - p0[0]);\n  }\n  function d3_svg_lineFiniteDifferences(points) {\n    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);\n    while (++i < j) {\n      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;\n    }\n    m[i] = d;\n    return m;\n  }\n  function d3_svg_lineMonotoneTangents(points) {\n    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;\n    while (++i < j) {\n      d = d3_svg_lineSlope(points[i], points[i + 1]);\n      if (abs(d) < ε) {\n        m[i] = m[i + 1] = 0;\n      } else {\n        a = m[i] / d;\n        b = m[i + 1] / d;\n        s = a * a + b * b;\n        if (s > 9) {\n          s = d * 3 / Math.sqrt(s);\n          m[i] = s * a;\n          m[i + 1] = s * b;\n        }\n      }\n    }\n    i = -1;\n    while (++i <= j) {\n      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));\n      tangents.push([ s || 0, m[i] * s || 0 ]);\n    }\n    return tangents;\n  }\n  function d3_svg_lineMonotone(points) {\n    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));\n  }\n  d3.svg.line.radial = function() {\n    var line = d3_svg_line(d3_svg_lineRadial);\n    line.radius = line.x, delete line.x;\n    line.angle = line.y, delete line.y;\n    return line;\n  };\n  function d3_svg_lineRadial(points) {\n    var point, i = -1, n = points.length, r, a;\n    while (++i < n) {\n      point = points[i];\n      r = point[0];\n      a = point[1] - halfπ;\n      point[0] = r * Math.cos(a);\n      point[1] = r * Math.sin(a);\n    }\n    return points;\n  }\n  function d3_svg_area(projection) {\n    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = \"L\", tension = .7;\n    function area(data) {\n      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {\n        return x;\n      } : d3_functor(x1), fy1 = y0 === y1 ? function() {\n        return y;\n      } : d3_functor(y1), x, y;\n      function segment() {\n        segments.push(\"M\", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), \"Z\");\n      }\n      while (++i < n) {\n        if (defined.call(this, d = data[i], i)) {\n          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);\n          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);\n        } else if (points0.length) {\n          segment();\n          points0 = [];\n          points1 = [];\n        }\n      }\n      if (points0.length) segment();\n      return segments.length ? segments.join(\"\") : null;\n    }\n    area.x = function(_) {\n      if (!arguments.length) return x1;\n      x0 = x1 = _;\n      return area;\n    };\n    area.x0 = function(_) {\n      if (!arguments.length) return x0;\n      x0 = _;\n      return area;\n    };\n    area.x1 = function(_) {\n      if (!arguments.length) return x1;\n      x1 = _;\n      return area;\n    };\n    area.y = function(_) {\n      if (!arguments.length) return y1;\n      y0 = y1 = _;\n      return area;\n    };\n    area.y0 = function(_) {\n      if (!arguments.length) return y0;\n      y0 = _;\n      return area;\n    };\n    area.y1 = function(_) {\n      if (!arguments.length) return y1;\n      y1 = _;\n      return area;\n    };\n    area.defined = function(_) {\n      if (!arguments.length) return defined;\n      defined = _;\n      return area;\n    };\n    area.interpolate = function(_) {\n      if (!arguments.length) return interpolateKey;\n      if (typeof _ === \"function\") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;\n      interpolateReverse = interpolate.reverse || interpolate;\n      L = interpolate.closed ? \"M\" : \"L\";\n      return area;\n    };\n    area.tension = function(_) {\n      if (!arguments.length) return tension;\n      tension = _;\n      return area;\n    };\n    return area;\n  }\n  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;\n  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;\n  d3.svg.area = function() {\n    return d3_svg_area(d3_identity);\n  };\n  d3.svg.area.radial = function() {\n    var area = d3_svg_area(d3_svg_lineRadial);\n    area.radius = area.x, delete area.x;\n    area.innerRadius = area.x0, delete area.x0;\n    area.outerRadius = area.x1, delete area.x1;\n    area.angle = area.y, delete area.y;\n    area.startAngle = area.y0, delete area.y0;\n    area.endAngle = area.y1, delete area.y1;\n    return area;\n  };\n  d3.svg.chord = function() {\n    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;\n    function chord(d, i) {\n      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);\n      return \"M\" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + \"Z\";\n    }\n    function subgroup(self, f, d, i) {\n      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;\n      return {\n        r: r,\n        a0: a0,\n        a1: a1,\n        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],\n        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]\n      };\n    }\n    function equals(a, b) {\n      return a.a0 == b.a0 && a.a1 == b.a1;\n    }\n    function arc(r, p, a) {\n      return \"A\" + r + \",\" + r + \" 0 \" + +(a > π) + \",1 \" + p;\n    }\n    function curve(r0, p0, r1, p1) {\n      return \"Q 0,0 \" + p1;\n    }\n    chord.radius = function(v) {\n      if (!arguments.length) return radius;\n      radius = d3_functor(v);\n      return chord;\n    };\n    chord.source = function(v) {\n      if (!arguments.length) return source;\n      source = d3_functor(v);\n      return chord;\n    };\n    chord.target = function(v) {\n      if (!arguments.length) return target;\n      target = d3_functor(v);\n      return chord;\n    };\n    chord.startAngle = function(v) {\n      if (!arguments.length) return startAngle;\n      startAngle = d3_functor(v);\n      return chord;\n    };\n    chord.endAngle = function(v) {\n      if (!arguments.length) return endAngle;\n      endAngle = d3_functor(v);\n      return chord;\n    };\n    return chord;\n  };\n  function d3_svg_chordRadius(d) {\n    return d.radius;\n  }\n  d3.svg.diagonal = function() {\n    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;\n    function diagonal(d, i) {\n      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {\n        x: p0.x,\n        y: m\n      }, {\n        x: p3.x,\n        y: m\n      }, p3 ];\n      p = p.map(projection);\n      return \"M\" + p[0] + \"C\" + p[1] + \" \" + p[2] + \" \" + p[3];\n    }\n    diagonal.source = function(x) {\n      if (!arguments.length) return source;\n      source = d3_functor(x);\n      return diagonal;\n    };\n    diagonal.target = function(x) {\n      if (!arguments.length) return target;\n      target = d3_functor(x);\n      return diagonal;\n    };\n    diagonal.projection = function(x) {\n      if (!arguments.length) return projection;\n      projection = x;\n      return diagonal;\n    };\n    return diagonal;\n  };\n  function d3_svg_diagonalProjection(d) {\n    return [ d.x, d.y ];\n  }\n  d3.svg.diagonal.radial = function() {\n    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;\n    diagonal.projection = function(x) {\n      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;\n    };\n    return diagonal;\n  };\n  function d3_svg_diagonalRadialProjection(projection) {\n    return function() {\n      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;\n      return [ r * Math.cos(a), r * Math.sin(a) ];\n    };\n  }\n  d3.svg.symbol = function() {\n    var type = d3_svg_symbolType, size = d3_svg_symbolSize;\n    function symbol(d, i) {\n      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));\n    }\n    symbol.type = function(x) {\n      if (!arguments.length) return type;\n      type = d3_functor(x);\n      return symbol;\n    };\n    symbol.size = function(x) {\n      if (!arguments.length) return size;\n      size = d3_functor(x);\n      return symbol;\n    };\n    return symbol;\n  };\n  function d3_svg_symbolSize() {\n    return 64;\n  }\n  function d3_svg_symbolType() {\n    return \"circle\";\n  }\n  function d3_svg_symbolCircle(size) {\n    var r = Math.sqrt(size / π);\n    return \"M0,\" + r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + -r + \"A\" + r + \",\" + r + \" 0 1,1 0,\" + r + \"Z\";\n  }\n  var d3_svg_symbols = d3.map({\n    circle: d3_svg_symbolCircle,\n    cross: function(size) {\n      var r = Math.sqrt(size / 5) / 2;\n      return \"M\" + -3 * r + \",\" + -r + \"H\" + -r + \"V\" + -3 * r + \"H\" + r + \"V\" + -r + \"H\" + 3 * r + \"V\" + r + \"H\" + r + \"V\" + 3 * r + \"H\" + -r + \"V\" + r + \"H\" + -3 * r + \"Z\";\n    },\n    diamond: function(size) {\n      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;\n      return \"M0,\" + -ry + \"L\" + rx + \",0\" + \" 0,\" + ry + \" \" + -rx + \",0\" + \"Z\";\n    },\n    square: function(size) {\n      var r = Math.sqrt(size) / 2;\n      return \"M\" + -r + \",\" + -r + \"L\" + r + \",\" + -r + \" \" + r + \",\" + r + \" \" + -r + \",\" + r + \"Z\";\n    },\n    \"triangle-down\": function(size) {\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n      return \"M0,\" + ry + \"L\" + rx + \",\" + -ry + \" \" + -rx + \",\" + -ry + \"Z\";\n    },\n    \"triangle-up\": function(size) {\n      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;\n      return \"M0,\" + -ry + \"L\" + rx + \",\" + ry + \" \" + -rx + \",\" + ry + \"Z\";\n    }\n  });\n  d3.svg.symbolTypes = d3_svg_symbols.keys();\n  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);\n  d3_selectionPrototype.transition = function(name) {\n    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {\n      time: Date.now(),\n      ease: d3_ease_cubicInOut,\n      delay: 0,\n      duration: 250\n    };\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);\n        subgroup.push(node);\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_selectionPrototype.interrupt = function(name) {\n    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));\n  };\n  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());\n  function d3_selection_interruptNS(ns) {\n    return function() {\n      var lock, active;\n      if ((lock = this[ns]) && (active = lock[lock.active])) {\n        if (--lock.count) delete lock[lock.active]; else delete this[ns];\n        lock.active += .5;\n        active.event && active.event.interrupt.call(this, this.__data__, active.index);\n      }\n    };\n  }\n  function d3_transition(groups, ns, id) {\n    d3_subclass(groups, d3_transitionPrototype);\n    groups.namespace = ns;\n    groups.id = id;\n    return groups;\n  }\n  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;\n  d3_transitionPrototype.call = d3_selectionPrototype.call;\n  d3_transitionPrototype.empty = d3_selectionPrototype.empty;\n  d3_transitionPrototype.node = d3_selectionPrototype.node;\n  d3_transitionPrototype.size = d3_selectionPrototype.size;\n  d3.transition = function(selection, name) {\n    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);\n  };\n  d3.transition.prototype = d3_transitionPrototype;\n  d3_transitionPrototype.select = function(selector) {\n    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;\n    selector = d3_selection_selector(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {\n          if (\"__data__\" in node) subnode.__data__ = node.__data__;\n          d3_transitionNode(subnode, i, ns, id, node[ns][id]);\n          subgroup.push(subnode);\n        } else {\n          subgroup.push(null);\n        }\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_transitionPrototype.selectAll = function(selector) {\n    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;\n    selector = d3_selection_selectorAll(selector);\n    for (var j = -1, m = this.length; ++j < m; ) {\n      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {\n        if (node = group[i]) {\n          transition = node[ns][id];\n          subnodes = selector.call(node, node.__data__, i, j);\n          subgroups.push(subgroup = []);\n          for (var k = -1, o = subnodes.length; ++k < o; ) {\n            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);\n            subgroup.push(subnode);\n          }\n        }\n      }\n    }\n    return d3_transition(subgroups, ns, id);\n  };\n  d3_transitionPrototype.filter = function(filter) {\n    var subgroups = [], subgroup, group, node;\n    if (typeof filter !== \"function\") filter = d3_selection_filter(filter);\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {\n          subgroup.push(node);\n        }\n      }\n    }\n    return d3_transition(subgroups, this.namespace, this.id);\n  };\n  d3_transitionPrototype.tween = function(name, tween) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);\n    return d3_selection_each(this, tween == null ? function(node) {\n      node[ns][id].tween.remove(name);\n    } : function(node) {\n      node[ns][id].tween.set(name, tween);\n    });\n  };\n  function d3_transition_tween(groups, name, value, tween) {\n    var id = groups.id, ns = groups.namespace;\n    return d3_selection_each(groups, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));\n    } : (value = tween(value), function(node) {\n      node[ns][id].tween.set(name, value);\n    }));\n  }\n  d3_transitionPrototype.attr = function(nameNS, value) {\n    if (arguments.length < 2) {\n      for (value in nameNS) this.attr(value, nameNS[value]);\n      return this;\n    }\n    var interpolate = nameNS == \"transform\" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);\n    function attrNull() {\n      this.removeAttribute(name);\n    }\n    function attrNullNS() {\n      this.removeAttributeNS(name.space, name.local);\n    }\n    function attrTween(b) {\n      return b == null ? attrNull : (b += \"\", function() {\n        var a = this.getAttribute(name), i;\n        return a !== b && (i = interpolate(a, b), function(t) {\n          this.setAttribute(name, i(t));\n        });\n      });\n    }\n    function attrTweenNS(b) {\n      return b == null ? attrNullNS : (b += \"\", function() {\n        var a = this.getAttributeNS(name.space, name.local), i;\n        return a !== b && (i = interpolate(a, b), function(t) {\n          this.setAttributeNS(name.space, name.local, i(t));\n        });\n      });\n    }\n    return d3_transition_tween(this, \"attr.\" + nameNS, value, name.local ? attrTweenNS : attrTween);\n  };\n  d3_transitionPrototype.attrTween = function(nameNS, tween) {\n    var name = d3.ns.qualify(nameNS);\n    function attrTween(d, i) {\n      var f = tween.call(this, d, i, this.getAttribute(name));\n      return f && function(t) {\n        this.setAttribute(name, f(t));\n      };\n    }\n    function attrTweenNS(d, i) {\n      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));\n      return f && function(t) {\n        this.setAttributeNS(name.space, name.local, f(t));\n      };\n    }\n    return this.tween(\"attr.\" + nameNS, name.local ? attrTweenNS : attrTween);\n  };\n  d3_transitionPrototype.style = function(name, value, priority) {\n    var n = arguments.length;\n    if (n < 3) {\n      if (typeof name !== \"string\") {\n        if (n < 2) value = \"\";\n        for (priority in name) this.style(priority, name[priority], value);\n        return this;\n      }\n      priority = \"\";\n    }\n    function styleNull() {\n      this.style.removeProperty(name);\n    }\n    function styleString(b) {\n      return b == null ? styleNull : (b += \"\", function() {\n        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;\n        return a !== b && (i = d3_interpolate(a, b), function(t) {\n          this.style.setProperty(name, i(t), priority);\n        });\n      });\n    }\n    return d3_transition_tween(this, \"style.\" + name, value, styleString);\n  };\n  d3_transitionPrototype.styleTween = function(name, tween, priority) {\n    if (arguments.length < 3) priority = \"\";\n    function styleTween(d, i) {\n      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));\n      return f && function(t) {\n        this.style.setProperty(name, f(t), priority);\n      };\n    }\n    return this.tween(\"style.\" + name, styleTween);\n  };\n  d3_transitionPrototype.text = function(value) {\n    return d3_transition_tween(this, \"text\", value, d3_transition_text);\n  };\n  function d3_transition_text(b) {\n    if (b == null) b = \"\";\n    return function() {\n      this.textContent = b;\n    };\n  }\n  d3_transitionPrototype.remove = function() {\n    var ns = this.namespace;\n    return this.each(\"end.transition\", function() {\n      var p;\n      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);\n    });\n  };\n  d3_transitionPrototype.ease = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].ease;\n    if (typeof value !== \"function\") value = d3.ease.apply(d3, arguments);\n    return d3_selection_each(this, function(node) {\n      node[ns][id].ease = value;\n    });\n  };\n  d3_transitionPrototype.delay = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].delay;\n    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].delay = +value.call(node, node.__data__, i, j);\n    } : (value = +value, function(node) {\n      node[ns][id].delay = value;\n    }));\n  };\n  d3_transitionPrototype.duration = function(value) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 1) return this.node()[ns][id].duration;\n    return d3_selection_each(this, typeof value === \"function\" ? function(node, i, j) {\n      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));\n    } : (value = Math.max(1, value), function(node) {\n      node[ns][id].duration = value;\n    }));\n  };\n  d3_transitionPrototype.each = function(type, listener) {\n    var id = this.id, ns = this.namespace;\n    if (arguments.length < 2) {\n      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;\n      try {\n        d3_transitionInheritId = id;\n        d3_selection_each(this, function(node, i, j) {\n          d3_transitionInherit = node[ns][id];\n          type.call(node, node.__data__, i, j);\n        });\n      } finally {\n        d3_transitionInherit = inherit;\n        d3_transitionInheritId = inheritId;\n      }\n    } else {\n      d3_selection_each(this, function(node) {\n        var transition = node[ns][id];\n        (transition.event || (transition.event = d3.dispatch(\"start\", \"end\", \"interrupt\"))).on(type, listener);\n      });\n    }\n    return this;\n  };\n  d3_transitionPrototype.transition = function() {\n    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;\n    for (var j = 0, m = this.length; j < m; j++) {\n      subgroups.push(subgroup = []);\n      for (var group = this[j], i = 0, n = group.length; i < n; i++) {\n        if (node = group[i]) {\n          transition = node[ns][id0];\n          d3_transitionNode(node, i, ns, id1, {\n            time: transition.time,\n            ease: transition.ease,\n            delay: transition.delay + transition.duration,\n            duration: transition.duration\n          });\n        }\n        subgroup.push(node);\n      }\n    }\n    return d3_transition(subgroups, ns, id1);\n  };\n  function d3_transitionNamespace(name) {\n    return name == null ? \"__transition__\" : \"__transition_\" + name + \"__\";\n  }\n  function d3_transitionNode(node, i, ns, id, inherit) {\n    var lock = node[ns] || (node[ns] = {\n      active: 0,\n      count: 0\n    }), transition = lock[id];\n    if (!transition) {\n      var time = inherit.time;\n      transition = lock[id] = {\n        tween: new d3_Map(),\n        time: time,\n        delay: inherit.delay,\n        duration: inherit.duration,\n        ease: inherit.ease,\n        index: i\n      };\n      inherit = null;\n      ++lock.count;\n      d3.timer(function(elapsed) {\n        var delay = transition.delay, duration, ease, timer = d3_timer_active, tweened = [];\n        timer.t = delay + time;\n        if (delay <= elapsed) return start(elapsed - delay);\n        timer.c = start;\n        function start(elapsed) {\n          if (lock.active > id) return stop();\n          var active = lock[lock.active];\n          if (active) {\n            --lock.count;\n            delete lock[lock.active];\n            active.event && active.event.interrupt.call(node, node.__data__, active.index);\n          }\n          lock.active = id;\n          transition.event && transition.event.start.call(node, node.__data__, i);\n          transition.tween.forEach(function(key, value) {\n            if (value = value.call(node, node.__data__, i)) {\n              tweened.push(value);\n            }\n          });\n          ease = transition.ease;\n          duration = transition.duration;\n          d3.timer(function() {\n            timer.c = tick(elapsed || 1) ? d3_true : tick;\n            return 1;\n          }, 0, time);\n        }\n        function tick(elapsed) {\n          if (lock.active !== id) return 1;\n          var t = elapsed / duration, e = ease(t), n = tweened.length;\n          while (n > 0) {\n            tweened[--n].call(node, e);\n          }\n          if (t >= 1) {\n            transition.event && transition.event.end.call(node, node.__data__, i);\n            return stop();\n          }\n        }\n        function stop() {\n          if (--lock.count) delete lock[id]; else delete node[ns];\n          return 1;\n        }\n      }, 0, time);\n    }\n  }\n  d3.svg.axis = function() {\n    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;\n    function axis(g) {\n      g.each(function() {\n        var g = d3.select(this);\n        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();\n        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(\".tick\").data(ticks, scale1), tickEnter = tick.enter().insert(\"g\", \".domain\").attr(\"class\", \"tick\").style(\"opacity\", ε), tickExit = d3.transition(tick.exit()).style(\"opacity\", ε).remove(), tickUpdate = d3.transition(tick.order()).style(\"opacity\", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;\n        var range = d3_scaleRange(scale1), path = g.selectAll(\".domain\").data([ 0 ]), pathUpdate = (path.enter().append(\"path\").attr(\"class\", \"domain\"), \n        d3.transition(path));\n        tickEnter.append(\"line\");\n        tickEnter.append(\"text\");\n        var lineEnter = tickEnter.select(\"line\"), lineUpdate = tickUpdate.select(\"line\"), text = tick.select(\"text\").text(tickFormat), textEnter = tickEnter.select(\"text\"), textUpdate = tickUpdate.select(\"text\"), sign = orient === \"top\" || orient === \"left\" ? -1 : 1, x1, x2, y1, y2;\n        if (orient === \"bottom\" || orient === \"top\") {\n          tickTransform = d3_svg_axisX, x1 = \"x\", y1 = \"y\", x2 = \"x2\", y2 = \"y2\";\n          text.attr(\"dy\", sign < 0 ? \"0em\" : \".71em\").style(\"text-anchor\", \"middle\");\n          pathUpdate.attr(\"d\", \"M\" + range[0] + \",\" + sign * outerTickSize + \"V0H\" + range[1] + \"V\" + sign * outerTickSize);\n        } else {\n          tickTransform = d3_svg_axisY, x1 = \"y\", y1 = \"x\", x2 = \"y2\", y2 = \"x2\";\n          text.attr(\"dy\", \".32em\").style(\"text-anchor\", sign < 0 ? \"end\" : \"start\");\n          pathUpdate.attr(\"d\", \"M\" + sign * outerTickSize + \",\" + range[0] + \"H0V\" + range[1] + \"H\" + sign * outerTickSize);\n        }\n        lineEnter.attr(y2, sign * innerTickSize);\n        textEnter.attr(y1, sign * tickSpacing);\n        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);\n        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);\n        if (scale1.rangeBand) {\n          var x = scale1, dx = x.rangeBand() / 2;\n          scale0 = scale1 = function(d) {\n            return x(d) + dx;\n          };\n        } else if (scale0.rangeBand) {\n          scale0 = scale1;\n        } else {\n          tickExit.call(tickTransform, scale1, scale0);\n        }\n        tickEnter.call(tickTransform, scale0, scale1);\n        tickUpdate.call(tickTransform, scale1, scale1);\n      });\n    }\n    axis.scale = function(x) {\n      if (!arguments.length) return scale;\n      scale = x;\n      return axis;\n    };\n    axis.orient = function(x) {\n      if (!arguments.length) return orient;\n      orient = x in d3_svg_axisOrients ? x + \"\" : d3_svg_axisDefaultOrient;\n      return axis;\n    };\n    axis.ticks = function() {\n      if (!arguments.length) return tickArguments_;\n      tickArguments_ = arguments;\n      return axis;\n    };\n    axis.tickValues = function(x) {\n      if (!arguments.length) return tickValues;\n      tickValues = x;\n      return axis;\n    };\n    axis.tickFormat = function(x) {\n      if (!arguments.length) return tickFormat_;\n      tickFormat_ = x;\n      return axis;\n    };\n    axis.tickSize = function(x) {\n      var n = arguments.length;\n      if (!n) return innerTickSize;\n      innerTickSize = +x;\n      outerTickSize = +arguments[n - 1];\n      return axis;\n    };\n    axis.innerTickSize = function(x) {\n      if (!arguments.length) return innerTickSize;\n      innerTickSize = +x;\n      return axis;\n    };\n    axis.outerTickSize = function(x) {\n      if (!arguments.length) return outerTickSize;\n      outerTickSize = +x;\n      return axis;\n    };\n    axis.tickPadding = function(x) {\n      if (!arguments.length) return tickPadding;\n      tickPadding = +x;\n      return axis;\n    };\n    axis.tickSubdivide = function() {\n      return arguments.length && axis;\n    };\n    return axis;\n  };\n  var d3_svg_axisDefaultOrient = \"bottom\", d3_svg_axisOrients = {\n    top: 1,\n    right: 1,\n    bottom: 1,\n    left: 1\n  };\n  function d3_svg_axisX(selection, x0, x1) {\n    selection.attr(\"transform\", function(d) {\n      var v0 = x0(d);\n      return \"translate(\" + (isFinite(v0) ? v0 : x1(d)) + \",0)\";\n    });\n  }\n  function d3_svg_axisY(selection, y0, y1) {\n    selection.attr(\"transform\", function(d) {\n      var v0 = y0(d);\n      return \"translate(0,\" + (isFinite(v0) ? v0 : y1(d)) + \")\";\n    });\n  }\n  d3.svg.brush = function() {\n    var event = d3_eventDispatch(brush, \"brushstart\", \"brush\", \"brushend\"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];\n    function brush(g) {\n      g.each(function() {\n        var g = d3.select(this).style(\"pointer-events\", \"all\").style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\").on(\"mousedown.brush\", brushstart).on(\"touchstart.brush\", brushstart);\n        var background = g.selectAll(\".background\").data([ 0 ]);\n        background.enter().append(\"rect\").attr(\"class\", \"background\").style(\"visibility\", \"hidden\").style(\"cursor\", \"crosshair\");\n        g.selectAll(\".extent\").data([ 0 ]).enter().append(\"rect\").attr(\"class\", \"extent\").style(\"cursor\", \"move\");\n        var resize = g.selectAll(\".resize\").data(resizes, d3_identity);\n        resize.exit().remove();\n        resize.enter().append(\"g\").attr(\"class\", function(d) {\n          return \"resize \" + d;\n        }).style(\"cursor\", function(d) {\n          return d3_svg_brushCursor[d];\n        }).append(\"rect\").attr(\"x\", function(d) {\n          return /[ew]$/.test(d) ? -3 : null;\n        }).attr(\"y\", function(d) {\n          return /^[ns]/.test(d) ? -3 : null;\n        }).attr(\"width\", 6).attr(\"height\", 6).style(\"visibility\", \"hidden\");\n        resize.style(\"display\", brush.empty() ? \"none\" : null);\n        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;\n        if (x) {\n          range = d3_scaleRange(x);\n          backgroundUpdate.attr(\"x\", range[0]).attr(\"width\", range[1] - range[0]);\n          redrawX(gUpdate);\n        }\n        if (y) {\n          range = d3_scaleRange(y);\n          backgroundUpdate.attr(\"y\", range[0]).attr(\"height\", range[1] - range[0]);\n          redrawY(gUpdate);\n        }\n        redraw(gUpdate);\n      });\n    }\n    brush.event = function(g) {\n      g.each(function() {\n        var event_ = event.of(this, arguments), extent1 = {\n          x: xExtent,\n          y: yExtent,\n          i: xExtentDomain,\n          j: yExtentDomain\n        }, extent0 = this.__chart__ || extent1;\n        this.__chart__ = extent1;\n        if (d3_transitionInheritId) {\n          d3.select(this).transition().each(\"start.brush\", function() {\n            xExtentDomain = extent0.i;\n            yExtentDomain = extent0.j;\n            xExtent = extent0.x;\n            yExtent = extent0.y;\n            event_({\n              type: \"brushstart\"\n            });\n          }).tween(\"brush:brush\", function() {\n            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);\n            xExtentDomain = yExtentDomain = null;\n            return function(t) {\n              xExtent = extent1.x = xi(t);\n              yExtent = extent1.y = yi(t);\n              event_({\n                type: \"brush\",\n                mode: \"resize\"\n              });\n            };\n          }).each(\"end.brush\", function() {\n            xExtentDomain = extent1.i;\n            yExtentDomain = extent1.j;\n            event_({\n              type: \"brush\",\n              mode: \"resize\"\n            });\n            event_({\n              type: \"brushend\"\n            });\n          });\n        } else {\n          event_({\n            type: \"brushstart\"\n          });\n          event_({\n            type: \"brush\",\n            mode: \"resize\"\n          });\n          event_({\n            type: \"brushend\"\n          });\n        }\n      });\n    };\n    function redraw(g) {\n      g.selectAll(\".resize\").attr(\"transform\", function(d) {\n        return \"translate(\" + xExtent[+/e$/.test(d)] + \",\" + yExtent[+/^s/.test(d)] + \")\";\n      });\n    }\n    function redrawX(g) {\n      g.select(\".extent\").attr(\"x\", xExtent[0]);\n      g.selectAll(\".extent,.n>rect,.s>rect\").attr(\"width\", xExtent[1] - xExtent[0]);\n    }\n    function redrawY(g) {\n      g.select(\".extent\").attr(\"y\", yExtent[0]);\n      g.selectAll(\".extent,.e>rect,.w>rect\").attr(\"height\", yExtent[1] - yExtent[0]);\n    }\n    function brushstart() {\n      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed(\"extent\"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;\n      var w = d3.select(d3_window(target)).on(\"keydown.brush\", keydown).on(\"keyup.brush\", keyup);\n      if (d3.event.changedTouches) {\n        w.on(\"touchmove.brush\", brushmove).on(\"touchend.brush\", brushend);\n      } else {\n        w.on(\"mousemove.brush\", brushmove).on(\"mouseup.brush\", brushend);\n      }\n      g.interrupt().selectAll(\"*\").interrupt();\n      if (dragging) {\n        origin[0] = xExtent[0] - origin[0];\n        origin[1] = yExtent[0] - origin[1];\n      } else if (resizing) {\n        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);\n        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];\n        origin[0] = xExtent[ex];\n        origin[1] = yExtent[ey];\n      } else if (d3.event.altKey) center = origin.slice();\n      g.style(\"pointer-events\", \"none\").selectAll(\".resize\").style(\"display\", null);\n      d3.select(\"body\").style(\"cursor\", eventTarget.style(\"cursor\"));\n      event_({\n        type: \"brushstart\"\n      });\n      brushmove();\n      function keydown() {\n        if (d3.event.keyCode == 32) {\n          if (!dragging) {\n            center = null;\n            origin[0] -= xExtent[1];\n            origin[1] -= yExtent[1];\n            dragging = 2;\n          }\n          d3_eventPreventDefault();\n        }\n      }\n      function keyup() {\n        if (d3.event.keyCode == 32 && dragging == 2) {\n          origin[0] += xExtent[1];\n          origin[1] += yExtent[1];\n          dragging = 0;\n          d3_eventPreventDefault();\n        }\n      }\n      function brushmove() {\n        var point = d3.mouse(target), moved = false;\n        if (offset) {\n          point[0] += offset[0];\n          point[1] += offset[1];\n        }\n        if (!dragging) {\n          if (d3.event.altKey) {\n            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];\n            origin[0] = xExtent[+(point[0] < center[0])];\n            origin[1] = yExtent[+(point[1] < center[1])];\n          } else center = null;\n        }\n        if (resizingX && move1(point, x, 0)) {\n          redrawX(g);\n          moved = true;\n        }\n        if (resizingY && move1(point, y, 1)) {\n          redrawY(g);\n          moved = true;\n        }\n        if (moved) {\n          redraw(g);\n          event_({\n            type: \"brush\",\n            mode: dragging ? \"move\" : \"resize\"\n          });\n        }\n      }\n      function move1(point, scale, i) {\n        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;\n        if (dragging) {\n          r0 -= position;\n          r1 -= size + position;\n        }\n        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];\n        if (dragging) {\n          max = (min += position) + size;\n        } else {\n          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));\n          if (position < min) {\n            max = min;\n            min = position;\n          } else {\n            max = position;\n          }\n        }\n        if (extent[0] != min || extent[1] != max) {\n          if (i) yExtentDomain = null; else xExtentDomain = null;\n          extent[0] = min;\n          extent[1] = max;\n          return true;\n        }\n      }\n      function brushend() {\n        brushmove();\n        g.style(\"pointer-events\", \"all\").selectAll(\".resize\").style(\"display\", brush.empty() ? \"none\" : null);\n        d3.select(\"body\").style(\"cursor\", null);\n        w.on(\"mousemove.brush\", null).on(\"mouseup.brush\", null).on(\"touchmove.brush\", null).on(\"touchend.brush\", null).on(\"keydown.brush\", null).on(\"keyup.brush\", null);\n        dragRestore();\n        event_({\n          type: \"brushend\"\n        });\n      }\n    }\n    brush.x = function(z) {\n      if (!arguments.length) return x;\n      x = z;\n      resizes = d3_svg_brushResizes[!x << 1 | !y];\n      return brush;\n    };\n    brush.y = function(z) {\n      if (!arguments.length) return y;\n      y = z;\n      resizes = d3_svg_brushResizes[!x << 1 | !y];\n      return brush;\n    };\n    brush.clamp = function(z) {\n      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;\n      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;\n      return brush;\n    };\n    brush.extent = function(z) {\n      var x0, x1, y0, y1, t;\n      if (!arguments.length) {\n        if (x) {\n          if (xExtentDomain) {\n            x0 = xExtentDomain[0], x1 = xExtentDomain[1];\n          } else {\n            x0 = xExtent[0], x1 = xExtent[1];\n            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);\n            if (x1 < x0) t = x0, x0 = x1, x1 = t;\n          }\n        }\n        if (y) {\n          if (yExtentDomain) {\n            y0 = yExtentDomain[0], y1 = yExtentDomain[1];\n          } else {\n            y0 = yExtent[0], y1 = yExtent[1];\n            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);\n            if (y1 < y0) t = y0, y0 = y1, y1 = t;\n          }\n        }\n        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];\n      }\n      if (x) {\n        x0 = z[0], x1 = z[1];\n        if (y) x0 = x0[0], x1 = x1[0];\n        xExtentDomain = [ x0, x1 ];\n        if (x.invert) x0 = x(x0), x1 = x(x1);\n        if (x1 < x0) t = x0, x0 = x1, x1 = t;\n        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];\n      }\n      if (y) {\n        y0 = z[0], y1 = z[1];\n        if (x) y0 = y0[1], y1 = y1[1];\n        yExtentDomain = [ y0, y1 ];\n        if (y.invert) y0 = y(y0), y1 = y(y1);\n        if (y1 < y0) t = y0, y0 = y1, y1 = t;\n        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];\n      }\n      return brush;\n    };\n    brush.clear = function() {\n      if (!brush.empty()) {\n        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];\n        xExtentDomain = yExtentDomain = null;\n      }\n      return brush;\n    };\n    brush.empty = function() {\n      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];\n    };\n    return d3.rebind(brush, event, \"on\");\n  };\n  var d3_svg_brushCursor = {\n    n: \"ns-resize\",\n    e: \"ew-resize\",\n    s: \"ns-resize\",\n    w: \"ew-resize\",\n    nw: \"nwse-resize\",\n    ne: \"nesw-resize\",\n    se: \"nwse-resize\",\n    sw: \"nesw-resize\"\n  };\n  var d3_svg_brushResizes = [ [ \"n\", \"e\", \"s\", \"w\", \"nw\", \"ne\", \"se\", \"sw\" ], [ \"e\", \"w\" ], [ \"n\", \"s\" ], [] ];\n  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;\n  var d3_time_formatUtc = d3_time_format.utc;\n  var d3_time_formatIso = d3_time_formatUtc(\"%Y-%m-%dT%H:%M:%S.%LZ\");\n  d3_time_format.iso = Date.prototype.toISOString && +new Date(\"2000-01-01T00:00:00.000Z\") ? d3_time_formatIsoNative : d3_time_formatIso;\n  function d3_time_formatIsoNative(date) {\n    return date.toISOString();\n  }\n  d3_time_formatIsoNative.parse = function(string) {\n    var date = new Date(string);\n    return isNaN(date) ? null : date;\n  };\n  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;\n  d3_time.second = d3_time_interval(function(date) {\n    return new d3_date(Math.floor(date / 1e3) * 1e3);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 1e3);\n  }, function(date) {\n    return date.getSeconds();\n  });\n  d3_time.seconds = d3_time.second.range;\n  d3_time.seconds.utc = d3_time.second.utc.range;\n  d3_time.minute = d3_time_interval(function(date) {\n    return new d3_date(Math.floor(date / 6e4) * 6e4);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 6e4);\n  }, function(date) {\n    return date.getMinutes();\n  });\n  d3_time.minutes = d3_time.minute.range;\n  d3_time.minutes.utc = d3_time.minute.utc.range;\n  d3_time.hour = d3_time_interval(function(date) {\n    var timezone = date.getTimezoneOffset() / 60;\n    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);\n  }, function(date, offset) {\n    date.setTime(date.getTime() + Math.floor(offset) * 36e5);\n  }, function(date) {\n    return date.getHours();\n  });\n  d3_time.hours = d3_time.hour.range;\n  d3_time.hours.utc = d3_time.hour.utc.range;\n  d3_time.month = d3_time_interval(function(date) {\n    date = d3_time.day(date);\n    date.setDate(1);\n    return date;\n  }, function(date, offset) {\n    date.setMonth(date.getMonth() + offset);\n  }, function(date) {\n    return date.getMonth();\n  });\n  d3_time.months = d3_time.month.range;\n  d3_time.months.utc = d3_time.month.utc.range;\n  function d3_time_scale(linear, methods, format) {\n    function scale(x) {\n      return linear(x);\n    }\n    scale.invert = function(x) {\n      return d3_time_scaleDate(linear.invert(x));\n    };\n    scale.domain = function(x) {\n      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);\n      linear.domain(x);\n      return scale;\n    };\n    function tickMethod(extent, count) {\n      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);\n      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {\n        return d / 31536e6;\n      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];\n    }\n    scale.nice = function(interval, skip) {\n      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" && tickMethod(extent, interval);\n      if (method) interval = method[0], skip = method[1];\n      function skipped(date) {\n        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;\n      }\n      return scale.domain(d3_scale_nice(domain, skip > 1 ? {\n        floor: function(date) {\n          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);\n          return date;\n        },\n        ceil: function(date) {\n          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);\n          return date;\n        }\n      } : interval));\n    };\n    scale.ticks = function(interval, skip) {\n      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === \"number\" ? tickMethod(extent, interval) : !interval.range && [ {\n        range: interval\n      }, skip ];\n      if (method) interval = method[0], skip = method[1];\n      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);\n    };\n    scale.tickFormat = function() {\n      return format;\n    };\n    scale.copy = function() {\n      return d3_time_scale(linear.copy(), methods, format);\n    };\n    return d3_scale_linearRebind(scale, linear);\n  }\n  function d3_time_scaleDate(t) {\n    return new Date(t);\n  }\n  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];\n  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];\n  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ \".%L\", function(d) {\n    return d.getMilliseconds();\n  } ], [ \":%S\", function(d) {\n    return d.getSeconds();\n  } ], [ \"%I:%M\", function(d) {\n    return d.getMinutes();\n  } ], [ \"%I %p\", function(d) {\n    return d.getHours();\n  } ], [ \"%a %d\", function(d) {\n    return d.getDay() && d.getDate() != 1;\n  } ], [ \"%b %d\", function(d) {\n    return d.getDate() != 1;\n  } ], [ \"%B\", function(d) {\n    return d.getMonth();\n  } ], [ \"%Y\", d3_true ] ]);\n  var d3_time_scaleMilliseconds = {\n    range: function(start, stop, step) {\n      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);\n    },\n    floor: d3_identity,\n    ceil: d3_identity\n  };\n  d3_time_scaleLocalMethods.year = d3_time.year;\n  d3_time.scale = function() {\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);\n  };\n  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {\n    return [ m[0].utc, m[1] ];\n  });\n  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ \".%L\", function(d) {\n    return d.getUTCMilliseconds();\n  } ], [ \":%S\", function(d) {\n    return d.getUTCSeconds();\n  } ], [ \"%I:%M\", function(d) {\n    return d.getUTCMinutes();\n  } ], [ \"%I %p\", function(d) {\n    return d.getUTCHours();\n  } ], [ \"%a %d\", function(d) {\n    return d.getUTCDay() && d.getUTCDate() != 1;\n  } ], [ \"%b %d\", function(d) {\n    return d.getUTCDate() != 1;\n  } ], [ \"%B\", function(d) {\n    return d.getUTCMonth();\n  } ], [ \"%Y\", d3_true ] ]);\n  d3_time_scaleUtcMethods.year = d3_time.year.utc;\n  d3_time.scale.utc = function() {\n    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);\n  };\n  d3.text = d3_xhrType(function(request) {\n    return request.responseText;\n  });\n  d3.json = function(url, callback) {\n    return d3_xhr(url, \"application/json\", d3_json, callback);\n  };\n  function d3_json(request) {\n    return JSON.parse(request.responseText);\n  }\n  d3.html = function(url, callback) {\n    return d3_xhr(url, \"text/html\", d3_html, callback);\n  };\n  function d3_html(request) {\n    var range = d3_document.createRange();\n    range.selectNode(d3_document.body);\n    return range.createContextualFragment(request.responseText);\n  }\n  d3.xml = d3_xhrType(function(request) {\n    return request.responseXML;\n  });\n  if (typeof define === \"function\" && define.amd) define('d3',d3); else if (typeof module === \"object\" && module.exports) module.exports = d3;\n  this.d3 = d3;\n}();\n","!function() {\n  var topojson = {\n    version: \"1.6.18\",\n    mesh: function(topology) { return object(topology, meshArcs.apply(this, arguments)); },\n    meshArcs: meshArcs,\n    merge: function(topology) { return object(topology, mergeArcs.apply(this, arguments)); },\n    mergeArcs: mergeArcs,\n    feature: featureOrCollection,\n    neighbors: neighbors,\n    presimplify: presimplify\n  };\n\n  function stitchArcs(topology, arcs) {\n    var stitchedArcs = {},\n        fragmentByStart = {},\n        fragmentByEnd = {},\n        fragments = [],\n        emptyIndex = -1;\n\n    // Stitch empty arcs first, since they may be subsumed by other arcs.\n    arcs.forEach(function(i, j) {\n      var arc = topology.arcs[i < 0 ? ~i : i], t;\n      if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {\n        t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;\n      }\n    });\n\n    arcs.forEach(function(i) {\n      var e = ends(i),\n          start = e[0],\n          end = e[1],\n          f, g;\n\n      if (f = fragmentByEnd[start]) {\n        delete fragmentByEnd[f.end];\n        f.push(i);\n        f.end = end;\n        if (g = fragmentByStart[end]) {\n          delete fragmentByStart[g.start];\n          var fg = g === f ? f : f.concat(g);\n          fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;\n        } else {\n          fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n        }\n      } else if (f = fragmentByStart[end]) {\n        delete fragmentByStart[f.start];\n        f.unshift(i);\n        f.start = start;\n        if (g = fragmentByEnd[start]) {\n          delete fragmentByEnd[g.end];\n          var gf = g === f ? f : g.concat(f);\n          fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;\n        } else {\n          fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n        }\n      } else {\n        f = [i];\n        fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;\n      }\n    });\n\n    function ends(i) {\n      var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;\n      if (topology.transform) p1 = [0, 0], arc.forEach(function(dp) { p1[0] += dp[0], p1[1] += dp[1]; });\n      else p1 = arc[arc.length - 1];\n      return i < 0 ? [p1, p0] : [p0, p1];\n    }\n\n    function flush(fragmentByEnd, fragmentByStart) {\n      for (var k in fragmentByEnd) {\n        var f = fragmentByEnd[k];\n        delete fragmentByStart[f.start];\n        delete f.start;\n        delete f.end;\n        f.forEach(function(i) { stitchedArcs[i < 0 ? ~i : i] = 1; });\n        fragments.push(f);\n      }\n    }\n\n    flush(fragmentByEnd, fragmentByStart);\n    flush(fragmentByStart, fragmentByEnd);\n    arcs.forEach(function(i) { if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]); });\n\n    return fragments;\n  }\n\n  function meshArcs(topology, o, filter) {\n    var arcs = [];\n\n    if (arguments.length > 1) {\n      var geomsByArc = [],\n          geom;\n\n      function arc(i) {\n        var j = i < 0 ? ~i : i;\n        (geomsByArc[j] || (geomsByArc[j] = [])).push({i: i, g: geom});\n      }\n\n      function line(arcs) {\n        arcs.forEach(arc);\n      }\n\n      function polygon(arcs) {\n        arcs.forEach(line);\n      }\n\n      function geometry(o) {\n        if (o.type === \"GeometryCollection\") o.geometries.forEach(geometry);\n        else if (o.type in geometryType) geom = o, geometryType[o.type](o.arcs);\n      }\n\n      var geometryType = {\n        LineString: line,\n        MultiLineString: polygon,\n        Polygon: polygon,\n        MultiPolygon: function(arcs) { arcs.forEach(polygon); }\n      };\n\n      geometry(o);\n\n      geomsByArc.forEach(arguments.length < 3\n          ? function(geoms) { arcs.push(geoms[0].i); }\n          : function(geoms) { if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i); });\n    } else {\n      for (var i = 0, n = topology.arcs.length; i < n; ++i) arcs.push(i);\n    }\n\n    return {type: \"MultiLineString\", arcs: stitchArcs(topology, arcs)};\n  }\n\n  function mergeArcs(topology, objects) {\n    var polygonsByArc = {},\n        polygons = [],\n        components = [];\n\n    objects.forEach(function(o) {\n      if (o.type === \"Polygon\") register(o.arcs);\n      else if (o.type === \"MultiPolygon\") o.arcs.forEach(register);\n    });\n\n    function register(polygon) {\n      polygon.forEach(function(ring) {\n        ring.forEach(function(arc) {\n          (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);\n        });\n      });\n      polygons.push(polygon);\n    }\n\n    function exterior(ring) {\n      return cartesianRingArea(object(topology, {type: \"Polygon\", arcs: [ring]}).coordinates[0]) > 0; // TODO allow spherical?\n    }\n\n    polygons.forEach(function(polygon) {\n      if (!polygon._) {\n        var component = [],\n            neighbors = [polygon];\n        polygon._ = 1;\n        components.push(component);\n        while (polygon = neighbors.pop()) {\n          component.push(polygon);\n          polygon.forEach(function(ring) {\n            ring.forEach(function(arc) {\n              polygonsByArc[arc < 0 ? ~arc : arc].forEach(function(polygon) {\n                if (!polygon._) {\n                  polygon._ = 1;\n                  neighbors.push(polygon);\n                }\n              });\n            });\n          });\n        }\n      }\n    });\n\n    polygons.forEach(function(polygon) {\n      delete polygon._;\n    });\n\n    return {\n      type: \"MultiPolygon\",\n      arcs: components.map(function(polygons) {\n        var arcs = [];\n\n        // Extract the exterior (unique) arcs.\n        polygons.forEach(function(polygon) {\n          polygon.forEach(function(ring) {\n            ring.forEach(function(arc) {\n              if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {\n                arcs.push(arc);\n              }\n            });\n          });\n        });\n\n        // Stitch the arcs into one or more rings.\n        arcs = stitchArcs(topology, arcs);\n\n        // If more than one ring is returned,\n        // at most one of these rings can be the exterior;\n        // this exterior ring has the same winding order\n        // as any exterior ring in the original polygons.\n        if ((n = arcs.length) > 1) {\n          var sgn = exterior(polygons[0][0]);\n          for (var i = 0, t; i < n; ++i) {\n            if (sgn === exterior(arcs[i])) {\n              t = arcs[0], arcs[0] = arcs[i], arcs[i] = t;\n              break;\n            }\n          }\n        }\n\n        return arcs;\n      })\n    };\n  }\n\n  function featureOrCollection(topology, o) {\n    return o.type === \"GeometryCollection\" ? {\n      type: \"FeatureCollection\",\n      features: o.geometries.map(function(o) { return feature(topology, o); })\n    } : feature(topology, o);\n  }\n\n  function feature(topology, o) {\n    var f = {\n      type: \"Feature\",\n      id: o.id,\n      properties: o.properties || {},\n      geometry: object(topology, o)\n    };\n    if (o.id == null) delete f.id;\n    return f;\n  }\n\n  function object(topology, o) {\n    var absolute = transformAbsolute(topology.transform),\n        arcs = topology.arcs;\n\n    function arc(i, points) {\n      if (points.length) points.pop();\n      for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length, p; k < n; ++k) {\n        points.push(p = a[k].slice());\n        absolute(p, k);\n      }\n      if (i < 0) reverse(points, n);\n    }\n\n    function point(p) {\n      p = p.slice();\n      absolute(p, 0);\n      return p;\n    }\n\n    function line(arcs) {\n      var points = [];\n      for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\n      if (points.length < 2) points.push(points[0].slice());\n      return points;\n    }\n\n    function ring(arcs) {\n      var points = line(arcs);\n      while (points.length < 4) points.push(points[0].slice());\n      return points;\n    }\n\n    function polygon(arcs) {\n      return arcs.map(ring);\n    }\n\n    function geometry(o) {\n      var t = o.type;\n      return t === \"GeometryCollection\" ? {type: t, geometries: o.geometries.map(geometry)}\n          : t in geometryType ? {type: t, coordinates: geometryType[t](o)}\n          : null;\n    }\n\n    var geometryType = {\n      Point: function(o) { return point(o.coordinates); },\n      MultiPoint: function(o) { return o.coordinates.map(point); },\n      LineString: function(o) { return line(o.arcs); },\n      MultiLineString: function(o) { return o.arcs.map(line); },\n      Polygon: function(o) { return polygon(o.arcs); },\n      MultiPolygon: function(o) { return o.arcs.map(polygon); }\n    };\n\n    return geometry(o);\n  }\n\n  function reverse(array, n) {\n    var t, j = array.length, i = j - n; while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;\n  }\n\n  function bisect(a, x) {\n    var lo = 0, hi = a.length;\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (a[mid] < x) lo = mid + 1;\n      else hi = mid;\n    }\n    return lo;\n  }\n\n  function neighbors(objects) {\n    var indexesByArc = {}, // arc index -> array of object indexes\n        neighbors = objects.map(function() { return []; });\n\n    function line(arcs, i) {\n      arcs.forEach(function(a) {\n        if (a < 0) a = ~a;\n        var o = indexesByArc[a];\n        if (o) o.push(i);\n        else indexesByArc[a] = [i];\n      });\n    }\n\n    function polygon(arcs, i) {\n      arcs.forEach(function(arc) { line(arc, i); });\n    }\n\n    function geometry(o, i) {\n      if (o.type === \"GeometryCollection\") o.geometries.forEach(function(o) { geometry(o, i); });\n      else if (o.type in geometryType) geometryType[o.type](o.arcs, i);\n    }\n\n    var geometryType = {\n      LineString: line,\n      MultiLineString: polygon,\n      Polygon: polygon,\n      MultiPolygon: function(arcs, i) { arcs.forEach(function(arc) { polygon(arc, i); }); }\n    };\n\n    objects.forEach(geometry);\n\n    for (var i in indexesByArc) {\n      for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {\n        for (var k = j + 1; k < m; ++k) {\n          var ij = indexes[j], ik = indexes[k], n;\n          if ((n = neighbors[ij])[i = bisect(n, ik)] !== ik) n.splice(i, 0, ik);\n          if ((n = neighbors[ik])[i = bisect(n, ij)] !== ij) n.splice(i, 0, ij);\n        }\n      }\n    }\n\n    return neighbors;\n  }\n\n  function presimplify(topology, triangleArea) {\n    var absolute = transformAbsolute(topology.transform),\n        relative = transformRelative(topology.transform),\n        heap = minAreaHeap();\n\n    if (!triangleArea) triangleArea = cartesianTriangleArea;\n\n    topology.arcs.forEach(function(arc) {\n      var triangles = [],\n          maxArea = 0,\n          triangle;\n\n      // To store each point’s effective area, we create a new array rather than\n      // extending the passed-in point to workaround a Chrome/V8 bug (getting\n      // stuck in smi mode). For midpoints, the initial effective area of\n      // Infinity will be computed in the next step.\n      for (var i = 0, n = arc.length, p; i < n; ++i) {\n        p = arc[i];\n        absolute(arc[i] = [p[0], p[1], Infinity], i);\n      }\n\n      for (var i = 1, n = arc.length - 1; i < n; ++i) {\n        triangle = arc.slice(i - 1, i + 2);\n        triangle[1][2] = triangleArea(triangle);\n        triangles.push(triangle);\n        heap.push(triangle);\n      }\n\n      for (var i = 0, n = triangles.length; i < n; ++i) {\n        triangle = triangles[i];\n        triangle.previous = triangles[i - 1];\n        triangle.next = triangles[i + 1];\n      }\n\n      while (triangle = heap.pop()) {\n        var previous = triangle.previous,\n            next = triangle.next;\n\n        // If the area of the current point is less than that of the previous point\n        // to be eliminated, use the latter's area instead. This ensures that the\n        // current point cannot be eliminated without eliminating previously-\n        // eliminated points.\n        if (triangle[1][2] < maxArea) triangle[1][2] = maxArea;\n        else maxArea = triangle[1][2];\n\n        if (previous) {\n          previous.next = next;\n          previous[2] = triangle[2];\n          update(previous);\n        }\n\n        if (next) {\n          next.previous = previous;\n          next[0] = triangle[0];\n          update(next);\n        }\n      }\n\n      arc.forEach(relative);\n    });\n\n    function update(triangle) {\n      heap.remove(triangle);\n      triangle[1][2] = triangleArea(triangle);\n      heap.push(triangle);\n    }\n\n    return topology;\n  };\n\n  function cartesianRingArea(ring) {\n    var i = -1,\n        n = ring.length,\n        a,\n        b = ring[n - 1],\n        area = 0;\n\n    while (++i < n) {\n      a = b;\n      b = ring[i];\n      area += a[0] * b[1] - a[1] * b[0];\n    }\n\n    return area * .5;\n  }\n\n  function cartesianTriangleArea(triangle) {\n    var a = triangle[0], b = triangle[1], c = triangle[2];\n    return Math.abs((a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]));\n  }\n\n  function compareArea(a, b) {\n    return a[1][2] - b[1][2];\n  }\n\n  function minAreaHeap() {\n    var heap = {},\n        array = [],\n        size = 0;\n\n    heap.push = function(object) {\n      up(array[object._ = size] = object, size++);\n      return size;\n    };\n\n    heap.pop = function() {\n      if (size <= 0) return;\n      var removed = array[0], object;\n      if (--size > 0) object = array[size], down(array[object._ = 0] = object, 0);\n      return removed;\n    };\n\n    heap.remove = function(removed) {\n      var i = removed._, object;\n      if (array[i] !== removed) return; // invalid request\n      if (i !== --size) object = array[size], (compareArea(object, removed) < 0 ? up : down)(array[object._ = i] = object, i);\n      return i;\n    };\n\n    function up(object, i) {\n      while (i > 0) {\n        var j = ((i + 1) >> 1) - 1,\n            parent = array[j];\n        if (compareArea(object, parent) >= 0) break;\n        array[parent._ = i] = parent;\n        array[object._ = i = j] = object;\n      }\n    }\n\n    function down(object, i) {\n      while (true) {\n        var r = (i + 1) << 1,\n            l = r - 1,\n            j = i,\n            child = array[j];\n        if (l < size && compareArea(array[l], child) < 0) child = array[j = l];\n        if (r < size && compareArea(array[r], child) < 0) child = array[j = r];\n        if (j === i) break;\n        array[child._ = i] = child;\n        array[object._ = i = j] = object;\n      }\n    }\n\n    return heap;\n  }\n\n  function transformAbsolute(transform) {\n    if (!transform) return noop;\n    var x0,\n        y0,\n        kx = transform.scale[0],\n        ky = transform.scale[1],\n        dx = transform.translate[0],\n        dy = transform.translate[1];\n    return function(point, i) {\n      if (!i) x0 = y0 = 0;\n      point[0] = (x0 += point[0]) * kx + dx;\n      point[1] = (y0 += point[1]) * ky + dy;\n    };\n  }\n\n  function transformRelative(transform) {\n    if (!transform) return noop;\n    var x0,\n        y0,\n        kx = transform.scale[0],\n        ky = transform.scale[1],\n        dx = transform.translate[0],\n        dy = transform.translate[1];\n    return function(point, i) {\n      if (!i) x0 = y0 = 0;\n      var x1 = (point[0] - dx) / kx | 0,\n          y1 = (point[1] - dy) / ky | 0;\n      point[0] = x1 - x0;\n      point[1] = y1 - y0;\n      x0 = x1;\n      y0 = y1;\n    };\n  }\n\n  function noop() {}\n\n  if (typeof define === \"function\" && define.amd) define('topojson',topojson);\n  else if (typeof module === \"object\" && module.exports) module.exports = topojson;\n  else this.topojson = topojson;\n}();\n\n","require(['d3', 'topojson'], function(d3, topojson) {\r\n\r\n  'use strict';\r\n\r\n  d3.json('data/counties.topojson', function(err, counties) {\r\n    if (err) return console.error(err);\r\n\r\n    var width = 960,\r\n    height = 900;\r\n\r\n    var svg = d3.select('#county-map').append('svg')\r\n        .attr('width', width)\r\n        .attr('height', height);\r\n\r\n    // Get the county geos from the topo file\r\n    var countyGeos = topojson.feature(counties, counties.objects.tl_2014_us_county_texas);\r\n\r\n    // Setup the projection\r\n    var projection = d3.geo.conicConformal()\r\n      .center([2, 31.15])\r\n      .rotate([102, 0])\r\n      .scale(5550)\r\n      .translate([width / 2, height / 2]);\r\n\r\n    // Path generator\r\n    var path = d3.geo.path()\r\n      .projection(projection);\r\n\r\n    // The years to compare\r\n    var compare = {\r\n      start: 2010,\r\n      end: 2014\r\n    };\r\n\r\n    // Calculate percent change\r\n    var percentChange = function(start, end) {\r\n      return (end - start) / start;\r\n    };\r\n\r\n    // Extract features from topojson\r\n    var countyGeo = topojson.feature(counties, counties.objects.tl_2014_us_county_texas).features;\r\n\r\n    // Add percent change, so we can set our color scale\r\n    var data = countyGeo.map(function(d) {\r\n      d.change = percentChange(d.properties['p' + compare.start], d.properties['p' + compare.end]);\r\n      return d;\r\n    });\r\n\r\n    // Color scale\r\n    var color = d3.scale.linear()\r\n      .domain([\r\n        d3.min(data, function(d) {\r\n          return d.change;\r\n        }),\r\n        0,\r\n        d3.max(data, function(d) {\r\n          return d.change;\r\n        })\r\n      ])\r\n      .range(['rgb(131, 29, 29)', '#fff', 'rgb(8, 48, 107)']);\r\n\r\n    // Add paths for counties\r\n    svg.selectAll('.county')\r\n      .data(data)\r\n    .enter().append('path')\r\n      .attr('fill', function(d) {\r\n        return color(d.change);\r\n      })\r\n      .attr('d', path);\r\n  });\r\n\r\n});\r\n\ndefine(\"app\", function(){});\n\n"]}